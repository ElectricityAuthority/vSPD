}
blobcontainer <- blob_container(endpoint = endpoint,name = "publicdata")
if (casetype!='RTD') {
endpoint <- blob_endpoint(endpoint =config$madatasource_endpoint,key = config$madatasource_key)
blobcontainer <- blob_container(endpoint = endpoint,name = "casefiles")
}
SolutionIsland <- NULL
SolutionTrdrPrd <- NULL
SolutionPnode <- NULL
SolutionBus <- NULL
SolutionBranch <- NULL
SolutionCnstr <- NULL
CluMessage <- NULL
BranchNode <- NULL
HVDCLink <- NULL
ObjectiveValue <- NULL
# Download MSS
DownloadDestination <- paste0('Output/',runname, '/')
if (!dir.exists(DownloadDestination)) {
dir.create(DownloadDestination,recursive = T)
}
for (mss in listblobs$mss) {
msspath <- listblobs$name[which(listblobs$mss==mss)]
msspath <- gsub(x=msspath,pattern = 'GDX',replacement = 'CaseFiles') %>% dirname()
filename = gsub(x = mss, pattern = 'SPDSOLVED',replacement = 'ZIP')
if (casetype!='RTD') msspath <- paste0('processed/',casetype)
filename = paste0(msspath,'/',filename)
if (file.exists(paste0(DownloadDestination,basename(filename)))) {
print(paste0(filename, ' has already been downloaded'))
} else {
print(paste0('Downloading ', basename(filename)))
storage_download(container = blobcontainer,src = filename,
dest = paste0(DownloadDestination,basename(filename)),
overwrite = T)
}
zip_file <- paste0(DownloadDestination,basename(filename))
mssdata <- Read_MSS_Data_To_Dataframes_List(mssFilePath = zip_file)
rundt <- mssdata$RUNDATETIME %>%
format(format = '%d-%b-%Y %H:%M:%S',tz = 'Pacific/Auckland') %>% toupper()
mssdata$SPDSOLVED$ISLAND$RunTime <- rundt
mssdata$SPDSOLVED$TRADERPERIOD$RunTime <- rundt
mssdata$SPDSOLVED$PNODE$RunTime <- rundt
mssdata$SPDSOLVED$BUS$RunTime <- rundt
mssdata$SPDSOLVED$BRANCH$RunTime <- rundt
mssdata$SPDSOLVED$CONSTRAINT$RunTime <- rundt
mssdata$SPDSOLVED$CLUMESSAGE$RunTime <- rundt
# Read Solution Island
if (is.null(SolutionIsland)) {
SolutionIsland  <- mssdata$SPDSOLVED$ISLAND
SolutionTrdrPrd <- mssdata$SPDSOLVED$TRADERPERIOD
SolutionPnode   <- mssdata$SPDSOLVED$PNODE
SolutionBus     <- mssdata$SPDSOLVED$BUS
SolutionBranch  <- mssdata$SPDSOLVED$BRANCH
SolutionCnstr   <- mssdata$SPDSOLVED$CONSTRAINT
CluMessage      <- mssdata$SPDSOLVED$CLUMESSAGE
BranchNode      <- mssdata$MSSNET$BRANCHNODE
HVDCLink        <- mssdata$PERIOD$HVDCLINK
} else {
SolutionIsland  <- rbind(SolutionIsland,mssdata$SPDSOLVED$ISLAND)
SolutionTrdrPrd <- rbind(SolutionTrdrPrd,mssdata$SPDSOLVED$TRADERPERIOD)
SolutionPnode   <- rbind(SolutionPnode,mssdata$SPDSOLVED$PNODE)
SolutionBus     <- rbind(SolutionBus,mssdata$SPDSOLVED$BUS)
SolutionBranch  <- rbind(SolutionBranch,mssdata$SPDSOLVED$BRANCH)
SolutionCnstr   <- rbind(SolutionCnstr,mssdata$SPDSOLVED$CONSTRAINT)
CluMessage      <- rbind(CluMessage,mssdata$SPDSOLVED$CLUMESSAGE)
BranchNode      <- rbind(BranchNode,mssdata$MSSNET$BRANCHNODE)
HVDCLink        <- rbind(HVDCLink,mssdata$PERIOD$HVDCLINK)
}
}
branch_branch <- BranchNode %>% mutate_if(is.character, str_squish) %>%
transmute(BRANCHNAME = ID_BRANCH,
Branch = ifelse(KEY4 == 'LN', paste0(KEY2,".",KEY3),
paste0(KEY1,"_",KEY2,".",KEY3)))
branch_branch <- HVDCLink %>%
transmute(BRANCHNAME = HVDCBRANCH, Branch = HVDCBRANCH ) %>%
rbind(branch_branch) %>% distinct() %>%
mutate(BRANCHNAME = gsub(x = BRANCHNAME,pattern = " ",replacement = ""))
df <- CluMessage %>%
select(RunTime,CLUMETHOD,CLUMESSAGE_1) %>%
filter(CLUMETHOD == 'SPDSolvePeriod')
df$TimeStamp = sapply(strsplit(df$CLUMESSAGE_1, "\\|"), "[", 1)
df$CLUMESSAGE = sapply(strsplit(df$CLUMESSAGE_1, "\\|"), "[", 2)
CluMessage <- df %>% select(RunTime, TimeStamp, CLUMESSAGE)
df <- df %>% filter(startsWith(CLUMESSAGE,'Objective function value')) %>%
mutate(CLUMESSAGE = gsub(x=CLUMESSAGE,pattern = 'Objective function value =  ','')) %>%
transmute(RunTime,CLUMESSAGE = trimws(CLUMESSAGE),TimeStamp)
df$ObjectiveValue = sapply(strsplit(df$CLUMESSAGE, " for "), "[", 1)
df$CLUMESSAGE = sapply(strsplit(df$CLUMESSAGE, " for "), "[", 2)
df$DateTime = sapply(strsplit(df$CLUMESSAGE, " \\("), "[", 1)
df <- df %>% transmute(DateTime,RunTime, TimeStamp = as.POSIXct(strptime(TimeStamp,'%d-%m-%Y %H:%M:%S')),
ObjectiveValue = -as.numeric(ObjectiveValue))
ObjectiveValue <- df
}
mssdata$SPDSOLVED$CLUMESSAGE
# Download MSS case files
if (T) {
config <- config::get(file = 'C:/ZZZ/config.yml',config = 'testing')
# Set Blob container using endpoint
if (config$emi_key=="") {
endpoint <- blob_endpoint(endpoint =config$emi_endpoint)
} else{
endpoint <- blob_endpoint(endpoint =config$emi_endpoint,key = config$emi_key)
}
blobcontainer <- blob_container(endpoint = endpoint,name = "publicdata")
if (casetype!='RTD') {
endpoint <- blob_endpoint(endpoint =config$madatasource_endpoint,key = config$madatasource_key)
blobcontainer <- blob_container(endpoint = endpoint,name = "casefiles")
}
SolutionIsland <- NULL
SolutionTrdrPrd <- NULL
SolutionPnode <- NULL
SolutionBus <- NULL
SolutionBranch <- NULL
SolutionCnstr <- NULL
CluMessage <- NULL
BranchNode <- NULL
HVDCLink <- NULL
ObjectiveValue <- NULL
# Download MSS
DownloadDestination <- paste0('Output/',runname, '/')
if (!dir.exists(DownloadDestination)) {
dir.create(DownloadDestination,recursive = T)
}
for (mss in listblobs$mss) {
msspath <- listblobs$name[which(listblobs$mss==mss)]
msspath <- gsub(x=msspath,pattern = 'GDX',replacement = 'CaseFiles') %>% dirname()
filename = gsub(x = mss, pattern = 'SPDSOLVED',replacement = 'ZIP')
if (casetype!='RTD') msspath <- paste0('processed/',casetype)
filename = paste0(msspath,'/',filename)
if (file.exists(paste0(DownloadDestination,basename(filename)))) {
print(paste0(filename, ' has already been downloaded'))
} else {
print(paste0('Downloading ', basename(filename)))
storage_download(container = blobcontainer,src = filename,
dest = paste0(DownloadDestination,basename(filename)),
overwrite = T)
}
zip_file <- paste0(DownloadDestination,basename(filename))
mssdata <- Read_MSS_Data_To_Dataframes_List(mssFilePath = zip_file)
rundt <- mssdata$RUNDATETIME %>%
format(format = '%d-%b-%Y %H:%M:%S',tz = 'Pacific/Auckland') %>% toupper()
mssdata$SPDSOLVED$ISLAND$RunTime <- rundt
mssdata$SPDSOLVED$TRADERPERIOD$RunTime <- rundt
mssdata$SPDSOLVED$PNODE$RunTime <- rundt
mssdata$SPDSOLVED$BUS$RunTime <- rundt
mssdata$SPDSOLVED$BRANCH$RunTime <- rundt
mssdata$SPDSOLVED$CONSTRAINT$RunTime <- rundt
mssdata$SPDSOLVED$CLUMESSAGE$RunTime <- rundt
# Read Solution Island
if (is.null(SolutionIsland)) {
SolutionIsland  <- mssdata$SPDSOLVED$ISLAND
SolutionTrdrPrd <- mssdata$SPDSOLVED$TRADERPERIOD
SolutionPnode   <- mssdata$SPDSOLVED$PNODE
SolutionBus     <- mssdata$SPDSOLVED$BUS
SolutionBranch  <- mssdata$SPDSOLVED$BRANCH
SolutionCnstr   <- mssdata$SPDSOLVED$CONSTRAINT
CluMessage      <- mssdata$SPDSOLVED$CLUMESSAGE
BranchNode      <- mssdata$MSSNET$BRANCHNODE
HVDCLink        <- mssdata$PERIOD$HVDCLINK
} else {
SolutionIsland  <- rbind(SolutionIsland,mssdata$SPDSOLVED$ISLAND)
SolutionTrdrPrd <- rbind(SolutionTrdrPrd,mssdata$SPDSOLVED$TRADERPERIOD)
SolutionPnode   <- rbind(SolutionPnode,mssdata$SPDSOLVED$PNODE)
SolutionBus     <- rbind(SolutionBus,mssdata$SPDSOLVED$BUS)
SolutionBranch  <- rbind(SolutionBranch,mssdata$SPDSOLVED$BRANCH)
SolutionCnstr   <- rbind(SolutionCnstr,mssdata$SPDSOLVED$CONSTRAINT)
CluMessage      <- rbind(CluMessage,mssdata$SPDSOLVED$CLUMESSAGE)
BranchNode      <- rbind(BranchNode,mssdata$MSSNET$BRANCHNODE)
HVDCLink        <- rbind(HVDCLink,mssdata$PERIOD$HVDCLINK)
}
}
branch_branch <- BranchNode %>% mutate_if(is.character, str_squish) %>%
transmute(BRANCHNAME = ID_BRANCH,
Branch = ifelse(KEY4 == 'LN', paste0(KEY2,".",KEY3),
paste0(KEY1,"_",KEY2,".",KEY3)))
branch_branch <- HVDCLink %>%
transmute(BRANCHNAME = HVDCBRANCH, Branch = HVDCBRANCH ) %>%
rbind(branch_branch) %>% distinct() %>%
mutate(BRANCHNAME = gsub(x = BRANCHNAME,pattern = " ",replacement = ""))
df <- CluMessage %>%
select(RunTime,CLUMETHOD,CLUMESSAGE_1) %>%
filter(CLUMETHOD == 'SPDSolvePeriod')
df$TimeStamp = sapply(strsplit(df$CLUMESSAGE_1, "\\|"), "[", 1)
df$CLUMESSAGE = sapply(strsplit(df$CLUMESSAGE_1, "\\|"), "[", 2)
CluMessage <- df %>% select(RunTime, TimeStamp, CLUMESSAGE)
df <- df %>% filter(startsWith(CLUMESSAGE,'Objective function value')) %>%
mutate(CLUMESSAGE = gsub(x=CLUMESSAGE,pattern = 'Objective function value =  ','')) %>%
transmute(RunTime,CLUMESSAGE = trimws(CLUMESSAGE),TimeStamp)
df$ObjectiveValue = sapply(strsplit(df$CLUMESSAGE, " for "), "[", 1)
df$CLUMESSAGE = sapply(strsplit(df$CLUMESSAGE, " for "), "[", 2)
df$DateTime = sapply(strsplit(df$CLUMESSAGE, " \\("), "[", 1)
df <- df %>% transmute(DateTime,RunTime, TimeStamp = as.POSIXct(strptime(TimeStamp,'%d-%m-%Y %H:%M:%S')),
ObjectiveValue = -as.numeric(ObjectiveValue))
ObjectiveValue <- df
}
df <- CluMessage %>%
select(RunTime,CLUMETHOD,CLUMESSAGE_1) %>%
filter(CLUMETHOD == 'SPDSolvePeriod')
df <- CluMessage
CluMessage      <- mssdata$SPDSOLVED$CLUMESSAGE
source("C:/vSPD/ElectricityAuthority/RTP4_detail_tesing_script_.R")
CluMessage      <- mssdata$SPDSOLVED$CLUMESSAGE
df <- CluMessage %>%
select(RunTime,CLUMETHOD,CLUMESSAGE_1)
View(df)
df <- CluMessage %>%
select(RunTime,CLUMETHOD,CLUMESSAGE_1) %>%
filter(contains(CLUMETHOD,'SPDSolvePeriod'))
df <- CluMessage %>%
select(RunTime,CLUMETHOD,CLUMESSAGE_1) %>%
filter(contains(CLUMETHOD,'SPDSolvePeriod'))
df <- CluMessage %>%
select(RunTime,CLUMETHOD,CLUMESSAGE_1) %>%
filter(endsWith(CLUMETHOD,'SPDSolvePeriod'))
df$TimeStamp = sapply(strsplit(df$CLUMESSAGE_1, "\\|"), "[", 1)
df$CLUMESSAGE = sapply(strsplit(df$CLUMESSAGE_1, "\\|"), "[", 2)
CluMessage <- df %>% select(RunTime, TimeStamp, CLUMESSAGE)
View(CluMessage)
df <- df %>% filter(startsWith(CLUMESSAGE,'Objective function value')) %>%
mutate(CLUMESSAGE = gsub(x=CLUMESSAGE,pattern = 'Objective function value =  ','')) %>%
transmute(RunTime,CLUMESSAGE = trimws(CLUMESSAGE),TimeStamp)
df$ObjectiveValue = sapply(strsplit(df$CLUMESSAGE, " for "), "[", 1)
df$CLUMESSAGE = sapply(strsplit(df$CLUMESSAGE, " for "), "[", 2)
df$DateTime = sapply(strsplit(df$CLUMESSAGE, " \\("), "[", 1)
df <- df %>% transmute(DateTime,RunTime, TimeStamp = as.POSIXct(strptime(TimeStamp,'%d-%m-%Y %H:%M:%S')),
ObjectiveValue = -as.numeric(ObjectiveValue))
ObjectiveValue <- df
View(CluMessage)
# Download MSS case files
if (T) {
config <- config::get(file = 'C:/ZZZ/config.yml',config = 'testing')
# Set Blob container using endpoint
if (config$emi_key=="") {
endpoint <- blob_endpoint(endpoint =config$emi_endpoint)
} else{
endpoint <- blob_endpoint(endpoint =config$emi_endpoint,key = config$emi_key)
}
blobcontainer <- blob_container(endpoint = endpoint,name = "publicdata")
if (casetype!='RTD') {
endpoint <- blob_endpoint(endpoint =config$madatasource_endpoint,key = config$madatasource_key)
blobcontainer <- blob_container(endpoint = endpoint,name = "casefiles")
}
SolutionIsland <- NULL
SolutionTrdrPrd <- NULL
SolutionPnode <- NULL
SolutionBus <- NULL
SolutionBranch <- NULL
SolutionCnstr <- NULL
CluMessage <- NULL
BranchNode <- NULL
HVDCLink <- NULL
ObjectiveValue <- NULL
# Download MSS
DownloadDestination <- paste0('Output/',runname, '/')
if (!dir.exists(DownloadDestination)) {
dir.create(DownloadDestination,recursive = T)
}
for (mss in listblobs$mss) {
msspath <- listblobs$name[which(listblobs$mss==mss)]
msspath <- gsub(x=msspath,pattern = 'GDX',replacement = 'CaseFiles') %>% dirname()
filename = gsub(x = mss, pattern = 'SPDSOLVED',replacement = 'ZIP')
if (casetype!='RTD') msspath <- paste0('processed/',casetype)
filename = paste0(msspath,'/',filename)
if (file.exists(paste0(DownloadDestination,basename(filename)))) {
print(paste0(filename, ' has already been downloaded'))
} else {
print(paste0('Downloading ', basename(filename)))
storage_download(container = blobcontainer,src = filename,
dest = paste0(DownloadDestination,basename(filename)),
overwrite = T)
}
zip_file <- paste0(DownloadDestination,basename(filename))
mssdata <- Read_MSS_Data_To_Dataframes_List(mssFilePath = zip_file)
rundt <- mssdata$RUNDATETIME %>%
format(format = '%d-%b-%Y %H:%M:%S',tz = 'Pacific/Auckland') %>% toupper()
mssdata$SPDSOLVED$ISLAND$RunTime <- rundt
mssdata$SPDSOLVED$TRADERPERIOD$RunTime <- rundt
mssdata$SPDSOLVED$PNODE$RunTime <- rundt
mssdata$SPDSOLVED$BUS$RunTime <- rundt
mssdata$SPDSOLVED$BRANCH$RunTime <- rundt
mssdata$SPDSOLVED$CONSTRAINT$RunTime <- rundt
mssdata$SPDSOLVED$CLUMESSAGE$RunTime <- rundt
# Read Solution Island
if (is.null(SolutionIsland)) {
SolutionIsland  <- mssdata$SPDSOLVED$ISLAND
SolutionTrdrPrd <- mssdata$SPDSOLVED$TRADERPERIOD
SolutionPnode   <- mssdata$SPDSOLVED$PNODE
SolutionBus     <- mssdata$SPDSOLVED$BUS
SolutionBranch  <- mssdata$SPDSOLVED$BRANCH
SolutionCnstr   <- mssdata$SPDSOLVED$CONSTRAINT
CluMessage      <- mssdata$SPDSOLVED$CLUMESSAGE
BranchNode      <- mssdata$MSSNET$BRANCHNODE
HVDCLink        <- mssdata$PERIOD$HVDCLINK
} else {
SolutionIsland  <- rbind(SolutionIsland,mssdata$SPDSOLVED$ISLAND)
SolutionTrdrPrd <- rbind(SolutionTrdrPrd,mssdata$SPDSOLVED$TRADERPERIOD)
SolutionPnode   <- rbind(SolutionPnode,mssdata$SPDSOLVED$PNODE)
SolutionBus     <- rbind(SolutionBus,mssdata$SPDSOLVED$BUS)
SolutionBranch  <- rbind(SolutionBranch,mssdata$SPDSOLVED$BRANCH)
SolutionCnstr   <- rbind(SolutionCnstr,mssdata$SPDSOLVED$CONSTRAINT)
CluMessage      <- rbind(CluMessage,mssdata$SPDSOLVED$CLUMESSAGE)
BranchNode      <- rbind(BranchNode,mssdata$MSSNET$BRANCHNODE)
HVDCLink        <- rbind(HVDCLink,mssdata$PERIOD$HVDCLINK)
}
}
branch_branch <- BranchNode %>% mutate_if(is.character, str_squish) %>%
transmute(BRANCHNAME = ID_BRANCH,
Branch = ifelse(KEY4 == 'LN', paste0(KEY2,".",KEY3),
paste0(KEY1,"_",KEY2,".",KEY3)))
branch_branch <- HVDCLink %>%
transmute(BRANCHNAME = HVDCBRANCH, Branch = HVDCBRANCH ) %>%
rbind(branch_branch) %>% distinct() %>%
mutate(BRANCHNAME = gsub(x = BRANCHNAME,pattern = " ",replacement = ""))
df <- CluMessage %>%
select(RunTime,CLUMETHOD,CLUMESSAGE_1) %>%
filter(endsWith(CLUMETHOD,'SPDSolvePeriod'))
df$TimeStamp = sapply(strsplit(df$CLUMESSAGE_1, "\\|"), "[", 1)
df$CLUMESSAGE = sapply(strsplit(df$CLUMESSAGE_1, "\\|"), "[", 2)
CluMessage <- df %>% select(RunTime, TimeStamp, CLUMESSAGE)
df <- df %>% filter(startsWith(CLUMESSAGE,'Objective function value')) %>%
mutate(CLUMESSAGE = gsub(x=CLUMESSAGE,pattern = 'Objective function value =  ','')) %>%
transmute(RunTime,CLUMESSAGE = trimws(CLUMESSAGE),TimeStamp)
df$ObjectiveValue = sapply(strsplit(df$CLUMESSAGE, " for "), "[", 1)
df$CLUMESSAGE = sapply(strsplit(df$CLUMESSAGE, " for "), "[", 2)
df$DateTime = sapply(strsplit(df$CLUMESSAGE, " \\("), "[", 1)
df <- df %>% transmute(DateTime,RunTime, TimeStamp = as.POSIXct(strptime(TimeStamp,'%d-%m-%Y %H:%M:%S')),
ObjectiveValue = -as.numeric(ObjectiveValue))
ObjectiveValue <- df
}
# Compare vsPD vs SPD
if (T) {
# Branch Solution Comparison
if (T) {
df <- read.csv(paste0('Output/',runname,'/',runname,'_BranchResults_TP.csv'),header = T, as.is = T)
cn <- colnames(df)
cn <- sapply(X = cn, gsub, pattern = "\\.", replacement = "")
colnames(df) <- cn
df1 <- SolutionBranch %>%
mutate(BRANCHNAME = gsub(x = BRANCHNAME,pattern = " ",replacement = ""),
DISCONNECTED = as.integer(DISCONNECTED)
) %>%
inner_join(branch_branch, by = 'BRANCHNAME') %>%
transmute(DateTime = INTERVAL, RunTime, Branch,
FromBus = as.integer(FROM_ID_BUS), ToBus = as.integer(TO_ID_BUS),
SPDFLOWMWFROMTO = ifelse(as.numeric(FROM_MW) < 0,as.numeric(TO_MW), as.numeric(FROM_MW)),
SPDMWMAX	= as.numeric(MWMAX),
SPDFIXEDLOSS = ifelse(DISCONNECTED == 1,0, as.numeric(FIXEDLOSS)),
SPDBRANCHDYNAMICLOSSES = as.numeric(BRANCHLOSSES) - SPDFIXEDLOSS,
SPDMARGINALPRICE = as.numeric(MARGINALPRICE)
)
hvdcloss <- df1 %>%
select(DateTime, RunTime, Branch,
SPDFIXEDLOSS,SPDBRANCHDYNAMICLOSSES) %>%
filter(Branch %in% c('BEN_HAY1.1','BEN_HAY2.1','HAY_BEN1.1','HAY_BEN2.1')) %>%
mutate(Island = ifelse(Branch %in% c('BEN_HAY1.1','BEN_HAY2.1'),'NI','SI')) %>%
group_by(DateTime, RunTime,Island) %>%
summarise(SPDFIXEDLOSS = sum(SPDFIXEDLOSS),
SPDBRANCHDYNAMICLOSSES = sum(SPDBRANCHDYNAMICLOSSES)) %>%
ungroup()
hvdcloss <- hvdcloss %>% group_by(DateTime,RunTime) %>%
summarise(SPDFIXEDLOSS1 = sum(SPDFIXEDLOSS)/2) %>%
ungroup() %>% inner_join(hvdcloss,by = c('DateTime','RunTime')) %>%
transmute(DateTime, RunTime,Island,HVDCLOSS = SPDFIXEDLOSS1 +SPDBRANCHDYNAMICLOSSES)
CompareBranch <-
df %>% full_join(df1,by=c('DateTime','RunTime','Branch','FromBus','ToBus')) %>%
mutate(FLOWCOMPARE = round(SPDFLOWMWFROMTO - FlowMWFromTo,4),
VARIABLELOSSCOMPARE = round(SPDBRANCHDYNAMICLOSSES - DynamicLossMW,6),
FIXEDLOSSCOMPARE = round(SPDFIXEDLOSS - FixedLossMW,3)
)
write.csv(CompareBranch,file = paste0('Output/',runname,'/',runname,'_CompareBranch.csv'),row.names = F)
}
# Island Solution Comparison
if (T) {
df <- read.csv(paste0('Output/',runname,'/',runname,'_IslandResults_TP.csv'),header = T, as.is = T)
cn <- colnames(df)
cn <- sapply(X = cn, gsub, pattern = "\\.", replacement = "")
colnames(df) <- cn
df <- read.csv(paste0('Output/',runname,'/',runname,'_SummaryResults_TP.csv'),header = T, as.is = T) %>%
transmute(DateTime,RunTime,SystemOFV,SystemCost = SystemCost - SystemBenefit) %>%
inner_join(df,by = c('DateTime','RunTime')) %>%
select(-c('FIR_reqMW','SIR_reqMW')) %>%
mutate(Source = 'vSPD')
df2 <- ObjectiveValue %>% group_by(DateTime,RunTime) %>%
summarise(TimeStamp = max(TimeStamp)) %>% ungroup() %>%
inner_join(ObjectiveValue, by = c('DateTime','RunTime','TimeStamp')) %>%
select(-TimeStamp)
df1 <- SolutionIsland  %>%
rename(DateTime = INTERVAL, Island=ISLANDNAME ) %>%
inner_join(hvdcloss,by = c('DateTime','RunTime','Island')) %>%
inner_join(df2, by = c('DateTime','RunTime')) %>%
transmute(DateTime,RunTime, SystemOFV = ObjectiveValue,
SystemCost = as.numeric(INTERVALCOST),
Island,GenMW = as.numeric(ENCLEARED),LoadMW = as.numeric(LOADMW),
BidLoadMW = as.numeric(DISPATCHBIDSCLEARED),
IslandACLossMW = as.numeric(NETWORKLOSS) - HVDCLOSS,
HVDCFlowMW = ifelse(as.numeric(NETDCXFER) < 0 , 0, as.numeric(NETDCXFER)),
HVDCLossMW = HVDCLOSS, ReferencePriceMWh = as.numeric(REFERENCEPRICE),
FIRPriceMWh = as.numeric(RESERVEPRICESIXSEC), SIRPriceMWh = as.numeric(RESERVEPRICESIXTYSEC),
FIR_Clear = as.numeric(RESERVEACTUALSIXSEC), SIR_Clear = as.numeric(RESERVEACTUALSIXTYSEC),
FIR_Share = as.numeric(RESSENTFROM6S), SIR_Share = as.numeric(RESSENTFROM60S),
FIR_Receive = as.numeric(RESRECEIVEDAT6S), SIR_Receive = as.numeric(RESRECEIVEDAT60S),
FIR_Effective_CE = as.numeric(RESEFFECTIVETO6SCE), SIR_Effective_CE = as.numeric(RESEFFECTIVETO60SCE),
FIR_Effective_ECE = as.numeric(RESEFFECTIVETO6SECE), SIR_Effective_ECE = as.numeric(RESEFFECTIVETO60SECE),
Source = 'SPD'
)
CompareIsland = rbind(df,df1) %>%
gather(key = 'Item', value = 'Value',-c('DateTime','RunTime','Island','Source')) %>%
spread(key = Source, value = Value) %>% mutate(vSPDvsSPD = round(vSPD - SPD,5)) %>%
gather(key = 'Source', value = 'Value',-c('DateTime','RunTime','Island','Item')) %>%
spread(key = Item, value = Value) %>%
transmute(DateTime,RunTime,Island,Source,SystemOFV, SystemCost,GenMW,LoadMW,BidLoadMW,FIR_Clear,SIR_Clear,
ReferencePrice = ReferencePriceMWh, FIRPrice = FIRPriceMWh, SIRPrice = SIRPriceMWh,
IslandACLossMW,HVDCLossMW,HVDCFlowMW,FIR_Share,SIR_Share,FIR_Receive,SIR_Receive,
FIR_Effective_CE,SIR_Effective_CE,FIR_Effective_ECE,SIR_Effective_ECE) %>%
arrange(Source,DateTime,RunTime,Island)
write.csv(CompareIsland,file = paste0('Output/',runname,'/',runname,'_CompareIsland.csv'), row.names = F)
}
# Node Solution Comparison
if (T) {
df <- read.csv(paste0('Output/',runname,'/',runname,'_NodeResults_TP.csv'),header = T, as.is = T)
cn <- colnames(df)
cn <- sapply(X = cn, gsub, pattern = "\\.", replacement = "")
colnames(df) <- cn
df1 <- SolutionPnode  %>%
transmute(DateTime = INTERVAL,RunTime,Node=PNODENAME,
LOAD = as.numeric(LOAD),GENERATION = as.numeric(GENERATION),
PRICE = as.numeric(PRICE)
)
CompareNode <- full_join(df,df1, by = c('DateTime','RunTime','Node')) %>%
mutate(LOADCHECK = LoadMW - LOAD, GENERATIONCHECK  = GenerationMW - GENERATION,
PRICECHECK = PriceMWh - PRICE )
write.csv(CompareNode,file = paste0('Output/',runname,'/',runname,'_CompareNode.csv'),row.names = F)
}
# Bus Solution Comparison
if (T) {
df <- read.csv(paste0('Output/',runname,'/',runname,'_BusResults_TP.csv'),header = T, as.is = T)
cn <- colnames(df)
cn <- sapply(X = cn, gsub, pattern = "\\.", replacement = "")
colnames(df) <- cn
df1 <- SolutionBus %>%
transmute(DateTime = INTERVAL, RunTime, Bus = as.integer(ID_BUS),
LOAD = as.numeric(LOAD),GENERATION = as.numeric(GENERATION),
PRICE = as.numeric(PRICE)
)
CompareBus <- full_join(df,df1, by = c('DateTime','RunTime','Bus')) %>%
mutate(PRICECHECK = PriceMWh - PRICE, LOADCHECK = round(LoadMW - LOAD,4),
GENERATIONCHECK = round(GenerationMW - GENERATION,4)
)
write.csv(CompareBus,file = paste0('Output/',runname,'/',runname,'_CompareBus.csv'),row.names = F)
}
# TraderPeriod Solution Comparison
if (T) {
df <- read.csv(paste0('Output/',runname,'/',runname,'_OfferResults_TP.csv'),header = T, as.is = T)
cn <- colnames(df)
cn <- sapply(X = cn, gsub, pattern = "\\.", replacement = "")
colnames(df) <- cn
df1 <- SolutionTrdrPrd %>%
transmute(DateTime = INTERVAL, RunTime, Offer = PNODENAME,
GENERATION = as.numeric(MWCLEARED),
RESERVECLEAREDSIXSEC = as.numeric(RESERVECLEAREDSIXSEC),
RESERVECLEAREDSIXTYSEC = as.numeric(RESERVECLEAREDSIXTYSEC),
UPRAMPRATE = as.numeric(UPRAMPRATE),
DNRAMPRATE = as.numeric(DNRAMPRATE) ) %>%
group_by(DateTime, RunTime, Offer) %>%
summarise(GENERATION = sum(GENERATION),
RESERVECLEAREDSIXSEC = sum(RESERVECLEAREDSIXSEC),
RESERVECLEAREDSIXTYSEC = sum(RESERVECLEAREDSIXTYSEC),
UPRAMPRATE = max(UPRAMPRATE),
DNRAMPRATE = max(DNRAMPRATE)) %>% ungroup()
CompareTraderPeriod <- full_join(df,df1, by = c('DateTime','RunTime','Offer')) %>%
mutate(GENERATIONCHECK = round(GenerationMW - GENERATION,4),
FIRCHECK  = round(FIRMW - RESERVECLEAREDSIXSEC,4),
SIRCHECK  = round(SIRMW - RESERVECLEAREDSIXTYSEC,4)
)
write.csv(CompareTraderPeriod,file = paste0('Output/',runname,'/',runname,'_CompareTraderPeriod.csv'),row.names = F)
}
# Constraint Solution Comparison
if (T) {
df <- read.csv(paste0('Output/',runname,'/',runname,'_MNodeConstraintResults_TP.csv'),
header = T, as.is = T) %>%
transmute(DateTime,RunTime,ConstraintName = MNodeConstraint, ConstraintType = 'MnCnst',
LHSValue = `LHS..MW.`, Sense = `Sense...1.....0....1....`,
RHSValue = `RHS..MW.`, MarginalPrice = `Price....MWh.`)
df <- read.csv(paste0('Output/',runname,'/',runname,'_BrConstraintResults_TP.csv'),
header = T, as.is = T) %>%
transmute(DateTime,RunTime,ConstraintName = BranchConstraint, ConstraintType = 'BrCnst',
LHSValue = `LHS..MW.`, Sense = `Sense...1.....0....1....`,
RHSValue = `RHS..MW.`, MarginalPrice = `Price....MWh.`) %>% rbind(df)
df1 <- SolutionCnstr %>%
transmute(DateTime = INTERVAL, RunTime, ConstraintName = trimws(CONSTRAINTNAME),
ConstraintType = CONSTRAINTTYPE, CONSTRAINTVALUE = as.numeric(CONSTRAINTVALUE),
CONSTRAINTLIMIT = as.numeric(LOWERLIMITVALID) * as.numeric(LOWERLIMIT) +
as.numeric(UPPERLIMITVALID) * as.numeric(UPPERLIMIT),
MARGINALPRICE = as.numeric(LOWERLIMITVALID) * as.numeric(LOWERMARGINALPRICE) +
as.numeric(UPPERLIMITVALID) * as.numeric(UPPERMARGINALPRICE))
CompareConstraint <- full_join(df,df1, by = c('DateTime','RunTime','ConstraintName','ConstraintType')) %>%
mutate(LHSCHECK = round(LHSValue - CONSTRAINTVALUE,4),
RHSCHECK  = round(RHSValue - CONSTRAINTLIMIT,4),
MARGINALPRICECHECK  = round(MarginalPrice - MARGINALPRICE,4)
)
write.csv(CompareConstraint,file = paste0('Output/',runname,'/',runname,'_CompareConstraint.csv'),row.names = F)
}
}
View(SolutionIsland)
View(CompareIsland)
View(CompareNode)
244.6296/218.9958
74.9922/67.1340
source("C:/vSPD/ElectricityAuthority/RTP4_detail_tesing_script_.R")
View(CompareBranch)
View(CompareTraderPeriod)
2476.93698 + 1660.81517
