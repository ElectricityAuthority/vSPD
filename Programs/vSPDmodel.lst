GAMS 36.2.0  r433180e Released Sep  3, 2021 WEX-WEI x86 64bit/MS Windows - 03/09/23 15:26:55 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  *=====================================================================================
   2  * Name:                 vSPDmodel.gms
   3  * Function:             Mathematical formulation - based on the SPD formulation v9.0
   4  * Developed by:         Electricity Authority, New Zealand
   5  * Source:               https://github.com/ElectricityAuthority/vSPD
   6  *                       http://www.emi.ea.govt.nz/Tools/vSPD
   7  * Contact:              Forum: http://www.emi.ea.govt.nz/forum/
   8  *                       Email: emi@ea.govt.nz
   9  * Modified on:          1 Oct 2019
  10  *                       New feature added: New wind offer arrangements
  11  * Modified on:          11 Dec 2020
  12  *                       Branch Reverse Rating (this feature is suspended until further notice)
  13  * Modified on:          24 Feb 2021
  14  *                       Correcting the excess reserve sharing penalty
  15  *                       by adding RESERVESHAREEFFECTIVE_CE and ECE variables
  16  * Last modified on:     18 March 2022
  17  *                       Rename/remove primary sets to tidy up the code and
  18  *                       Assign value for constant sets such as ils, blk,resC, etc...
  19  *
  20  *=====================================================================================
  21   
      Directory of code sections in vSPDmodel.gms:
        1. Declare sets and parameters for all symbols to be loaded from daily GDX files
        2. Declare additional sets and parameters used throughout the model
        3. Declare model variables and constraints, and initialise constraints
       
      Aliases to be aware of:
        dt = dt1                                  tp = tp1,tp2
        isl = isl1, isl2                          b = b1, frB, toB
        n = n1, n2                                o = o1, o2
        bd = bd1, bd2
        br = br1
  35   
  36  * Allow empty data set declaration
  38   
  39  *===================================================================================
  40  * 1. Declare sets and parameters for all symbols to be loaded from daily GDX files
  41  *===================================================================================
  42  * Hard-coded sets.
  43  Sets
  44    isl(*)              'Islands'                                                 / NI, SI /
  45    blk(*)              'Trade block definitions used for the offer and bids'     / t1*t20 /
  46    los(*)              'Loss segments available for loss modelling'              / ls1*ls13 /
  47    fd(*)               'Directional flow definition used in the SPD formulation' / forward, backward /
  48    resC(*)             'Definition of fast and sustained instantaneous reserve'  / FIR, SIR /
  49    riskC(*)            'Different risks that could set the reserve requirements' / genRisk, DCCE, DCECE, manual, genRiskECE, manualECE, HVDCsecRisk, HVDCsecRiskECE /
  50    resT(*)             'Definition of reserve types (PLSR, TWDR, ILR)'           / PLRO, TWRO, ILRO /
  51   
  52    bidofrCmpnt(*)      'Components of the bid and offer'                 / limitMW, price, plsrPct /
  53    offerPar(*)         'The various parameters required for each offer'  / initialMW, rampUpRate, rampDnRate, resrvGenMax, isIG, FKbandMW, isPriceResponse, potentialMW  /
  54    riskPar(*)          'Different risk parameters'                       / freeReserve, adjustFactor, HVDCRampUp /
  55    brPar(*)            'Branch parameter specified'                      / resistance, susceptance, fixedLosses, numLossTranches /
  56    CstrRHS(*)          'Constraint RHS definition'                       / cnstrSense, cnstrLimit /
  57   
  58    z(*)                'Defined reverse reserve sharing zone for HVDC sent flow: RP -> round power zone, NR -> no reverse zone, RZ -> reverse zone' /RP, NR, RZ/
  59    ;
  60   
  61  * Dynamic sets that are defined by /loaded from gdx inputs
  62  Sets
  63    caseName(*)         'Final pricing case name used to create the GDX file'
  64    dt(*)               'Date and time for the trade periods'
  65    tp(*)               'Trade periods for which input data is defined'
  66    b(*)                'Bus definitions for all trading periods'
  67    n(*)                'Node definitions for all trading periods'
  68    o(*)                'Offers for all trading periods'
  69    bd(*)               'Bids for all trading periods'
  70    trdr(*)             'Traders defined for all trading periods'
  71    br(*)               'Branch definition for all trading periods'
  72    brCstr(*)           'Branch constraint definitions for all trading periods'
  73    MnodeCstr(*)        'Market node constraint definitions for all trading periods'
  74    rg(*)               'Set representing a collection of generation and reserve offers treated as a group risk'
  75    rundt(*)            'Run datetime of the case for reporting'
  76    ;
  77   
  78  * Aliases
  79  Alias (dt,dt1,dt2),       (tp,tp1,tp2),     (isl,isl1,isl2),  (b,b1,frB,toB)
  80        (n,n1,n2),          (o,o1,o2),        (bd,bd2,bd1),     (br,br1)
  81        (fd,fd1,rd,rd1),    (z,z1,rrz,rrz1),  (rg,rg1),         (blk,blk1,blk2)
  82        (los,los1,bp,bp1,rsbp,rsbp1)
  83    ;
  84   
  85  Sets
  86  * 16 multi-dimensional sets, subsets, and mapping sets - membership is populated via loading from GDX file in vSPDsolve.gms
  87    dt2tp(dt,tp)                        'Mapping of dateTime set to the tradePeriod set'
  88    node(dt,n)                          'Node definition for the different trading periods'
  89    bus(dt,b)                           'Bus definition for the different trading periods'
  90    node2node(dt,n,n1)                  'Node to node mapping used for price and energy shortfall transfer'
  91    offerNode(dt,o,n)                   'Offers and the corresponding offer node for the different trading periods'
  92    offerTrader(dt,o,trdr)              'Offers and the corresponding trader for the different trading periods'
  93    bidNode(dt,bd,n)                    'Bids and the corresponding node for the different trading periods'
  94    bidTrader(dt,bd,trdr)               'Bids and the corresponding trader for the different trading periods'
  95    busIsland(dt,b,isl)                 'Bus island mapping for the different trade periods'
  96    nodeBus(dt,n,b)                     'Node bus mapping for the different trading periods'
  97    branchDefn(dt,br,frB,toB)           'Branch definition for the different trading periods'
  98    riskGenerator(dt,o)                 'Set of generators (offers) that can set the risk in the different trading periods'
  99    primarySecondaryOffer(dt,o,o1)      'Primary-secondary offer mapping for the different trading periods - in use from 01 May 2012'
 100    dispatchableBid(dt,bd)              'Set of dispatchable bids - effective date 20 May 2014'
 101    discreteModeBid(dt,bd)              'Set of dispatchable discrete bids - Start From RTP phase 4 to support Dispatch Lite'
 102    dispatchableEnrgOffer(dt,o)         'Set of dispatchable energy offer - Start From RTP phase 4 to support Dispatch Lite'
 103    nodeoutagebranch(dt,n,br)           'Mappinging of branch and node where branch outage may affect the capacity to supply to the node'
 104    ;
 105   
 106   
 107  Parameters
 108  * 6 scalars - values are loaded from GDX file in vSPDsolve.gms
 109    gdxDate(*)                                            'day, month, year of trade date'
 110    intervalDuration                                      'Length of the trading period in minutes (e.g. 30)'
 111   
 112  * 49 parameters - values are loaded from GDX file in vSPDsolve.gms
 113  * Offer data
 114    offerParameter(dt,o,offerPar)                     'Initial MW for each offer for the different trading periods'
 115    energyOffer(dt,o,blk,bidofrCmpnt)                 'Energy offers for the different trading periods'
 116    fastPLSRoffer(dt,o,blk,bidofrCmpnt)               'Fast (6s) PLSR offers for the different trading periods'
 117    sustainedPLSRoffer(dt,o,blk,bidofrCmpnt)          'Sustained (60s) PLSR offers for the different trading periods'
 118    fastTWDRoffer(dt,o,blk,bidofrCmpnt)               'Fast (6s) TWDR offers for the different trading periods'
 119    sustainedTWDRoffer(dt,o,blk,bidofrCmpnt)          'Sustained (60s) TWDR offers for the different trading periods'
 120    fastILRoffer(dt,o,blk,bidofrCmpnt)                'Fast (6s) ILR offers for the different trading periods'
 121    sustainedILRoffer(dt,o,blk,bidofrCmpnt)           'Sustained (60s) ILR offers for the different trading periods'
 122   
 123  * Bid data
 124    energyBid(dt,bd,blk,bidofrCmpnt)                  'Energy bids for the different trading periods'
 125  * Demand data
 126    nodeDemand(dt,n)                                  'MW demand at each node for all trading periods'
 127   
 128  * Network data
 129    refNode(dt,n)                                     'Reference nodes for the different trading periods'
 130    HVDCBranch(dt,br)                                 'HVDC branch indicator for the different trading periods'
 131    branchParameter(dt,br,brPar)                      'Branch resistance, reactance, fixed losses and number of loss tranches for the different time periods'
 132    branchCapacity(dt,br,fd)                          'Branch directed capacity for the different trading periods in MW (Branch Reverse Ratings)'
 133    branchOpenStatus(dt,br)                           'Branch open status for the different trading periods, 1 = Open'
 134    nodeBusAllocationFactor(dt,n,b)                   'Allocation factor of market node quantities to bus for the different trading periods'
 135    busElectricalIsland(dt,b)                         'Electrical island status of each bus for the different trading periods (0 = Dead)'
 136   
 137  * Risk/Reserve data
 138    riskParameter(dt,isl,resC,riskC,riskPar)          'Risk parameters for the different trading periods (From RMT)'
 139    islandMinimumRisk(dt,isl,resC,riskC)              'Minimum MW risk level for each island for each reserve class applied to risk classes: manual, manualECE, HVDCsecRisk and HVDCsecRiskECE'
 140    HVDCSecRiskEnabled(dt,isl,riskC)                  'Flag indicating if the HVDC secondary risk is enabled (1 = Yes)'
 141    HVDCSecRiskSubtractor(dt,isl)                     'Ramp up capability on the HVDC pole that is not the secondary risk'
 142    reserveMaximumFactor(dt,o,resC)                   'Factor to adjust the maximum reserve of the different classes for the different offers'
 143   
 144  * Branch constraint data
 145    branchCstrFactors(dt,brCstr,br)                   'Branch security constraint factors (sensitivities) for the current trading period'
 146    branchCstrRHS(dt,brCstr,CstrRHS)                  'Branch constraint sense and limit for the different trading periods'
 147   
 148  * Market node constraint data
 149    mnCstrEnrgFactors(dt,MnodeCstr,o)                 'Market node energy offer constraint factors for the current trading period'
 150    mnCnstrResrvFactors(dt,MnodeCstr,o,resC,resT)     'Market node reserve offer constraint factors for the current trading period'
 151    mnCnstrEnrgBidFactors(dt,MnodeCstr,bd)            'Market node energy bid constraint factors for the different trading periods'
 152    mnCnstrResrvBidFactors(dt,MnodeCstr,bd,resC)      'Market node IL reserve bid constraint factors for the different trading periods - currently not used'
 153    mnCnstrRHS(dt,MnodeCstr,CstrRHS)                  'Market node constraint sense and limit for the different trading periods'
 154   
 155   
 156  * Real Time Pricing - Inputs
 157    studyMode                                                         'RTD~101, RTDP~201, PRSS~130, NRSS~132, PRSL~131, NRSL~133, WDS~120' /101/
 158    useGenInitialMW(dt)                                               'Flag that if set to 1 indicates that for a schedule that is solving multiple intervals in sequential mode'
 159    runEnrgShortfallTransfer(dt)                                      'Flag that if set to 1 will enable shortfall transfer- post processing'
 160    runPriceTransfer(dt)                                              'Flag that if set to 1 will enable price transfer - post processing.'
 161    replaceSurplusPrice(dt)                                           'Flag that if set to 1 will enable sutplus price replacement - post processing'
 162    rtdIgIncreaseLimit(dt)                                            'For price responsive Intermittent Generation (IG) the 5-minute ramp-up is capped using this parameter'
 163    useActualLoad(dt)                                                 'Flag that if set to 0, initial estimated load [conformingfactor/noncomformingload] is used as initial load '
 164    dontScaleNegativeLoad(dt)                                         'Flag that if set to 1 --> negative load will be fixed in RTD load calculation'
 165    inputInitialLoad(dt,n)                                            'This value represents actual load MW for RTD schedule input'
 166    conformingFactor(dt,n)                                            'Initial estimated load for conforming load'
 167    nonConformingLoad(dt,n)                                           'Initial estimated load for non-conforming load'
 168    loadIsOverride(dt,n)                                              'Flag if set to 1 --> InputInitialLoad will be fixed as node demand'
 169    loadIsBad(dt,n)                                                   'Flag if set to 1 --> InitialLoad will be replaced by Estimated Initial Load'
 170    loadIsNCL(dt,n)                                                   'Flag if set to 1 --> non-conforming load --> will be fixed in RTD load calculation'
 171    maxLoad(dt,n)                                                     'Pnode maximum load'
 172    instructedLoadShed(dt,n)                                          'Instructed load shedding applied to RTDP and should be ignore by all other schedules'
 173    instructedShedActive(dt,n)                                        'Flag if Instructed load shedding is active; applied to RTDP and should be ignore by all other schedules'
 174    islandMWIPS(dt,isl)                                               'Island total generation at the start of RTD run'
 175    islandPDS(dt,isl)                                                 'Island pre-solve deviation - used to adjust RTD node demand'
 176    islandLosses(dt,isl)                                              'Island estimated losss - used to adjust RTD mode demand'
 177    enrgShortfallRemovalMargin(dt)                                    'This small margin is added to the shortfall removed amount in order to prevent any associated binding ACLine constraint'
 178    maxSolveLoops(dt)                                                 'The maximum number of times that the Energy Shortfall Check will re-solve the model'
 179   
 180   
 181    energyScarcityEnabled(dt)                                         'Flag to apply energy scarcity (this is different from FP scarcity situation)'
 182    reserveScarcityEnabled(dt)                                        'Flag to apply reserve scarcity (this is different from FP scarcity situation)'
 183    scarcityEnrgNationalFactor(dt,blk)                                'National energy scarcity factors'
 184    scarcityEnrgNationalPrice(dt,blk)                                 'National energy scarcity prices'
 185    scarcityEnrgNodeFactor(dt,n,blk)                                  'Nodal energy scarcity factors'
 186    scarcityEnrgNodeFactorPrice(dt,n,blk)                             'Nodal energy scarcity prices vs factors'
 187    scarcityEnrgNodeLimit(dt,n,blk)                                   'Nodal energy scarcity limits'
 188    scarcityEnrgNodeLimitPrice(dt,n,blk)                              'Nodal energy scarcity prices vs limits'
 189    scarcityResrvIslandLimit(dt,isl,resC,blk)                         'Reserve scarcity limits'
 190    scarcityResrvIslandPrice(dt,isl,resC,blk)                         'Reserve scarcity prices'
 191   
 192   ;
 193   
 194  * End of GDX declarations
 195   
 196   
 197   
 198  *===================================================================================
 199  * 2. Declare additional sets and parameters used throughout the model
 200  *===================================================================================
 201   
 202  Scalars
 203    useAClossModel
 204    useHVDClossModel
 205    useACbranchLimits                        'Use the AC branch limits (1 = Yes)'
 206    useHVDCbranchLimits                      'Use the HVDC branch limits (1 = Yes)'
 207    resolveCircularBranchFlows               'Resolve circular branch flows (1 = Yes)'
 208    resolveHVDCnonPhysicalLosses             'Resolve nonphysical losses on HVDC branches (1 = Yes)'
 209    resolveACnonPhysicalLosses               'Resolve nonphysical losses on AC branches (1 = Yes)'
 210    circularBranchFlowTolerance
 211    nonPhysicalLossTolerance
 212    useBranchFlowMIPtolerance
 213    useReserveModel                          'Use the reserve model (1 = Yes)'
 214    mixedMIPtolerance
 215    LPtimeLimit                              'CPU seconds allowed for LP solves'
 216    LPiterationLimit                         'Iteration limit allowed for LP solves'
 217    MIPtimeLimit                             'CPU seconds allowed for MIP solves'
 218    MIPiterationLimit                        'Iteration limit allowed for MIP solves'
 219    MIPoptimality
 220    disconnectedNodePriceCorrection          'Flag to apply price correction methods to disconnected node'
 221   
 222    intervalDuration                         'Length of the interval in minutes (e.g. 30)'
 223    branchReceivingEndLossProportion         'Proportion of losses to be allocated to the receiving end of a branch' /1/
 224   
 225  * External loss model from Transpower
 226    lossCoeff_A                       / 0.3101 /
 227    lossCoeff_C                       / 0.14495 /
 228    lossCoeff_D                       / 0.32247 /
 229    lossCoeff_E                       / 0.46742 /
 230    lossCoeff_F                       / 0.82247 /
 231    maxFlowSegment                    / 10000 /
 232    ;
 233   
 234  Sets
 235  * Global
 236    pole                                                   'HVDC poles' / pole1, pole2 /
 237    t(dt)                                                  'Current trading interval to solve'
 238   
 239  * Offer
 240    offer(dt,o)                                            'Offers defined for the current trading period'
 241    genOfrBlk(dt,o,blk)                                    'Valid trade blocks for the respective generation offers'
 242    resOfrBlk(dt,o,blk,resC,resT)                          'Valid trade blocks for the respective reserve offers by class and type'
 243    posEnrgOfr(dt,o)                                       'Postive energy offers defined for the current trading period'
 244   
 245   
 246   
 247  * Bid
 248    Bid(dt,bd)                                             'Bids defined for the current trading period'
 249    DemBidBlk(dt,bd,blk)                                   'Valid trade blocks for the respective purchase bids'
 250   
 251  * Network
 252    branch(dt,br)                                                     'Branches defined for the current trading period'
 253    branchBusDefn(dt,br,frB,toB)                                      'Branch bus connectivity for the current trading period'
 254    branchFrBus(dt,br,frB)                                            'Define branch from bus connectivity for the current trading period'
 255    branchToBus(dt,br,frB)                                            'Define branch to bus connectivity for the current trading period'
 256    branchBusConnect(dt,br,b)                                         'Indication if a branch is connected to a bus for the current trading period'
 257    ACBranchSendingBus(dt,br,b,fd)                                    'Sending (From) bus of AC branch in forward and backward direction'
 258    ACBranchReceivingBus(dt,br,b,fd)                                  'Receiving (To) bus of AC branch in forward and backward direction'
 259    HVDClinkSendingBus(dt,br,b)                                       'Sending (From) bus of HVDC link'
 260    HVDClinkReceivingBus(dt,br,toB)                                   'Receiving (To) bus of HVDC link'
 261    HVDClinkBus(dt,br,b)                                              'Sending or Receiving bus of HVDC link'
 262    HVDClink(dt,br)                                                   'HVDC links (branches) defined for the current trading period'
 263  *  HVDCpoles(dt,br)                                                  'DC transmission between Benmore and Hayward'
 264   
 265    HVDCpoleDirection(dt,br,fd)                                       'Direction defintion for HVDC poles S->N : forward and N->S : backward'
 266    ACBranch(dt,br)                                                   'AC branches defined for the current trading period'
 267    validLossSegment(dt,br,los,fd)                                    'Valid loss segments for a branch'
 268    lossBranch(dt,br)                                                 'Subset of branches that have non-zero loss factors'
 269  * Mapping set of branches to HVDC pole
 270    HVDCpoleBranchMap(pole,br)                                        'Mapping of HVDC  branch to pole number'
 271  * Risk/Reserve
 272    islandRiskGenerator(dt,isl,o)                          'Mapping of risk generator to island in the current trading period'
 273   
 274    GenRisk(riskC)                                                    'Subset containing generator risks'
 275    ManualRisk(riskC)                                                 'Subset containting manual risks'
 276    HVDCrisk(riskC)                                                   'Subset containing DCCE and DCECE risks'
 277    HVDCSecRisk(riskC)                                                'Subset containing secondary risk of the DCCE and DCECE events'
 278   
 279    PLRO(resT)                                             'PLSR reserve type'
 280    TWRO(resT)                                             'TWDR reserve type'
 281    ILRO(resT)                                             'ILR reserve type'
 282   
 283    nodeIsland(dt,n,isl)                                   'Mapping node to island'
 284    offerIsland(dt,o,isl)                                  'Mapping of reserve offer to island for the current trading period'
 285    bidIsland(dt,bd,isl)                                   'Mapping of purchase bid ILR to island for the current trading period'
 286   
 287  * Definition of CE and ECE events to support different CE and ECE CVPs
 288    ContingentEvents(riskC)                                           'Subset of Risk Classes containing contigent event risks'
 289    ExtendedContingentEvent(riskC)                                    'Subset of Risk Classes containing extended contigent event risk'
 290  * Branch constraint
 291    BranchConstraint(dt,brCstr)                                       'Set of valid branch constraints defined for the current trading period'
 292  * Market node constraint
 293    MNodeConstraint(dt,MnodeCstr)                                     'Set of market node constraints defined for the current trading period'
 294  * NMIR update
 295    rampingConstraint(dt,brCstr)                                      'Subset of branch constraints that limit total HVDC sent from an island due to ramping (5min schedule only)'
 296    bipoleConstraint(dt,isl,brCstr)                                   'Subset of branch constraints that limit total HVDC sent from an island'
 297    monopoleConstraint(dt,isl,brCstr,br)                              'Subset of branch constraints that limit the flow on HVDC pole sent from an island'
 298   
 299    riskGroupOffer(dt,rg,o,riskC)                                     'Mappimg of risk group to offers in current trading period for each risk class - SPD version 11.0 update'
 300    islandRiskGroup(dt,isl,rg,riskC)                                  'Mappimg of risk group to island in current trading period for each risk class - SPD version 11.0 update'
 301    ;
 302   
 303  Parameters
 304  * Offers
 305    GenerationStart(dt,o)                                  'The MW generation level associated with the offer at the start of a trading period'
 306    RampRateUp(dt,o)                                       'The ramping up rate in MW per minute associated with the generation offer (MW/min)'
 307    RampRateDn(dt,o)                                       'The ramping down rate in MW per minute associated with the generation offer (MW/min)'
 308    ReserveGenerationMaximum(dt,o)                         'Maximum generation and reserve capability for the current trading period (MW)'
 309    WindOffer(dt,o)                                        'Flag to indicate if offer is from wind generator (1 = Yes)'
 310    FKBand(dt,o)                                           'Frequency keeper band MW which is set when the risk setter is selected as the frequency keeper'
 311    PriceResponsive(dt,o)                                  'Flag to indicate if wind offer is price responsive (1 = Yes)'
 312    PotentialMW(dt,o)                                      'Potential max output of Wind offer'
 313   
 314  * Energy offer
 315    EnrgOfrMW(dt,o,blk)                                    'Generation offer block (MW)'
 316    EnrgOfrPrice(dt,o,blk)                                 'Generation offer price ($/MW)'
 317   
 318  * Primary-secondary offer parameters
 319    PrimaryOffer(dt,o)                                     'Flag to indicate if offer is a primary offer (1 = Yes)'
 320    SecondaryOffer(dt,o)                                   'Flag to indicate if offer is a secondary offer (1 = Yes)'
 321   
 322   
 323    GenerationMaximum(dt,o)                                           'Maximum generation level associated with the generation offer (MW)'
 324    GenerationMinimum(dt,o)                                           'Minimum generation level associated with the generation offer (MW)'
 325    GenerationEndUp(dt,o)                                             'MW generation level associated with the offer at the end of the trading period assuming ramp rate up'
 326    GenerationEndDown(dt,o)                                           'MW generation level associated with the offer at the end of the trading period assuming ramp rate down'
 327    RampTimeUp(dt,o)                                                  'Minimum of the trading period length and time to ramp up to maximum (Minutes)'
 328    RampTimeDown(dt,o)                                                'Minimum of the trading period length and time to ramp down to minimum (Minutes)'
 329   
 330  * Reserve offer
 331    ResOfrPct(dt,o,blk,resC)                          'The percentage of the MW block available for PLSR of class FIR or SIR'
 332    ResOfrPrice(dt,o,blk,resC,resT)                   'The price of the reserve of the different reserve classes and types ($/MW)'
 333    ResOfrMW(dt,o,blk,resC,resT)                      'The maximum MW offered reserve for the different reserve classes and types (MW)'
 334  * Demand
 335    RequiredLoad(dt,n)                                             'Nodal demand for the current trading period in MW'
 336  * Bid
 337    DemBidMW(dt,bd,blk)                               'Demand bid block in MW'
 338    DemBidPrice(dt,bd,blk)                            'Purchase bid price in $/MW'
 339    DemBidILRMW(dt,bd,blk,resC)                               'Purchase bid ILR block in MW for the different reserve classes'
 340    DemBidILRPrice(dt,bd,blk,resC)                            'Purchase bid ILR price in $/MW for the different reserve classes'
 341  * Network
 342    branchResistance(dt,br)                                           'Resistance of the a branch for the current trading period in per unit'
 343    branchSusceptance(dt,br)                                          'Susceptance (inverse of reactance) of a branch for the current trading period in per unit'
 344    branchFixedLoss(dt,br)                                            'Fixed loss of the a branch for the current trading period in MW'
 345    branchLossBlocks(dt,br)                                           'Number of blocks in the loss curve for the a branch in the current trading period'
 346    lossSegmentMW(dt,br,los,fd)                                       'MW capacity of each loss segment'
 347    lossSegmentFactor(dt,br,los,fd)                                   'Loss factor of each loss segment'
 348    ACBranchLossMW(dt,br,los,fd)                                      'MW element of the loss segment curve in MW'
 349    ACBranchLossFactor(dt,br,los,fd)                                  'Loss factor element of the loss segment curve'
 350    HVDCBreakPointMWFlow(dt,br,bp,fd)                                 'Value of power flow on the HVDC at the break point'
 351    HVDCBreakPointMWLoss(dt,br,bp,fd)                                 'Value of variable losses on the HVDC at the break point'
 352   
 353  * Risk/Reserve
 354    IslandRiskAdjustmentFactor(dt,isl,resC,riskC)                     'Risk adjustment factor for each island, reserve class and risk class'
 355    FreeReserve(dt,isl,resC,riskC)                                    'MW free reserve for each island, reserve class and risk class'
 356    HVDCpoleRampUp(dt,isl,resC,riskC)                                 'HVDC pole MW ramp up capability for each island, reserve class and risk class'
 357   
 358  * NMIR parameters
 359  * The follwing are new input for NMIR
 360    reserveRoundPower(dt,resC)                                        'Database flag that disables round power under certain circumstances'
 361    reserveShareEnabled(dt,resC)                                      'Database flag if reserve class resC is sharable'
 362    modulationRiskClass(dt,riskC)                                     'HVDC energy modulation due to frequency keeping action'
 363    roundPower2MonoLevel(dt)                                          'HVDC sent value above which one pole is stopped and therefore FIR cannot use round power'
 364    bipole2MonoLevel(dt)                                              'HVDC sent value below which one pole is available to start in the opposite direction and therefore SIR can use round power'
 365    MonopoleMinimum(dt)                                               'The lowest level that the sent HVDC sent can ramp down to when round power is not available.'
 366    HVDCControlBand(dt,rd)                                            'Modulation limit of the HVDC control system apply to each HVDC direction'
 367    HVDClossScalingFactor(dt)                                         'Losses used for full voltage mode are adjusted by a factor of (700/500)^2 for reduced voltage operation'
 368    sharedNFRFactor(dt)                                               'Factor that is applied to [sharedNFRLoad - sharedNFRLoadOffset] as part of the calculation of sharedNFRMax'
 369    sharedNFRLoadOffset(dt,isl)                                       'Island load that does not provide load damping, e.g., Tiwai smelter load in the South Island. Subtracted from the sharedNFRLoad in the calculation of sharedNFRMax.'
 370    effectiveFactor(dt,isl,resC,riskC)                                'Estimate of the effectiveness of the shared reserve once it has been received in the risk island.'
 371    RMTReserveLimitTo(dt,isl,resC)                                    'The shared reserve limit used by RMT when it calculated the NFRs. Applied as a cap to the value that is calculated for SharedNFRMax.'
 372  * The follwing are calculated parameters for NMIR
 373    reserveShareEnabledOverall(dt)                                    'An internal parameter based on the FIR and SIR enabled, and used as a switch in various places'
 374    modulationRisk(dt)                                                'Max of HVDC energy modulation due to frequency keeping action'
 375    roPwrZoneExit(dt,resC)                                            'Above this point there is no guarantee that HVDC sent can be reduced below MonopoleMinimum.'
 376    sharedNFRLoad(dt,isl)                                             'Island load, calculated in pre-processing from the required load and the bids. Used as an input to the calculation of SharedNFRMax.'
 377    sharedNFRMax(dt,isl)                                              'Amount of island free reserve that can be shared through HVDC'
 378    numberOfPoles(dt,isl)                                             'Number of HVDC poles avaialbe to send energy from an island'
 379    monoPoleCapacity(dt,isl,br)                                       'Maximum capacity of monopole defined by min of branch capacity and monopole constraint RHS'
 380    biPoleCapacity(dt,isl)                                            'Maximum capacity of bipole defined by bipole constraint RHS'
 381    HVDCMax(dt,isl)                                                   'Max HVDC flow based on available poles and branch group constraints RHS'
 382    HVDCCapacity(dt,isl)                                              'Total sent capacity of HVDC based on available poles'
 383    HVDCResistance(dt,isl)                                            'Estimated resistance of HVDC flow sent from an island'
 384    HVDClossSegmentMW(dt,isl,los)                                     'MW capacity of each loss segment applied to aggregated HVDC capacity'
 385    HVDClossSegmentFactor(dt,isl,los)                                 'Loss factor of each loss segment applied to to aggregated HVDC loss'
 386    HVDCSentBreakPointMWFlow(dt,isl,los)                              'Value of total HVDC sent power flow at the break point               --> lambda segment loss model'
 387    HVDCSentBreakPointMWLoss(dt,isl,los)                              'Value of ariable losses of the total HVDC sent at the break point    --> lambda segment loss model'
 388    HVDCReserveBreakPointMWFlow(dt,isl,los)                           'Value of total HVDC sent power flow + reserve at the break point     --> lambda segment loss model'
 389    HVDCReserveBreakPointMWLoss(dt,isl,los)                           'Value of post-contingent variable HVDC losses at the break point     --> lambda segment loss model'
 390  * The follwing are flag and scalar for testing
 391    UseShareReserve                                                   'Flag to indicate if the reserve share is applied'
 392    BigM                                                              'Big M value to be applied for single active segment HVDC loss model' /10000/
 393  * NMIR parameters end
 394   
 395  * Branch constraint
 396    BranchConstraintSense(dt,brCstr)                                  'Branch security constraint sense for the current trading period (-1:<=, 0:= 1:>=)'
 397    BranchConstraintLimit(dt,brCstr)                                  'Branch security constraint limit for the current trading period'
 398   
 399  * Market node constraint
 400    MNodeConstraintSense(dt,MnodeCstr)                                'Market node constraint sense for the current trading period'
 401    MNodeConstraintLimit(dt,MnodeCstr)                                'Market node constraint limit for the current trading period'
 402   
 403   
 404  * Post-processing
 405    useBranchFlowMIP(dt)                             'Flag to indicate if integer constraints are needed in the branch flow model: 1 = Yes'
 406   
 407  * Real Time Pricing
 408    ScarcityEnrgLimit(dt,n,blk)                                    'Bus energy scarcity limits'
 409    ScarcityEnrgPrice(dt,n,blk)                                    'Bus energy scarcity prices vs limits'
 410   
 411   
 412  * Real Time Pricing - Calculated parameters
 413    InitialLoad(dt,n)                                'Value that represents the Pnode load MW at the start of the solution interval. Depending on the inputs this value will be either actual load, an operator applied override or an estimated initial load'
 414    LoadIsScalable(dt,n)                             'Binary value. If True then the Pnode InitialLoad will be scaled in order to calculate nodedemand, if False then Pnode InitialLoad will be directly assigned to nodedemand'
 415    LoadScalingFactor(dt,isl)                        'Island-level scaling factor applied to InitialLoad in order to calculate nodedemand'
 416    TargetTotalLoad(dt,isl)                          'Island-level MW load forecast'
 417    LoadCalcLosses(dt,isl)                           'Island-level MW losses used to calculate the Island-level load forecast from the InputIPS and the IslandPSD. 1st loop --> InitialLosses, 2nd solve loop --> SystemLosses as calculated in section 6.3'
 418    EstimatedInitialLoad(dt,n)                       'Calculated estimate of initial MW load, available to be used as an alternative to InputInitialLoad'
 419    EstScalingFactor(dt,isl)                         'Scaling applied to ConformingFactor load MW in order to calculate EstimatedInitialLoad'
 420    EstLoadIsScalable(dt,n)                          'Binary value. If True then ConformingFactor load MW will be scaled in order to calculate EstimatedInitialLoad. If False then EstNonScalableLoad will be assigned directly to EstimatedInitialLoad'
 421    EstNonScalableLoad(dt,n)                         'For a non-conforming Pnode this will be the NonConformingLoad MW input, for a conforming Pnode this will be the ConformingFactor MW input if that value is negative, otherwise it will be zero'
 422    EstScalableLoad(dt,n)                            'For a non-conforming Pnode this value will be zero. For a conforming Pnode this value will be the ConformingFactor if it is non-negative, otherwise this value will be zero'
 423   
 424   
 425    ;
 426   
 427  Scalars
 428  * Violation penalties
 429  * These violation penalties are not specified in the model formulation document (ver.4.3) but are specified in the
 430  * document "Resolving Infeasibilities & High Spring Washer Price situations - an overview" available at www.systemoperator.co.nz/n2766,264.html
 431    deficitBusGenerationPenalty                      'Bus deficit violation penalty'                      /500000/
 432    surplusBusGenerationPenalty                      'Bus surplus violation penalty'                      /500000/
 433    deficitBrCstrPenalty                             'Deficit branch group constraint violation penalty'  /650000/
 434    surplusBrCstrPenalty                             'Surplus branch group constraint violation penalty'  /650000/
 435    deficitGnrcCstrPenalty                           'Deficit generic constraint violation penalty'       /710000/
 436    surplusGnrcCstrPenalty                           'Surplus generic constraint violation penalty'       /710000/
 437    deficitRampRatePenalty                           'Deficit ramp rate violation penalty'                /850000/
 438    surplusRampRatePenalty                           'Surplus ramp rate violation penalty'                /850000/
 439    deficitBranchFlowPenalty                         'Deficit branch flow violation penalty'              /600000/
 440    surplusBranchFlowPenalty                         'Surplus branch flow violation penalty'              /600000/
 441    deficitMnodeCstrPenalty                          'Deficit market node constraint violation penalty'   /700000/
 442    surplusMnodeCstrPenalty                          'Surplus market node constraint violation penalty'   /700000/
 443    DeficitReservePenalty_CE                         '6s and 60s CE reserve deficit violation penalty'    /100000/
 444    DeficitReservePenalty_ECE                        '6s and 60s ECE reserve deficit violation penalty'   /800000/
 445    ;
 446   
 447   
 448  *===================================================================================
 449  * 3. Declare model variables and constraints, and initialise constraints
 450  *=================================================================== ================
 451   
 452  * VARIABLES - UPPER CASE
 453  * Equations, parameters and everything else - lower or mixed case
 454   
 455  * Model formulation originally based on the SPD model formulation version 4.3 (15 Feb 2008) and amended as indicated
 456   
 457  Variables
 458    NETBENEFIT                                       'Defined as the difference between the consumer surplus and producer costs adjusted for penalty costs'
 459  * Risk
 460    ISLANDRISK(dt,isl,resC,riskC)                    'Island MW risk for the different reserve and risk classes'
 461    GENISLANDRISK(dt,isl,o,resC,riskC)               'Island MW risk for different risk setting generators'
 462    GENISLANDRISKGROUP(dt,isl,rg,resC,riskC)         'Island MW risk for different risk group - SPD version 11.0'
 463    HVDCGENISLANDRISK(dt,isl,o,resC,riskC)           'Island MW risk for different risk setting generators + HVDC'
 464    HVDCMANISLANDRISK(dt,isl,resC,riskC)             'Island MW risk for manual risk + HVDC'
 465    HVDCREC(dt,isl)                                  'Total net pre-contingent HVDC MW flow received at each island'
 466    RISKOFFSET(dt,isl,resC,riskC)                    'MW offset applied to the raw risk to account for HVDC pole rampup, AUFLS, free reserve and non-compliant generation'
 467   
 468  * NMIR free variables
 469    HVDCRESERVESENT(dt,isl,resC,rd)                  'Total net post-contingent HVDC MW flow sent from an island applied to each reserve class'
 470    HVDCRESERVELOSS(dt,isl,resC,rd)                  'Post-contingent HVDC loss of energy + reserve sent from an island applied to each reserve class'
 471  * NMIR free variables end
 472   
 473  * Network
 474    ACNODENETINJECTION(dt,b)                         'MW injection at buses corresponding to AC nodes'
 475    ACBRANCHFLOW(dt,br)                              'MW flow on undirected AC branch'
 476    ACNODEANGLE(dt,b)                                'Bus voltage angle'
 477   
 478  * Demand bids can be either positive or negative from v6.0 of SPD formulation (with DSBF)
 479  * The lower bound of the free variable is updated in vSPDSolve.gms to allow backward compatibility
 480  * Note the formulation now refers to this as Demand. So Demand (in SPD formulation) = Purchase (in vSPD code)
 481    PURCHASE(dt,bd)                                  'Total MW purchase scheduled'
 482    PURCHASEBLOCK(dt,bd,blk)                         'MW purchase scheduled from the individual trade blocks of a bid'
 483   
 484    ;
 485   
 486  Positive variables
 487  * system cost and benefit
 488    SYSTEMBENEFIT(dt)                                'Total purchase bid benefit by period'
 489    SYSTEMCOST(dt)                                   'Total generation and reserve costs by period'
 490    SYSTEMPENALTYCOST(dt)                            'Total violation costs by period'
 491    TOTALPENALTYCOST                                 'Total violation costs'
 492    SCARCITYCOST(dt)                                 'Total scarcity Cost'
 493  * scarcity variables
 494    ENERGYSCARCITYBLK(dt,n,blk)                      'Block energy scarcity cleared at bus b'
 495    ENERGYSCARCITYNODE(dt,n)                         'Energy scarcity cleared at bus b'
 496   
 497    RESERVESHORTFALLBLK(dt,isl,resC,riskC,blk)       'Block reserve shortfall by risk class (excluding genrisk and HVDC secondary risk)'
 498    RESERVESHORTFALL(dt,isl,resC,riskC)              'Reserve shortfall by risk class (excluding genris kand HVDC secondary risk)'
 499   
 500    RESERVESHORTFALLUNITBLK(dt,isl,o,resC,riskC,blk) 'Block reserve shortfall by risk generation unit (applied to genrisk and HVDC secondary risk)'
 501    RESERVESHORTFALLUNIT(dt,isl,o,resC,riskC)        'Reserve shortfall by risk generation unit (applied to genrisk and HVDC secondary risk)'
 502   
 503    RESERVESHORTFALLGROUPBLK(dt,isl,rg,resC,riskC,blk) 'Block Reserve shortfall by risk group (applied to genrisk and HVDC secondary risk)'
 504    RESERVESHORTFALLGROUP(dt,isl,rg,resC,riskC)        'Reserve shortfall by risk risk group (applied to genrisk and HVDC secondary risk)'
 505   
 506  * Generation
 507    GENERATION(dt,o)                                 'Total MW generation scheduled from an offer'
 508    GENERATIONBLOCK(dt,o,blk)                        'MW generation scheduled from the individual trade blocks of an offer'
 509    GENERATIONUPDELTA(dt,o)                          'Total increase in MW generation scheduled from an offer'
 510    GENERATIONDNDELTA(dt,o)                          'Total decrease in MW generation scheduled from an offer'
 511  * Reserve
 512    RESERVE(dt,o,resC,resT)                          'MW Reserve scheduled from an offer'
 513    RESERVEBLOCK(dt,o,blk,resC,resT)                 'MW Reserve scheduled from the individual trade blocks of an offer'
 514    ISLANDRESERVE(dt,isl,resC)                       'Total island cleared reserve'
 515   
 516  * NMIR positive variables
 517    SHAREDNFR(dt,isl)                                'Amount of free load reserve being shared from an island'
 518    SHAREDRESERVE(dt,isl,resC)                       'Amount of cleared reserve from an island being shared to the other island'
 519    HVDCSENT(dt,isl)                                 'Directed pre-contingent HVDC MW flow sent from each island'
 520    HVDCSENTLOSS(dt,isl)                             'Energy loss for  HVDC flow sent from an island'
 521    RESERVESHAREEFFECTIVE(dt,isl,resC,riskC)         'Effective shared reserve received at island after adjusted for losses and effectiveness factor'
 522    RESERVESHARERECEIVED(dt,isl,resC,rd)             'Directed shared reserve received at island after adjusted for losses'
 523    RESERVESHARESENT(dt,isl,resC,rd)                 'Directed shared reserve sent from and island'
 524    RESERVESHAREPENALTY(dt)                          'Penalty cost for excessive reserve sharing'
 525  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation of RESERVESHAREPENALTY
 526    RESERVESHAREEFFECTIVE_CE(dt,isl,resC)            'Max effective shared reserve for CE risk received at island after adjusted for losses and effectiveness factor'
 527    RESERVESHAREEFFECTIVE_ECE(dt,isl,resC)           'Max effective shared reserve for ECE risk received at island after adjusted for losses and effectiveness factor'
 528  * NMIR positive variables end
 529   
 530  * Network
 531    HVDCLINKFLOW(dt,br)                              'MW flow at the sending end scheduled for the HVDC link'
 532    HVDCLINKLOSSES(dt,br)                            'MW losses on the HVDC link'
 533    LAMBDA(dt,br,bp)                                 'Non-negative weight applied to the breakpoint of the HVDC link'
 534    ACBRANCHFLOWDIRECTED(dt,br,fd)                   'MW flow on the directed branch'
 535    ACBRANCHLOSSESDIRECTED(dt,br,fd)                 'MW losses on the directed branch'
 536    ACBRANCHFLOWBLOCKDIRECTED(dt,br,los,fd)          'MW flow on the different blocks of the loss curve'
 537    ACBRANCHLOSSESBLOCKDIRECTED(dt,br,los,fd)        'MW losses on the different blocks of the loss curve'
 538  * Violations
 539    DEFICITBUSGENERATION(dt,b)                       'Deficit generation at a bus in MW'
 540    SURPLUSBUSGENERATION(dt,b)                       'Surplus generation at a bus in MW'
 541    DEFICITBRANCHSECURITYCONSTRAINT(dt,brCstr)       'Deficit branch security constraint in MW'
 542    SURPLUSBRANCHSECURITYCONSTRAINT(dt,brCstr)       'Surplus branch security constraint in MW'
 543    DEFICITRAMPRATE(dt,o)                            'Deficit ramp rate in MW'
 544    SURPLUSRAMPRATE(dt,o)                            'Surplus ramp rate in MW'
 545    DEFICITBRANCHFLOW(dt,br)                         'Deficit branch flow in MW'
 546    SURPLUSBRANCHFLOW(dt,br)                         'Surplus branch flow in MW'
 547    DEFICITMNODECONSTRAINT(dt,MnodeCstr)             'Deficit market node constraint in MW'
 548    SURPLUSMNODECONSTRAINT(dt,MnodeCstr)             'Surplus market node constraint in MW'
 549  * Seperate CE and ECE violation variables to support different CVPs for CE and ECE
 550    DEFICITRESERVE_CE(dt,isl,resC)                   'Deficit CE reserve generation in each island for each reserve class in MW'
 551    DEFICITRESERVE_ECE(dt,isl,resC)                  'Deficit ECE reserve generation in each island for each reserve class in MW'
 552   
 553    ;
 554   
 555  Binary variables
 556  * NMIR binary variables
 557    HVDCSENDING(dt,isl)                              'Binary variable indicating if island isl is the sending end of the HVDC flow. 1 = Yes.'
 558    INZONE(dt,isl,resC,z)                            'Binary variable (1 = Yes ) indicating if the HVDC flow is in a zone (z) that facilitates the appropriate quantity of shared reserves in the reverse direction to the HVDC sending island isl for reserve class resC.'
 559    HVDCSENTINSEGMENT(dt,isl,los)                    'Binary variable to decide which loss segment HVDC flow sent from an island falling into --> active segment loss model'
 560  * NMIR binary variables end
 561    ;
 562   
 563  SOS1 Variables
 564    ACBRANCHFLOWDIRECTED_INTEGER(dt,br,fd)           'Integer variables used to select branch flow direction in the event of circular branch flows (3.8.1)'
 565    HVDCLINKFLOWDIRECTED_INTEGER(dt,fd)              'Integer variables used to select the HVDC branch flow direction on in the event of S->N (forward) and N->S (reverse) flows (3.8.2)'
 566  * Integer varaible to prevent intra-pole circulating branch flows
 567    HVDCPOLEFLOW_INTEGER(dt,pole,fd)                 'Integer variables used to select the HVDC pole flow direction on in the event of circulating branch flows within a pole'
 568    ;
 569   
 570  SOS2 Variables
 571    LAMBDAINTEGER(dt,br,bp)                          'Integer variables used to enforce the piecewise linear loss approxiamtion on the HVDC links'
 572    LAMBDAHVDCENERGY(dt,isl,bp)                      'Integer variables used to enforce the piecewise linear loss approxiamtion (NMIR) on the HVDC links'
 573    LAMBDAHVDCRESERVE(dt,isl,resC,rd,rsbp)           'Integer variables used to enforce the piecewise linear loss approxiamtion (NMIR) on the HVDC links'
 574    ;
 575   
 576   
 577  Equations
 578    ObjectiveFunction                                'Objective function of the dispatch model (5.1.1.1)'
 579  * Cost and benefit breaking down
 580    SystemBenefitDefinition(dt)                      'Defined as the sum of the purcahse bid benefit'
 581    SystemCostDefinition(dt)                         'Defined as the sum of the generation and reserve costs'
 582    SystemPenaltyCostDefinition(dt)                  'Defined as the sum of the individual violation costs'
 583    TotalViolationCostDefinition                     'Deined as the sume of period violation cost - (for reporting)'
 584    TotalScarcityCostDefinition(dt)                  'Deined as the sume of scarcity cost'
 585   
 586   
 587  * Offer and purchase constraints
 588    GenerationOfferDefintion(dt,o)                   'Definition of generation provided by an offer (6.1.1.2)'
 589    DemBidDefintion(dt,bd)                           'Definition of purchase provided by a bid (6.1.1.6)'
 590    EnergyScarcityDefinition(dt,n)                   'Definition of bus energy scarcity (6.1.1.8)'
 591   
 592  * Ramping constraints
 593    GenerationRampUp(dt,o)                           'Maximum movement of the generator upwards due to up ramp rate (6.2.1.1)'
 594    GenerationRampDown(dt,o)                         'Maximum movement of the generator downwards due to down ramp rate (6.2.1.2)'
 595   
 596  * Generation change penalty for RTD and RTDP
 597    GenerationChangeUpDown(dt,o)                     'Calculate the MW of generation increase/decrease'
 598   
 599  * HVDC transmission constraints
 600    HVDClinkMaximumFlow(dt,br)                       'Maximum flow on each HVDC link (6.3.1.1)'
 601    HVDClinkLossDefinition(dt,br)                    'Definition of losses on the HVDC link (6.3.1.2)'
 602    HVDClinkFlowDefinition(dt,br)                    'Definition of MW flow on the HVDC link (6.3.1.3)'
 603    LambdaDefinition(dt,br)                          'Definition of weighting factor (6.3.1.4)'
 604   
 605  * HVDC transmission constraints to resolve non-physical loss and circular flow
 606  * These constraints are not explicitly formulated in SPD formulation
 607  * But you can find the description in "Post-Solve Checks"
 608    HVDClinkFlowIntegerDefinition1(dt)               'Definition 1 of the integer HVDC link flow variable )'
 609    HVDClinkFlowIntegerDefinition2(dt,fd)            'Definition 2 of the integer HVDC link flow variable'
 610    HVDClinkFlowIntegerDefinition3(dt,pole)          'Definition 4 of the HVDC pole integer varaible to prevent intra-pole circulating branch flows'
 611    HVDClinkFlowIntegerDefinition4(dt,pole,fd)       'Definition 4 of the HVDC pole integer varaible to prevent intra-pole circulating branch flows'
 612    LambdaIntegerDefinition1(dt,br)                  'Definition of weighting factor when branch integer constraints are needed'
 613    LambdaIntegerDefinition2(dt,br,los)              'Definition of weighting factor when branch integer constraints are needed'
 614   
 615  * AC transmission constraints
 616    ACnodeNetInjectionDefinition1(dt,b)              '1st definition of the net injection at buses corresponding to AC nodes (6.4.1.1)'
 617    ACnodeNetInjectionDefinition2(dt,b)              '2nd definition of the net injection at buses corresponding to AC nodes (6.4.1.2)'
 618    ACBranchMaximumFlow(dt,br,fd)                    'Maximum flow on the AC branch (6.4.1.3)'
 619    ACBranchFlowDefinition(dt,br)                    'Relationship between directed and undirected branch flow variables (6.4.1.4)'
 620    LinearLoadFlow(dt,br)                            'Equation that describes the linear load flow (6.4.1.5)'
 621    ACBranchBlockLimit(dt,br,los,fd)                 'Limit on each AC branch flow block (6.4.1.6)'
 622    ACDirectedBranchFlowDefinition(dt,br,fd)         'Composition of the directed branch flow from the block branch flow (6.4.1.7)'
 623    ACBranchLossCalculation(dt,br,los,fd)            'Calculation of the losses in each loss segment (6.4.1.8)'
 624    ACDirectedBranchLossDefinition(dt,br,fd)         'Composition of the directed branch losses from the block branch losses (6.4.1.9)'
 625   
 626  * AC transmission constraints to resolve circular flow
 627    ACDirectedBranchFlowIntegerDefinition1(dt,br)    'Integer constraint to enforce a flow direction on loss AC branches in the presence of circular branch flows or non-physical losses'
 628    ACDirectedBranchFlowIntegerDefinition2(dt,br,fd) 'Integer constraint to enforce a flow direction on loss AC branches in the presence of circular branch flows or non-physical losses'
 629   
 630  * Risk
 631    RiskOffsetCalculation_DCCE(dt,isl,resC,riskC)          'Calculation of the risk offset variable for the DCCE risk class.  (6.5.1.1)'
 632    RiskOffsetCalculation_DCECE(dt,isl,resC,riskC)         'Calculation of the risk offset variable for the DCECE risk class. (6.5.1.3)'
 633    HVDCRecCalculation(dt,isl)                             'Calculation of the net received HVDC MW flow into an island       (6.5.1.4)'
 634    HVDCIslandRiskCalculation(dt,isl,resC,riskC)           'Calculation of the island risk for a DCCE and DCECE               (6.5.1.5)'
 635   
 636    GenIslandRiskCalculation(dt,isl,o,resC,riskC)          'Calculation of the island risk for risk setting generators (6.5.1.6)'
 637    GenIslandRiskCalculation_1(dt,isl,o,resC,riskC)        'Calculation of the island risk for risk setting generators (6.5.1.6)'
 638    ManualIslandRiskCalculation(dt,isl,resC,riskC)         'Calculation of the island risk based on manual specifications (6.5.1.7)'
 639    HVDCIslandSecRiskCalculation_GEN(dt,isl,o,resC,riskC)  'Calculation of the island risk for an HVDC secondary risk to an AC risk (6.5.1.8)'
 640    HVDCIslandSecRiskCalculation_GEN_1(dt,isl,o,resC,riskC)'Calculation of the island risk for an HVDC secondary risk to an AC risk (6.5.1.8)'
 641    HVDCIslandSecRiskCalculation_Manual(dt,isl,resC,riskC) 'Calculation of the island risk for an HVDC secondary risk to a manual risk (6.5.1.9)'
 642    HVDCIslandSecRiskCalculation_Manu_1(dt,isl,resC,riskC) 'Calculation of the island risk for an HVDC secondary risk to a manual risk (6.5.1.9)'
 643    GenIslandRiskGroupCalculation(dt,isl,rg,resC,riskC)    'Calculation of the island risk of risk group (6.5.1.10)'
 644    GenIslandRiskGroupCalculation_1(dt,isl,rg,resC,riskC)  'Calculation of the risk of risk group (6.5.1.10)'
 645   
 646  * General NMIR equations
 647    EffectiveReserveShareCalculation(dt,isl,resC,riskC)                           '6.5.2.1 : Calculation of effective shared reserve'
 648    SharedReserveLimitByClearedReserve(dt,isl,resC)                               '6.5.2.2 : Shared offered reserve is limited by cleared reserved'
 649    BothClearedAndFreeReserveCanBeShared(dt,isl,resC,rd)                          '6.5.2.4 : Shared reserve is covered by cleared reserved and shareable free reserve'
 650    ReserveShareSentLimitByHVDCControlBand(dt,isl,resC,rd)                        '6.5.2.5 : Reserve share sent from an island is limited by HVDC control band'
 651    FwdReserveShareSentLimitByHVDCCapacity(dt,isl,resC,rd)                        '6.5.2.6 : Forward reserve share sent from an island is limited by HVDC capacity'
 652    ReverseReserveOnlyToEnergySendingIsland(dt,isl,resC,rd)                       '6.5.2.7 : Shared reserve sent in reverse direction is possible only if the island is not sending energy through HVDC'
 653    ReverseReserveShareLimitByHVDCControlBand(dt,isl,resC,rd)                     '6.5.2.8 : Reverse reserve share recieved at an island is limited by HVDC control band'
 654    ForwardReserveOnlyToEnergyReceivingIsland(dt,isl,resC,rd)                     '6.5.2.9 : Forward received reserve is possible if in the same direction of HVDC '
 655    ReverseReserveLimitInReserveZone(dt,isl,resC,rd,z)                            '6.5.2.10: Reverse reserve constraint if HVDC sent flow in reverse zone'
 656    ZeroReserveInNoReserveZone(dt,isl,resC,z)                                     '6.5.2.11 & 6.5.2.18: No reverse reserve if HVDC sent flow in no reverse zone and no forward reserve if round power disabled'
 657    OnlyOneActiveHVDCZoneForEachReserveClass(dt,resC)                             '6.5.2.12: Across both island, one and only one zone is active for each reserve class'
 658    ZeroSentHVDCFlowForNonSendingIsland(dt,isl)                                   '6.5.2.13: Directed HVDC sent from an island, if non-zero, must fall in a zone for each reserve class'
 659    RoundPowerZoneSentHVDCUpperLimit(dt,isl,resC,z)                               '6.5.2.14: Directed HVDC sent from an island <= RoundPowerZoneExit level if in round power zone of that island'
 660    HVDCSendingIslandDefinition(dt,isl,resC)                                      '6.5.2.15: An island is HVDC sending island if HVDC flow sent is in one of the three zones for each reserve class '
 661    OnlyOneSendingIslandExists(dt)                                                '6.5.2.19: One and only one island is HVDC sending island'
 662    HVDCSentCalculation(dt,isl)                                                   '6.5.2.20: Total HVDC sent from each island'
 663   
 664  * Lamda loss model
 665    HVDCFlowAccountedForForwardReserve(dt,isl,resC,rd)                            '6.5.2.21: HVDC flow sent from an island taking into account forward sent reserve'
 666    ForwardReserveReceivedAtHVDCReceivingIsland(dt,isl,resC,rd)                   '6.5.2.22: Forward reserve RECEIVED at an HVDC receiving island'
 667    HVDCFlowAccountedForReverseReserve(dt,isl,resC,rd)                            '6.5.2.23: HVDC flow sent from an island taking into account reverse received reserve'
 668    ReverseReserveReceivedAtHVDCSendingIsland(dt,isl,resC,rd)                     '6.5.2.24: Reverse reserve RECEIVED at an HVDC sending island'
 669    HVDCSentEnergyLambdaDefinition(dt,isl)                                        '6.5.2.25: Definition of weight factor for total HVDC energy sent from an island'
 670    HVDCSentEnergyFlowDefinition(dt,isl)                                          '6.5.2.26: Lambda definition of total HVDC energy flow sent from an island'
 671    HVDCSentEnergyLossesDefinition(dt,isl)                                        '6.5.2.27: Lambda definition of total loss of HVDC energy sent from an island'
 672    HVDCSentReserveLambdaDefinition(dt,isl,resC,rd)                               '6.5.2.28: Definition of weight factor for total HVDC+reserve sent from an island'
 673    HVDCSentReserveFlowDefinition(dt,isl,resC,rd)                                 '6.5.2.29: Lambda definition of Reserse + Energy flow on HVDC sent from an island'
 674    HVDCSentReserveLossesDefinition(dt,isl,resC,rd)                               '6.5.2.30: Lambda definition of Reserse + Energy loss on HVDC sent from an island'
 675   
 676  * Reserve share penalty
 677  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation
 678    ReserveShareEffective_CE_Calculation(dt,isl,resC,riskC)                       '6.5.2.31: Calculate max effective shared reserve for CE risk received at island'
 679    ReserveShareEffective_ECE_Calculation(dt,isl,resC,riskC)                      '6.5.2.31: Calculate max effective shared reserve for ECE risk received at island'
 680    ExcessReserveSharePenalty(dt)                                                 '6.5.2.31: Constraint to avoid excessive reserve share'
 681   
 682  * Reserve
 683    PLSRReserveProportionMaximum(dt,o,blk,resC,resT)                              '6.5.3.1: Maximum PLSR as a proportion of the block MW'
 684    ReserveOfferDefinition(dt,o,resC,resT)                                        '6.5.3.3: Definition of the reserve offers of different classes and types'
 685    EnergyAndReserveMaximum(dt,o,resC)                                            '6.5.3.4: Definition of maximum energy and reserves from each generator'
 686   
 687  * Reserve scarcity/shortfall
 688    HVDCRiskReserveShortFallCalculation(dt,isl,resC,RiskC)                        '6.5.4.2: Total Reserve Shortfall for DCCE risk'
 689    ManualRiskReserveShortFallCalculation(dt,isl,resC,RiskC)                      '6.5.4.2: Total Reserve Shortfall for Manual risk'
 690    GenRiskReserveShortFallCalculation(dt,isl,o,resC,RiskC)                       '6.5.4.2: Total Reserve Shortfall for generation risk unit'
 691    HVDCsecRiskReserveShortFallCalculation(dt,isl,o,resC,RiskC)                   '6.5.4.2: Total Reserve Shortfall for generation unit + HVDC risk'
 692    HVDCsecManualRiskReserveShortFallCalculation(dt,isl,resC,RiskC)                '6.5.4.2: Total Reserve Shortfall for Manual risk + HVDC risk'
 693    RiskGroupReserveShortFallCalculation(dt,isl,rg,resC,RiskC)                     '6.5.4.2: Total Reserve Shortfall for Risk Group'
 694   
 695  * Matching of reserve requirement and availability
 696    IslandReserveCalculation(dt,isl,resC)                                         '6.5.5.1: Calculate total island cleared reserve'
 697    SupplyDemandReserveRequirement(dt,isl,resC,riskC)                             '6.5.5.2&3: Matching of reserve supply and demand'
 698   
 699  * Branch security constraints
 700    BranchSecurityConstraintLE(dt,brCstr)                                         '6.6.1.5: Branch security constraint with LE sense'
 701    BranchSecurityConstraintGE(dt,brCstr)                                         '6.6.1.5: Branch security constraint with GE sense'
 702    BranchSecurityConstraintEQ(dt,brCstr)                                         '6.6.1.5: Branch security constraint with EQ sense'
 703   
 704  * Market node security constraints
 705    MNodeSecurityConstraintLE(dt,MnodeCstr)                                       '6.6.1.7: Market node security constraint with LE sense'
 706    MNodeSecurityConstraintGE(dt,MnodeCstr)                                       '6.6.1.7: Market node security constraint with GE sense'
 707    MNodeSecurityConstraintEQ(dt,MnodeCstr)                                       '6.6.1.7: Market node security constraint with EQ sense'
 708   
 709    ;
 710   
 711  * OBJECTIVE FUNCTION (5.1.1.1)
 712  ObjectiveFunction..
 713    NETBENEFIT
 714  =e=
 715    sum[ t, SYSTEMBENEFIT(t) - SYSTEMCOST(t) - SCARCITYCOST(t)
 716          - SYSTEMPENALTYCOST(t) - RESERVESHAREPENALTY(t) ]
 717    + sum[(t,n,blk), ScarcityEnrgLimit(t,n,blk) * ScarcityEnrgPrice(t,n,blk)]
 718    ;
 719   
 720  * Defined as the net sum of generation cost + reserve cost
 721  SystemCostDefinition(t)..
 722    SYSTEMCOST(t)
 723  =e=
 724    sum[ genOfrBlk(t,o,blk)
 725       , GENERATIONBLOCK(genOfrBlk)
 726       * EnrgOfrPrice(genOfrBlk) ]
 727  + sum[ resOfrBlk(t,o,blk,resC,resT)
 728       , RESERVEBLOCK(resOfrBlk)
 729       * ResOfrPrice(resOfrBlk) ]
 730    ;
 731   
 732  * Defined as the net sum of dispatchable load benefit
 733  SystemBenefitDefinition(t)..
 734    SYSTEMBENEFIT(t)
 735  =e=
 736    sum[ demBidBlk(t,bd,blk)
 737       , PURCHASEBLOCK(demBidBlk)
 738       * DemBidPrice(demBidBlk) ]
 739    ;
 740   
 741  * Defined as the sum of the individual violation costs
 742  SystemPenaltyCostDefinition(t)..
 743    SYSTEMPENALTYCOST(t)
 744  =e=
 745    sum[ bus(t,b), deficitBusGenerationPenalty * DEFICITBUSGENERATION(bus)
 746                      + surplusBusGenerationPenalty * SURPLUSBUSGENERATION(bus) ]
 747   
 748  + sum[ branch(t,br), surplusBranchFlowPenalty * SURPLUSBRANCHFLOW(branch) ]
 749   
 750  + sum[ offer(t,o), deficitRampRatePenalty * DEFICITRAMPRATE(offer)
 751                        + surplusRampRatePenalty * SURPLUSRAMPRATE(Offer) ]
 752   
 753  + sum[ BranchConstraint(t,brCstr)
 754       , deficitBrCstrPenalty * DEFICITBRANCHSECURITYCONSTRAINT(t,brCstr)
 755       + surplusBrCstrPenalty * SURPLUSBRANCHSECURITYCONSTRAINT(t,brCstr) ]
 756   
 757  + sum[ MNodeConstraint(t,MnodeCstr)
 758       , deficitMnodeCstrPenalty * DEFICITMNODECONSTRAINT(MNodeConstraint)
 759       + surplusMnodeCstrPenalty * SURPLUSMNODECONSTRAINT(MNodeConstraint) ]
 760   
 761  + sum[ (isl,resC)
 762         , [DeficitReservePenalty_CE  * DEFICITRESERVE_CE(t,isl,resC) ]
 763         + [DeficitReservePenalty_ECE * DEFICITRESERVE_ECE(t,isl,resC)]
 764       ]
 765   
 766  + sum[ o $ { (StudyMode = 101) or (StudyMode = 201) }
 767           , 0.0005 * ( GENERATIONUPDELTA(t,o) + GENERATIONDNDELTA(t,o) )
 768       ]
 769    ;
 770   
 771  * Defined as the sum of the individual violation costs (for reporting)
 772  TotalViolationCostDefinition..
 773    TOTALPENALTYCOST =e= sum[ t, SYSTEMPENALTYCOST(t) ] ;
 774   
 775  * Deined as the sume of scarcity cost
 776  TotalScarcityCostDefinition(t)..
 777    SCARCITYCOST(t)
 778  =e=
 779    sum[ (n,blk), ScarcityEnrgPrice(t,n,blk) * ENERGYSCARCITYBLK(t,n,blk) ]
 780   
 781  + sum[ (isl,resC,riskC,blk) $ HVDCrisk(riskC)
 782       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 783        * RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
 784   
 785  + sum[ (isl,resC,riskC,blk) $ ManualRisk(riskC)
 786       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 787       * RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
 788   
 789  +  sum[ (isl,o,resC,riskC,blk) $ { GenRisk(riskC)
 790                                 and islandRiskGenerator(t,isl,o) }
 791       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 792       * RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
 793   
 794  +  sum[ (isl,o,resC,riskC,blk) $ { HVDCsecRisk(riskC)
 795                                 and islandRiskGenerator(t,isl,o) }
 796       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 797       * RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
 798   
 799  +  sum[ (isl, resC,riskC,blk) $ HVDCsecRisk(riskC)
 800       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 801       * RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
 802   
 803  +  sum[ (isl,rg,resC,riskC,blk) $ GenRisk(riskC)
 804       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 805       * RESERVESHORTFALLGROUPBLK(t,isl,rg,resC,riskC,blk) ]
 806  ;
 807   
 808   
 809  *======= GENERATION AND LOAD CONSTRAINTS =======================================
 810   
 811  * Definition of generation provided by an offer (6.1.1.2)
 812  GenerationOfferDefintion(offer(t,o))..
 813    GENERATION(offer)
 814  =e=
 815    sum[ genOfrBlk(offer,blk), GENERATIONBLOCK(offer,blk) ]
 816    ;
 817   
 818  * Definition of purchase provided by a bid (6.1.1.6)
 819  DemBidDefintion(bid(t,bd))..
 820    PURCHASE(bid)
 821  =e=
 822    sum[ demBidBlk(bid,blk), PURCHASEBLOCK(bid,blk) ]
 823    ;
 824   
 825  * Definition of bus energy scarcity (6.1.1.8)
 826  EnergyScarcityDefinition(t,n)..
 827    ENERGYSCARCITYNODE(t,n)
 828  =e=
 829    sum[ blk, ENERGYSCARCITYBLK(t,n,blk) ]
 830    ;
 831   
 832  *======= GENERATION AND LOAD CONSTRAINTS END ===================================
 833   
 834   
 835   
 836  *======= RAMPING CONSTRAINTS ===================================================
 837  * Note: The CoefficientForRampRate in SPD formulation  = intervalDuration / 60
 838   
 839  * Maximum movement of the generator downwards due to up ramp rate (6.2.1.1)
 840  GenerationRampUp(t,o) $ { posEnrgOfr(t,o) and PrimaryOffer(t,o) }..
 841    sum[ o1 $ PrimarySecondaryOffer(t,o,o1), GENERATION(t,o1) ]
 842  + GENERATION(t,o) - DEFICITRAMPRATE(t,o)
 843  =l=
 844    (RampRateUp(t,o) * intervalDuration / 60) + generationStart(t,o)
 845    ;
 846   
 847  * Maximum movement of the generator downwards due to down ramp rate (6.2.1.2)
 848  GenerationRampDown(t,o) $ { posEnrgOfr(t,o) and PrimaryOffer(t,o) }..
 849    sum[ o1 $ PrimarySecondaryOffer(t,o,o1), GENERATION(t,o1) ]
 850  + GENERATION(t,o) + SURPLUSRAMPRATE(t,o)
 851  =g=
 852    generationStart(t,o)  - (RampRateDn(t,o) * intervalDuration / 60)
 853    ;
 854   
 855  *======= RAMPING CONSTRAINTS END================================================
 856   
 857   
 858   
 859  *======= GENERATION CHANGE CONSTRAINT ==========================================
 860  * Calculate the MW of generation increase/decrease - only applid for RTD/RTDP
 861  * and this constraint is not documented in SPD formulation document
 862  GenerationChangeUpDown(t,o) $ { (StudyMode = 101) or (StudyMode = 201) }..
 863    GENERATIONUPDELTA(t,o) - GENERATIONDNDELTA(t,o)
 864  =e=
 865    GENERATION(t,o) - generationStart(t,o);
 866   
 867  *======= GENERATION CHANGE CONSTRAINT END ======================================
 868   
 869   
 870   
 871  *======= HVDC TRANSMISSION EQUATIONS ===========================================
 872   
 873  * Maximum flow on each HVDC link (6.3.1.1)
 874  HVDClinkMaximumFlow(HVDClink(t,br)) $ useHVDCbranchLimits ..
 875    HVDCLINKFLOW(HVDClink)
 876  =l=
 877    sum[ fd $ ( ord(fd)=1 ), branchCapacity(HVDClink,fd) ]
 878    ;
 879   
 880  * Definition of losses on the HVDC link (6.3.1.2)
 881  HVDClinkLossDefinition(HVDClink(t,br))..
 882    HVDCLINKLOSSES(HVDClink)
 883  =e=
 884    sum[ validLossSegment(HVDClink,bp,fd)
 885       , HVDCBreakPointMWLoss(HVDClink,bp,fd) * LAMBDA(HVDClink,bp) ]
 886    ;
 887   
 888  * Definition of MW flow on the HVDC link (6.3.1.3)
 889  HVDClinkFlowDefinition(HVDClink(t,br))..
 890    HVDCLINKFLOW(HVDClink)
 891  =e=
 892    sum[ validLossSegment(HVDClink,bp,fd)
 893    , HVDCBreakPointMWFlow(HVDClink,bp,fd) * LAMBDA(HVDClink,bp) ]
 894    ;
 895   
 896  * Definition of weighting factor (6.3.1.4)
 897  LambdaDefinition(HVDClink(t,br))..
 898    sum(validLossSegment(HVDClink,bp,fd), LAMBDA(HVDClink,bp))
 899  =e=
 900    1
 901    ;
 902   
 903   
 904  *======= HVDC TRANSMISSION EQUATIONS END =======================================
 905   
 906   
 907   
 908  *======= HVDC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES ========================
 909  * HVDC transmission constraints to resolve non-physical loss and circular flow
 910  * These constraints are not explicitly formulated in SPD formulation
 911  * But you can find the description in "Post-Solve Checks
 912   
 913  * Definition 1 of the integer HVDC link flow variable
 914  * HVDC_North_Flow + HVDC_South_Flow
 915  * = BEN_HAY_1_Flow + BEN_HAY_2_Flow + HAY_BEN_1_Flow + HAY_BEN_2_Flow
 916  HVDClinkFlowIntegerDefinition1(t) $ { UseBranchFlowMIP(t) and
 917                                        resolveCircularBranchFlows }..
 918    sum[ fd, HVDCLINKFLOWDIRECTED_INTEGER(t,fd) ]
 919  =e=
 920    sum[ HVDCpoleDirection(HVDClink(t,br),fd), HVDCLINKFLOW(HVDClink) ]
 921    ;
 922   
 923  * Definition 2 of the integer HVDC link flow variable
 924  * HVDC_North_Flow = BEN_HAY_1_Flow + BEN_HAY_2_Flow
 925  * HVDC_South_Flow = HAY_BEN_1_Flow + HAY_BEN_2_Flow
 926  HVDClinkFlowIntegerDefinition2(t,fd) $ { UseBranchFlowMIP(t) and
 927                                           resolveCircularBranchFlows }..
 928    HVDCLINKFLOWDIRECTED_INTEGER(t,fd)
 929  =e=
 930    sum[ HVDCpoleDirection(HVDClink(t,br),fd), HVDCLINKFLOW(HVDClink) ]
 931    ;
 932   
 933  * Definition of the integer HVDC pole flow variable for intra-pole circulating branch flows
 934  * Pole1_North_Flow + Pole1_South_Flow = BEN_HAY_1_Flow + HAY_BEN_1_Flow
 935  * Pole2_North_Flow + Pole2_South_Flow = BEN_HAY_2_Flow + HAY_BEN_2_Flow
 936  HVDClinkFlowIntegerDefinition3(t,pole) $ { UseBranchFlowMIP(t) and
 937                                             resolveCircularBranchFlows }..
 938    sum[ br $ { HVDClink(t,br)
 939            and HVDCpoleBranchMap(pole,br) } , HVDCLINKFLOW(t,br) ]
 940  =e=
 941    sum[ fd, HVDCPOLEFLOW_INTEGER(t,pole,fd) ]
 942    ;
 943   
 944  * Definition of the integer HVDC pole flow variable for intra-pole circulating branch flows
 945  * Pole1_North_Flow = BEN_HAY_1_Flow + HAY_BEN_1_Flow
 946  * Pole1_South_Flow = BEN_HAY_1_Flow + HAY_BEN_1_Flow
 947  * Pole2_North_Flow = BEN_HAY_2_Flow + HAY_BEN_2_Flow
 948  * Pole2_South_Flow = BEN_HAY_2_Flow + HAY_BEN_2_Flow
 949   
 950  HVDClinkFlowIntegerDefinition4(t,pole,fd) $ { UseBranchFlowMIP(t) and
 951                                                resolveCircularBranchFlows }..
 952    sum[ HVDCpoleDirection(HVDClink(t,br),fd) $ HVDCpoleBranchMap(pole,br)
 953       , HVDCLINKFLOW(HVDClink) ]
 954  =e=
 955    HVDCPOLEFLOW_INTEGER(t,pole,fd)
 956    ;
 957   
 958  *======= HVDC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES END ====================
 959   
 960   
 961  *======= HVDC TRANSMISSION EQUATIONS FOR SOS2 VARIABLES ========================
 962  * Definition 1 of weighting factor when branch integer constraints are needed
 963  LambdaIntegerDefinition1(HVDClink(t,br)) $ { UseBranchFlowMIP(t) and
 964                                               resolveHVDCnonPhysicalLosses }..
 965    sum[ validLossSegment(HVDClink,bp,fd), LAMBDAINTEGER(HVDClink,bp) ]
 966  =e=
 967    1
 968    ;
 969   
 970  * Definition 2 of weighting factor when branch integer constraints are needed
 971  LambdaIntegerDefinition2(HVDClink(t,br),bp)
 972    $ { UseBranchFlowMIP(t) and resolveHVDCnonPhysicalLosses
 973    and sum[ fd $ validLossSegment(HVDClink,bp,fd), 1] }..
 974    LAMBDAINTEGER(HVDClink,bp)
 975  =e=
 976    LAMBDA(HVDClink,bp)
 977    ;
 978   
 979  *======= HVDC TRANSMISSION EQUATIONS END =======================================
 980   
 981   
 982   
 983   
 984  *======= AC TRANSMISSION EQUATIONS =============================================
 985   
 986  * 1st definition of the net injection at buses corresponding to AC nodes (6.4.1.1)
 987  ACnodeNetInjectionDefinition1(bus(t,b))..
 988    ACNODENETINJECTION(t,b)
 989  =e=
 990    sum[ ACBranchSendingBus(ACBranch(t,br),b,fd)
 991       , ACBRANCHFLOWDIRECTED(ACBranch,fd)
 992       ]
 993  - sum[ ACBranchReceivingBus(ACBranch(t,br),b,fd)
 994       , ACBRANCHFLOWDIRECTED(ACBranch,fd)
 995       ]
 996    ;
 997   
 998  * 2nd definition of the net injection at buses corresponding to AC nodes (6.4.1.2)
 999  ACnodeNetInjectionDefinition2(bus(t,b))..
1000    ACNODENETINJECTION(t,b)
1001  =e=
1002    sum[ offerNode(t,o,n) $ NodeBus(t,n,b)
1003       , nodeBusAllocationFactor(t,n,b) * GENERATION(t,o) ]
1004  - sum[ BidNode(t,bd,n) $ NodeBus(t,n,b)
1005       , NodeBusAllocationFactor(t,n,b) * PURCHASE(t,bd) ]
1006  - sum[ NodeBus(t,n,b)
1007       , NodeBusAllocationFactor(t,n,b) * RequiredLoad(t,n) ]
1008  + sum[ HVDClinkReceivingBus(HVDClink(t,br),b), HVDCLINKFLOW(HVDClink)   ]
1009  - sum[ HVDClinkReceivingBus(HVDClink(t,br),b), HVDCLINKLOSSES(HVDClink) ]
1010  - sum[ HVDClinkSendingBus(HVDClink(t,br),b)  , HVDCLINKFLOW(HVDClink)   ]
1011  - sum[ HVDClinkBus(HVDClink(t,br),b),   0.5 * branchFixedLoss(HVDClink) ]
1012  - sum[ ACBranchReceivingBus(ACBranch(t,br),b,fd)
1013       , branchReceivingEndLossProportion
1014       * ACBRANCHLOSSESDIRECTED(ACBranch,fd) ]
1015  - sum[ ACBranchSendingBus(ACBranch(t,br),b,fd)
1016       , (1 - branchReceivingEndLossProportion)
1017       * ACBRANCHLOSSESDIRECTED(ACBranch,fd) ]
1018  - sum[ BranchBusConnect(ACBranch(t,br),b), 0.5*branchFixedLoss(ACBranch) ]
1019  + DEFICITBUSGENERATION(t,b) - SURPLUSBUSGENERATION(t,b)
1020  * Note that we model energy scarcity as penalty instead of benefit like SPD
1021  * The reason for this is to avoid numerical issues.
1022  + sum[ NodeBus(t,n,b)
1023       , NodeBusAllocationFactor(t,n,b) * ENERGYSCARCITYNODE(t,n)]
1024    ;
1025   
1026  * Maximum flow on the AC branch (6.4.1.3)
1027  ACBranchMaximumFlow(ACbranch(t,br),fd) $ useACbranchLimits..
1028    ACBRANCHFLOWDIRECTED(ACBranch,fd) - SURPLUSBRANCHFLOW(ACBranch)
1029  =l=
1030    branchCapacity(ACBranch,fd)
1031    ;
1032   
1033  * Relationship between directed and undirected branch flow variables (6.4.1.4)
1034  ACBranchFlowDefinition(ACBranch(t,br))..
1035    ACBRANCHFLOW(ACBranch)
1036  =e=
1037    sum[ fd $ (ord(fd) = 1), ACBRANCHFLOWDIRECTED(ACBranch,fd) ]
1038  - sum[ fd $ (ord(fd) = 2), ACBRANCHFLOWDIRECTED(ACBranch,fd) ]
1039    ;
1040   
1041  * Equation that describes the linear load flow (6.4.1.5)
1042  LinearLoadFlow(ACBranch(t,br))..
1043    ACBRANCHFLOW(ACBranch)
1044  =e=
1045    branchSusceptance(ACBranch)
1046    * sum[ BranchBusDefn(ACBranch,frB,toB)
1047         , ACNODEANGLE(t,frB) - ACNODEANGLE(t,toB) ]
1048    ;
1049   
1050  * Limit on each AC branch flow block (6.4.1.6)
1051  ACBranchBlockLimit(validLossSegment(ACBranch(t,br),los,fd))..
1052    ACBRANCHFLOWBLOCKDIRECTED(ACBranch,los,fd)
1053  =l=
1054    ACBranchLossMW(ACBranch,los,fd)
1055    ;
1056   
1057  * Composition of the directed branch flow from the block branch flow (6.4.1.7)
1058  ACDirectedBranchFlowDefinition(ACBranch(t,br),fd)..
1059    ACBRANCHFLOWDIRECTED(ACBranch,fd)
1060  =e=
1061    sum[ validLossSegment(ACBranch,los,fd)
1062       , ACBRANCHFLOWBLOCKDIRECTED(ACBranch,los,fd) ]
1063    ;
1064   
1065  * Calculation of the losses in each loss segment (6.4.1.8) - Modified for BranchcReverseRatings
1066  ACBranchLossCalculation(validLossSegment(ACBranch(t,br),los,fd))..
1067    ACBRANCHLOSSESBLOCKDIRECTED(ACBranch,los,fd)
1068  =e=
1069    ACBRANCHFLOWBLOCKDIRECTED(ACBranch,los,fd)
1070    * ACBranchLossFactor(ACBranch,los,fd)
1071    ;
1072   
1073  * Composition of the directed branch losses from the block branch losses (6.4.1.9)
1074  ACDirectedBranchLossDefinition(ACBranch(t,br),fd)..
1075    ACBRANCHLOSSESDIRECTED(ACBranch,fd)
1076  =e=
1077    sum[ validLossSegment(ACBranch,los,fd)
1078       , ACBRANCHLOSSESBLOCKDIRECTED(ACBranch,los,fd) ]
1079    ;
1080   
1081  *======= AC TRANSMISSION EQUATIONS END =========================================
1082   
1083   
1084   
1085  *======= AC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES ==========================
1086  * AC transmission constraints to resolve circular flow
1087  * These constraints are not explicitly formulated in SPD formulation
1088  * But you can find the description in "Post-Solve Checks"
1089   
1090  * Integer constraint to enforce a flow direction on loss AC branches in the
1091  * presence of circular branch flows or non-physical losses
1092  ACDirectedBranchFlowIntegerDefinition1(ACBranch(lossBranch(t,br)))
1093    $ { UseBranchFlowMIP(t) and resolveCircularBranchFlows }..
1094    sum[ fd, ACBRANCHFLOWDIRECTED_INTEGER(ACBranch,fd) ]
1095  =e=
1096    sum[ fd, ACBRANCHFLOWDIRECTED(ACBranch,fd) ]
1097    ;
1098   
1099  * Integer constraint to enforce a flow direction on loss AC branches in the
1100  * presence of circular branch flows or non-physical losses
1101  ACDirectedBranchFlowIntegerDefinition2(ACBranch(lossBranch(t,br)),fd)
1102    $ { UseBranchFlowMIP(t) and resolveCircularBranchFlows }..
1103    ACBRANCHFLOWDIRECTED_INTEGER(ACBranch,fd)
1104  =e=
1105    ACBRANCHFLOWDIRECTED(ACBranch,fd)
1106    ;
1107   
1108  *======= AC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES END ======================
1109   
1110   
1111   
1112  *======= RISK EQUATIONS ========================================================
1113   
1114  * Calculation of the risk offset variable for the DCCE risk class. (6.5.1.1)
1115  RiskOffsetCalculation_DCCE(t,isl,resC,riskC)
1116    $ { HVDCrisk(riskC) and ContingentEvents(riskC)  }..
1117    RISKOFFSET(t,isl,resC,riskC)
1118  =e=
1119    FreeReserve(t,isl,resC,riskC) + HVDCPoleRampUp(t,isl,resC,riskC)
1120    ;
1121   
1122  * Calculation of the risk offset variable for the DCECE risk class. (6.5.1.3)
1123  RiskOffsetCalculation_DCECE(t,isl,resC,riskC)
1124    $ { HVDCrisk(riskC) and ExtendedContingentEvent(riskC) }..
1125    RISKOFFSET(t,isl,resC,riskC)
1126  =e=
1127    FreeReserve(t,isl,resC,riskC)
1128    ;
1129   
1130  * Calculation of the net received HVDC MW flow into an island (6.5.1.4)
1131  HVDCRecCalculation(t,isl)..
1132    HVDCREC(t,isl)
1133  =e=
1134    sum[ (b,br) $ { BusIsland(t,b,isl)
1135                and HVDClinkSendingBus(t,br,b)
1136                and HVDCLink(t,br)
1137                  }, -HVDCLINKFLOW(t,br)
1138       ]
1139  + sum[ (b,br) $ { BusIsland(t,b,isl)
1140                and HVDClinkReceivingBus(t,br,b)
1141                and HVDCLink(t,br)
1142                  }, HVDCLINKFLOW(t,br) - HVDCLINKLOSSES(t,br)
1143       ]
1144    ;
1145   
1146  * Calculation of the island risk for a DCCE and DCECE (6.5.1.5)
1147  HVDCIslandRiskCalculation(t,isl,resC,HVDCrisk)..
1148    ISLANDRISK(t,isl,resC,HVDCrisk)
1149  =e=
1150    IslandRiskAdjustmentFactor(t,isl,resC,HVDCrisk)
1151    * [ HVDCREC(t,isl)
1152      - RISKOFFSET(t,isl,resC,HVDCrisk)
1153      + modulationRiskClass(t,HVDCrisk)
1154      ]
1155  * Scarcity reserve (only applied for CE risk)
1156    - RESERVESHORTFALL(t,isl,resC,HVDCrisk) $ ContingentEvents(HVDCrisk)
1157    ;
1158   
1159  * Calculation of the risk of risk setting generators (6.5.1.6)
1160  GenIslandRiskCalculation_1(t,isl,o,resC,GenRisk)
1161    $ islandRiskGenerator(t,isl,o) ..
1162    GENISLANDRISK(t,isl,o,resC,GenRisk)
1163  =e=
1164    IslandRiskAdjustmentFactor(t,isl,resC,GenRisk)
1165    * [ GENERATION(t,o)
1166      - FreeReserve(t,isl,resC,GenRisk)
1167      + FKBand(t,o)
1168      + sum[ resT, RESERVE(t,o,resC,resT) ]
1169      + sum[ o1 $ PrimarySecondaryOffer(t,o,o1)
1170           , sum[ resT, RESERVE(t,o1,resC,resT) ] + GENERATION(t,o1) ]
1171      ]
1172  * NMIR update
1173  - RESERVESHAREEFFECTIVE(t,isl,resC,GenRisk)$reserveShareEnabled(t,resC)
1174  * Scarcity reserve (only applied for CE risk)
1175  - RESERVESHORTFALLUNIT(t,isl,o,resC,GenRisk) $ ContingentEvents(GenRisk)
1176    ;
1177   
1178  * Calculation of the island risk for risk setting generators (6.5.1.6)
1179  GenIslandRiskCalculation(t,isl,o,resC,GenRisk)
1180    $ islandRiskGenerator(t,isl,o) ..
1181    ISLANDRISK(t,isl,resC,GenRisk)
1182  =g=
1183    GENISLANDRISK(t,isl,o,resC,GenRisk) ;
1184   
1185  * Calculation of the island risk based on manual specifications (6.5.1.7)
1186  ManualIslandRiskCalculation(t,isl,resC,ManualRisk)..
1187    ISLANDRISK(t,isl,resC,ManualRisk)
1188  =e=
1189    IslandRiskAdjustmentFactor(t,isl,resC,ManualRisk)
1190    * [ IslandMinimumRisk(t,isl,resC,ManualRisk)
1191      - FreeReserve(t,isl,resC,ManualRisk)
1192      ]
1193  * NMIR update
1194  - RESERVESHAREEFFECTIVE(t,isl,resC,ManualRisk)$reserveShareEnabled(t,resC)
1195  * Scarcity reserve (only applied for CE risk)
1196  - RESERVESHORTFALL(t,isl,resC,ManualRisk) $ ContingentEvents(ManualRisk)
1197    ;
1198   
1199  * Calculation of the island risk for an HVDC secondary generation risk(6.5.1.8)
1200  * HVDC secondary risk includes HVDC risk and
1201  * Generation of both primary and secondary generation unit +
1202  * cleared reserve + the FKBand for generator primary risk
1203  HVDCIslandSecRiskCalculation_GEN_1(t,isl,o,resC,HVDCSecRisk)
1204    $ { islandRiskGenerator(t,isl,o)  and
1205        HVDCSecRiskEnabled(t,isl,HVDCSecRisk) }..
1206    HVDCGENISLANDRISK(t,isl,o,resC,HVDCSecRisk)
1207  =e=
1208    IslandRiskAdjustmentFactor(t,isl,resC,HVDCSecRisk)
1209    * [ GENERATION(t,o)
1210      - FreeReserve(t,isl,resC,HVDCSecRisk)
1211      + HVDCREC(t,isl)
1212      - HVDCSecRiskSubtractor(t,isl)
1213      + FKBand(t,o)
1214      + sum[ resT, RESERVE(t,o,resC,resT) ]
1215      + sum[ o1 $ PrimarySecondaryOffer(t,o,o1)
1216           , sum[ resT, RESERVE(t,o1,resC,resT) ] + GENERATION(t,o1) ]
1217  *   SPD version 11.0 update
1218      + modulationRiskClass(t,HVDCSecRisk)
1219      ]
1220  * Scarcity reserve (only applied for CE risk)
1221  - RESERVESHORTFALLUNIT(t,isl,o,resC,HVDCSecRisk) $ ContingentEvents(HVDCSecRisk)
1222    ;
1223   
1224  * Calculation of the island risk for an HVDC secondary generation risk (6.5.1.8)
1225  HVDCIslandSecRiskCalculation_GEN(t,isl,o,resC,HVDCSecRisk)
1226    $ { islandRiskGenerator(t,isl,o)  and
1227        HVDCSecRiskEnabled(t,isl,HVDCSecRisk) }..
1228    ISLANDRISK(t,isl,resC,HVDCSecRisk)
1229  =g=
1230    HVDCGENISLANDRISK(t,isl,o,resC,HVDCSecRisk)
1231    ;
1232   
1233  * Calculation of the island risk for an HVDC secondary manual risk (6.5.1.9)
1234  HVDCIslandSecRiskCalculation_Manu_1(t,isl,resC,HVDCSecRisk)
1235    $ HVDCSecRiskEnabled(t,isl,HVDCSecRisk)..
1236    HVDCMANISLANDRISK(t,isl,resC,HVDCSecRisk)
1237  =e=
1238    IslandRiskAdjustmentFactor(t,isl,resC,HVDCSecRisk)
1239    * [ IslandMinimumRisk(t,isl,resC,HVDCSecRisk)
1240      - FreeReserve(t,isl,resC,HVDCSecRisk)
1241      + HVDCREC(t,isl)
1242      - HVDCSecRiskSubtractor(t,isl)
1243      + modulationRiskClass(t,HVDCSecRisk)
1244      ]
1245  * Scarcity reserve (only applied for CE risk)
1246  - RESERVESHORTFALL(t,isl,resC,HVDCSecRisk) $ ContingentEvents(HVDCSecRisk)
1247    ;
1248   
1249  * Calculation of the island risk for an HVDC secondary manual risk (6.5.1.9)
1250  HVDCIslandSecRiskCalculation_Manual(t,isl,resC,HVDCSecRisk)
1251    $ HVDCSecRiskEnabled(t,isl,HVDCSecRisk)..
1252    ISLANDRISK(t,isl,resC,HVDCSecRisk)
1253  =g=
1254    HVDCMANISLANDRISK(t,isl,resC,HVDCSecRisk)
1255    ;
1256   
1257  * Calculation of the risk of risk group (6.5.1.10)
1258  GenIslandRiskGroupCalculation_1(t,isl,rg,resC,GenRisk)
1259    $ islandRiskGroup(t,isl,rg,GenRisk)..
1260    GENISLANDRISKGROUP(t,isl,rg,resC,GenRisk)
1261  =e=
1262    IslandRiskAdjustmentFactor(t,isl,resC,GenRisk)
1263    * [ sum[ o $ { offerIsland(t,o,isl)
1264               and riskGroupOffer(t,rg,o,GenRisk)
1265                 } , GENERATION(t,o) + FKBand(t,o)
1266                   + sum[ resT, RESERVE(t,o,resC,resT) ]
1267           ]
1268      - FreeReserve(t,isl,resC,GenRisk)
1269      ]
1270  * NMIR update
1271  - RESERVESHAREEFFECTIVE(t,isl,resC,GenRisk)$reserveShareEnabled(t,resC)
1272  * Scarcity reserve (only applied for CE risk)
1273  - RESERVESHORTFALLGROUP(t,isl,rg,resC,GenRisk) $ ContingentEvents(GenRisk)
1274    ;
1275   
1276  * Calculation of the island risk for risk group (6.5.1.10)
1277  GenIslandRiskGroupCalculation(t,isl,rg,resC,GenRisk)
1278    $ islandRiskGroup(t,isl,rg,GenRisk)..
1279    ISLANDRISK(t,isl,resC,GenRisk)
1280  =g=
1281    GENISLANDRISKGROUP(t,isl,rg,resC,GenRisk)
1282    ;
1283   
1284  *======= RISK EQUATIONS END ====================================================
1285   
1286   
1287  *======= NMIR - RESERVE SHARING EQUATIONS ======================================
1288   
1289  * General NMIR equations start -------------------------------------------------
1290   
1291  * Calculation of effective shared reserve - (6.5.2.1)
1292  EffectiveReserveShareCalculation(t,isl,resC,riskC)
1293    $ { reserveShareEnabled(t,resC)
1294    and ( GenRisk(riskC) or ManualRisk(riskC) ) }..
1295    RESERVESHAREEFFECTIVE(t,isl,resC,riskC)
1296  =l=
1297    Sum[ rd , RESERVESHARERECEIVED(t,isl,resC,rd)
1298            * effectiveFactor(t,isl,resC,riskC) ]
1299    ;
1300   
1301  * Shared offered reserve is limited by cleared reserved - (6.5.2.2)
1302  SharedReserveLimitByClearedReserve(t,isl,resC)
1303    $ reserveShareEnabled(t,resC)..
1304    SHAREDRESERVE(t,isl,resC)
1305  =l=
1306    ISLANDRESERVE(t,isl,resC)
1307    ;
1308   
1309  * Both cleared reserved and shareable free reserve can be shared - (6.5.2.4)
1310  BothClearedAndFreeReserveCanBeShared(t,isl,resC,rd)
1311    $ reserveShareEnabled(t,resC)..
1312    RESERVESHARESENT(t,isl,resC,rd)
1313  =l=
1314    SHAREDRESERVE(t,isl,resC) + SHAREDNFR(t,isl)$(ord(resC)=1)
1315    ;
1316   
1317  * Reserve share sent is limited by HVDC control band - (6.5.2.5)
1318  ReserveShareSentLimitByHVDCControlBand(t,isl,resC,rd)
1319    $ reserveShareEnabled(t,resC)..
1320    RESERVESHARESENT(t,isl,resC,rd)
1321  =l=
1322    [ HVDCControlBand(t,rd) - modulationRisk(t)
1323    ] $ (HVDCControlBand(t,rd) > modulationRisk(t))
1324    ;
1325   
1326  * Forward reserve share sent is limited by HVDC capacity - (6.5.2.6)
1327  FwdReserveShareSentLimitByHVDCCapacity(t,isl,resC,rd)
1328    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1329    RESERVESHARESENT(t,isl,resC,rd)
1330  + HVDCSENT(t,isl)
1331  =l=
1332    [ HVDCMax(t,isl) - modulationRisk(t) ] $ (HVDCMax(t,isl) > modulationRisk(t))
1333  ;
1334   
1335  * Reverse shared reserve is only possible for receiving island - (6.5.2.7)
1336  ReverseReserveOnlyToEnergySendingIsland(t,isl,resC,rd)
1337    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1338    RESERVESHARESENT(t,isl,resC,rd)
1339  =l=
1340    BigM * [ 1 - HVDCSENDING(t,isl) ]
1341    ;
1342   
1343  * Reverse shared reserve recieved at an island is limited by HVDC control band - (6.5.2.8)
1344  ReverseReserveShareLimitByHVDCControlBand(t,isl,resC,rd)
1345    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1346    RESERVESHARERECEIVED(t,isl,resC,rd)
1347  =l=
1348    HVDCSENDING(t,isl) * [ HVDCControlBand(t,rd) - modulationRisk(t)
1349                         ] $ ( HVDCControlBand(t,rd) > modulationRisk(t) )
1350    ;
1351   
1352  * Forward received shared reserve only possible for receiving island - (3.4.2.9)
1353  ForwardReserveOnlyToEnergyReceivingIsland(t,isl,resC,rd)
1354    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1355    RESERVESHARERECEIVED(t,isl,resC,rd)
1356  =l=
1357    BigM * [ 1 - HVDCSENDING(t,isl) ]
1358    ;
1359   
1360  * Reverse shared reserve limit if HVDC sent flow in reverse zone - (6.5.2.10)
1361  ReverseReserveLimitInReserveZone(t,isl,resC,rd,z)
1362    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) and (ord(z) = 3) }..
1363    RESERVESHARERECEIVED(t,isl,resC,rd)
1364  =l=
1365    HVDCSENT(t,isl)
1366  - (MonopoleMinimum(t) + modulationRisk(t))
1367  + BigM * [ 1 - INZONE(t,isl,resC,z) ]
1368    ;
1369   
1370  * No reverse shared reserve if HVDC sent flow in no reverse zone &
1371  * No forward reserve if HVDC sent flow in no reverse zone and RP disabled
1372  * (6.5.2.11) & (6.5.2.18)
1373  ZeroReserveInNoReserveZone(t,isl,resC,z)
1374    $ { reserveShareEnabled(t,resC) and (ord(z) = 2) }..
1375    Sum[ rd $ (ord(rd) = 2), RESERVESHARERECEIVED(t,isl,resC,rd) ]
1376  + Sum[ rd $ (ord(rd) = 1), RESERVESHARESENT(t,isl,resC,rd)
1377       ] $ {reserveRoundPower(t,resC) = 0}
1378  =l=
1379    BigM * [ 1 - INZONE(t,isl,resC,z) ]
1380    ;
1381   
1382  * Across both island, only one zone is active for each reserve class -(6.5.2.12)
1383  OnlyOneActiveHVDCZoneForEachReserveClass(t,resC) $ reserveShareEnabled(t,resC)..
1384    Sum[ (isl,z), INZONE(t,isl,resC,z) ] =e= 1 ;
1385   
1386  * HVDC sent from sending island only - (6.5.2.13)
1387  ZeroSentHVDCFlowForNonSendingIsland(t,isl) $ reserveShareEnabledOverall(t)..
1388    HVDCSENT(t,isl) =l= BigM * HVDCSENDING(t,isl) ;
1389   
1390  * HVDC sent from an island <= RoundPowerZoneExit level if in round power zone
1391  * of that island - (6.5.2.14)
1392  RoundPowerZoneSentHVDCUpperLimit(t,isl,resC,z)
1393    $ { reserveShareEnabled(t,resC) and (ord(z) = 1) }..
1394    HVDCSENT(t,isl)
1395  =l=
1396    roPwrZoneExit(t,resC) + BigM * [ 1 - INZONE(t,isl,resC,z) ]
1397  ;
1398   
1399  * An island is HVDC sending island if HVDC flow sent is in one of the three
1400  * zones for each reserve class - (6.5.2.15)
1401  HVDCSendingIslandDefinition(t,isl,resC) $ reserveShareEnabled(t,resC)..
1402    HVDCSENDING(t,isl) =e= Sum[ z, INZONE(t,isl,resC,z) ] ;
1403   
1404  * One and only one island is HVDC sending island - (6.5.2.19)
1405  OnlyOneSendingIslandExists(t) $ reserveShareEnabledOverall(t)..
1406   Sum[ isl, HVDCSENDING(t,isl) ] =e= 1 ;
1407   
1408  * Total HVDC sent from each island - (6.5.2.20)
1409  HVDCSentCalculation(t,isl) $ reserveShareEnabledOverall(t)..
1410    HVDCSENT(t,isl)
1411  =e=
1412    Sum[ (b,br) $ { BusIsland(t,b,isl)
1413                and HVDClinkSendingBus(t,br,b)
1414                and HVDClink(t,br)
1415                  }, HVDCLINKFLOW(t,br)
1416       ]
1417  ;
1418   
1419  * General NMIR equations end ---------------------------------------------------
1420   
1421   
1422  * Lamda loss model -------------------------------------------------------------
1423   
1424  * HVDC flow + forward reserve sent from an island - (6.5.2.21)
1425  HVDCFlowAccountedForForwardReserve(t,isl,resC,rd)
1426    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1427    HVDCRESERVESENT(t,isl,resC,rd)
1428  =e=
1429    RESERVESHARESENT(t,isl,resC,rd) + HVDCSENT(t,isl)
1430    ;
1431   
1432  * Received forward shared reserve at an HVDC receiving island - (6.5.2.22)
1433  ForwardReserveReceivedAtHVDCReceivingIsland(t,isl,resC,rd)
1434    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1435    RESERVESHARERECEIVED(t,isl,resC,rd)
1436  =e=
1437    Sum[ isl1 $ (not sameas(isl1,isl))
1438        , RESERVESHARESENT(t,isl1,resC,rd)
1439        - HVDCRESERVELOSS(t,isl1,resC,rd)
1440        + HVDCSENTLOSS(t,isl1) ]
1441    ;
1442   
1443  * HVDC flow - received reverse reserve sent from an island - (6.5.2.23)
1444  HVDCFlowAccountedForReverseReserve(t,isl,resC,rd)
1445    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1446    HVDCRESERVESENT(t,isl,resC,rd)
1447  =e=
1448    HVDCSENT(t,isl) - RESERVESHARERECEIVED(t,isl,resC,rd)
1449    ;
1450   
1451  * Reverse reserve RECEIVED at an HVDC sending island - (6.5.2.24)
1452  ReverseReserveReceivedAtHVDCSendingIsland(t,isl,resC,rd)
1453    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1454    RESERVESHARERECEIVED(t,isl,resC,rd)
1455  =e=
1456    Sum[ isl1 $ (not sameas(isl1,isl)), RESERVESHARESENT(t,isl1,resC,rd) ]
1457  - HVDCRESERVELOSS(t,isl,resC,rd)
1458  + HVDCSENTLOSS(t,isl)
1459    ;
1460   
1461  * Total weight factor = 1 for HVDC energy sent from an island - (6.5.2.25)
1462  HVDCSentEnergyLambdaDefinition(t,isl) $ reserveShareEnabledOverall(t)..
1463    Sum[ bp $ (ord(bp) <= 7),LAMBDAHVDCENERGY(t,isl,bp) ] =e= 1 ;
1464   
1465  * Lambda definition of total HVDC energy flow sent from an island
1466  * (6.5.2.26) - SPD version 11.0
1467  HVDCSentEnergyFlowDefinition(t,isl) $ reserveShareEnabledOverall(t)..
1468    HVDCSENT(t,isl)
1469  =e=
1470    Sum[ bp $ (ord(bp) <= 7), HVDCSentBreakPointMWFlow(t,isl,bp)
1471                            * LAMBDAHVDCENERGY(t,isl,bp) ]
1472    ;
1473   
1474  * Lambda definition of total loss of HVDC energy sent from an island
1475  * (6.5.2.27) - SPD version 11.0
1476  HVDCSentEnergyLossesDefinition(t,isl) $ reserveShareEnabledOverall(t)..
1477    HVDCSENTLOSS(t,isl)
1478  =e=
1479    Sum[ bp $ (ord(bp) <= 7), HVDCSentBreakPointMWLoss(t,isl,bp)
1480                            * LAMBDAHVDCENERGY(t,isl,bp) ]
1481    ;
1482   
1483  * Total weight factor = 1 for HVDC+reserve sent from an island -(6.5.2.28)
1484  HVDCSentReserveLambdaDefinition(t,isl,resC,rd) $ reserveShareEnabled(t,resC)..
1485    Sum[ rsbp, LAMBDAHVDCRESERVE(t,isl,resC,rd,rsbp) ] =e= 1 ;
1486   
1487  * Lambda definition of Reserse + Energy flow on HVDC sent from an island
1488  * (3.4.2.29) - SPD version 11.0
1489  HVDCSentReserveFlowDefinition(t,isl,resC,rd)
1490    $ reserveShareEnabled(t,resC)..
1491    HVDCRESERVESENT(t,isl,resC,rd)
1492  =e=
1493    Sum[ rsbp, HVDCReserveBreakPointMWFlow(t,isl,rsbp)
1494             * LAMBDAHVDCRESERVE(t,isl,resC,rd,rsbp) ]
1495    ;
1496   
1497  * Lambda definition of Reserse + Energy Loss on HVDC sent from an island
1498  * (3.4.2.30) - SPD version 11.0
1499  HVDCSentReserveLossesDefinition(t,isl,resC,rd)
1500    $ reserveShareEnabled(t,resC)..
1501    HVDCRESERVELOSS(t,isl,resC,rd)
1502  =e=
1503    Sum[ rsbp, HVDCReserveBreakPointMWLoss(t,isl,rsbp)
1504             * LAMBDAHVDCRESERVE(t,isl,resC,rd,rsbp) ]
1505    ;
1506   
1507  * Lamda loss model end ---------------------------------------------------------
1508   
1509   
1510  * Calculate Reserve sharing excess penalty -------------------------------------
1511   
1512  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation
1513  * Calculate max effective shared reserve for CE risk received at island (6.5.2.31)
1514  ReserveShareEffective_CE_Calculation(t,isl,resC,riskC)
1515    $ { reserveShareEnabled(t,resC) and ContingentEvents(riskC)
1516    and ( GenRisk(riskC) or ManualRisk(riskC) ) }..
1517    RESERVESHAREEFFECTIVE_CE(t,isl,resC)
1518  =g=
1519    RESERVESHAREEFFECTIVE(t,isl,resC,riskC)
1520    ;
1521   
1522  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation
1523  * Calculate max effective shared reserve for CE risk received at island (6.5.2.31)
1524  ReserveShareEffective_ECE_Calculation(t,isl,resC,riskC)
1525    $ { reserveShareEnabled(t,resC) and ExtendedContingentEvent(riskC)
1526    and ( GenRisk(riskC) or ManualRisk(riskC) ) }..
1527    RESERVESHAREEFFECTIVE_ECE(t,isl,resC)
1528  =g=
1529    RESERVESHAREEFFECTIVE(t,isl,resC,riskC)
1530    ;
1531   
1532  * Constraint to avoid excessive reserve share (6.5.2.31)
1533  ExcessReserveSharePenalty(t) $ reserveShareEnabledOverall(t)..
1534    RESERVESHAREPENALTY(t)
1535  =e=
1536    sum[ isl, 1e-5 * SHAREDNFR(t,isl) ]
1537  + sum[ (isl,resC), 2e-5 * SHAREDRESERVE(t,isl,resC) ]
1538  * Tuong Nguyen modified on 24 Feb 2021 to correct the calculation
1539  *+ sum[ (isl,resC,riskC), 3e-5 * RESERVESHAREEFFECTIVE(t,isl,resC,riskC)]
1540  + sum[ (isl,resC), 3e-5 * RESERVESHAREEFFECTIVE_CE(t,isl,resC)]
1541  + sum[ (isl,resC), 3e-5 * RESERVESHAREEFFECTIVE_ECE(t,isl,resC)]
1542  ;
1543  * Calculate Reserve sharing excess penalty end ---------------------------------
1544   
1545  *======= NMIR - RESERVE SHARING EQUATIONS END ==================================
1546   
1547   
1548   
1549  *======= RESERVE EQUATIONS =====================================================
1550  * 6.5.3.1: Maximum PLSR as a proportion of the block MW
1551  PLSRReserveProportionMaximum(offer(t,o),blk,resC,PLRO)
1552    $ resOfrBlk(offer,blk,resC,PLRO)..
1553    RESERVEBLOCK(Offer,blk,resC,PLRO)
1554  =l=
1555    ResOfrPct(Offer,blk,resC) * GENERATION(Offer)
1556    ;
1557   
1558  * 6.5.3.3 Definition of the reserve offers of different classes and types
1559  ReserveOfferDefinition(offer(t,o),resC,resT)..
1560    RESERVE(offer,resC,resT)
1561  =e=
1562    sum[ blk, RESERVEBLOCK(offer,blk,resC,resT) ]
1563    ;
1564   
1565  * Definition of maximum energy and reserves from each generator (6.5.3.4)
1566  EnergyAndReserveMaximum(offer(t,o),resC)..
1567    GENERATION(offer)
1568  + reserveMaximumFactor(offer,resC)
1569    * sum[ resT $ (not ILRO(resT)), RESERVE(offer,resC,resT) ]
1570  =l=
1571    ReserveGenerationMaximum(offer)
1572    ;
1573   
1574  *======= RESERVE EQUATIONS END =================================================
1575   
1576   
1577   
1578  *======= RESERVE SCARCITY ======================================================
1579  * 6.5.4.2: Total Reserve Shortfall for DCCE risk
1580  HVDCRiskReserveShortFallCalculation(t,isl,resC,HVDCrisk(RiskC))
1581    $ ContingentEvents(riskC)..
1582    RESERVESHORTFALL(t,isl,resC,riskC)
1583  =e=
1584    sum[ blk, RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
1585    ;
1586   
1587  * 6.5.4.2: Total Reserve Shortfall for Manual risk
1588  ManualRiskReserveShortFallCalculation(t,isl,resC,ManualRisk(RiskC))
1589    $ ContingentEvents(riskC)..
1590    RESERVESHORTFALL(t,isl,resC,riskC)
1591  =e=
1592    sum[ blk, RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
1593    ;
1594   
1595  * 6.5.4.2: Total Reserve Shortfall for generation risk unit
1596  GenRiskReserveShortFallCalculation(t,isl,o,resC,GenRisk(RiskC))
1597    $ { ContingentEvents(riskC) and  islandRiskGenerator(t,isl,o)  }..
1598    RESERVESHORTFALLUNIT(t,isl,o,resC,riskC)
1599  =e=
1600    sum[ blk, RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
1601    ;
1602   
1603  * 6.5.4.2: Total Reserve Shortfall for generation unit + HVDC risk
1604  HVDCsecRiskReserveShortFallCalculation(t,isl,o,resC,HVDCsecRisk(RiskC))
1605    $ { ContingentEvents(riskC) and  islandRiskGenerator(t,isl,o)  }..
1606    RESERVESHORTFALLUNIT(t,isl,o,resC,riskC)
1607  =e=
1608    sum[ blk, RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
1609    ;
1610   
1611  * 6.5.4.2: Total Reserve Shortfall for Manual risk + HVDC risk
1612  HVDCsecManualRiskReserveShortFallCalculation(t,isl,resC,HVDCsecRisk(RiskC))
1613    $ ContingentEvents(riskC)..
1614    RESERVESHORTFALL(t,isl,resC,riskC)
1615  =e=
1616    sum[ blk, RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
1617    ;
1618   
1619  * 6.5.4.2: Total Reserve Shortfall for risk group
1620  RiskGroupReserveShortFallCalculation(t,isl,rg,resC,GenRisk(RiskC))
1621    $ { ContingentEvents(riskC) and islandRiskGroup(t,isl,rg,RiskC)}..
1622    RESERVESHORTFALLGROUP(t,isl,rg,resC,riskC)
1623  =e=
1624    sum[ blk, RESERVESHORTFALLGROUPBLK(t,isl,rg,resC,riskC,blk) ]
1625    ;
1626   
1627  *======= RESERVE SCARCITY END ==================================================
1628   
1629   
1630   
1631  *======= RISK AND RESERVE BALANCE EQUATIONS ====================================
1632   
1633  * 6.5.5.1: Calculate total island cleared reserve
1634  IslandReserveCalculation(t,isl,resC)..
1635    ISLANDRESERVE(t,isl,resC)
1636  =l=
1637    Sum[ (o,resT) $ { offer(t,o) and offerIsland(t,o,isl) }
1638                  , RESERVE(t,o,resC,resT)
1639       ]
1640    ;
1641   
1642  * 6.5.5.2 & 6.5.5.3: Matching of reserve supply and demand
1643  SupplyDemandReserveRequirement(t,isl,resC,riskC) $ useReserveModel..
1644    ISLANDRISK(t,isl,resC,riskC)
1645  - DEFICITRESERVE_CE(t,isl,resC)   $ ContingentEvents(riskC)
1646  - DEFICITRESERVE_ECE(t,isl,resC)  $ ExtendedContingentEvent(riskC)
1647  =l=
1648    ISLANDRESERVE(t,isl,resC)
1649    ;
1650   
1651  *======= RISK AND RESERVE BALANCE EQUATIONS END ================================
1652   
1653   
1654   
1655  *======= SECURITY EQUATIONS ====================================================
1656   
1657  * 6.6.1.5 Branch security constraint with LE sense
1658  BranchSecurityConstraintLE(t,brCstr)
1659    $ (BranchConstraintSense(t,brCstr) = -1)..
1660    sum[ br $ ACbranch(t,br)
1661       , branchCstrFactors(t,brCstr,br) * ACBRANCHFLOW(t,br) ]
1662  + sum[ br $ HVDClink(t,br)
1663       , branchCstrFactors(t,brCstr,br) * HVDCLINKFLOW(t,br) ]
1664  - SURPLUSBRANCHSECURITYCONSTRAINT(t,brCstr)
1665  =l=
1666    BranchConstraintLimit(t,brCstr)
1667    ;
1668   
1669  * 6.6.1.5 Branch security constraint with GE sense
1670  BranchSecurityConstraintGE(t,brCstr)
1671    $ (BranchConstraintSense(t,brCstr) = 1)..
1672    sum[ br $ ACbranch(t,br)
1673       , branchCstrFactors(t,brCstr,br) * ACBRANCHFLOW(t,br) ]
1674  + sum[ br $ HVDClink(t,br)
1675       , branchCstrFactors(t,brCstr,br) * HVDCLINKFLOW(t,br) ]
1676  + DEFICITBRANCHSECURITYCONSTRAINT(t,brCstr)
1677  =g=
1678    BranchConstraintLimit(t,brCstr)
1679    ;
1680   
1681  * 6.6.1.5 Branch security constraint with EQ sense
1682  BranchSecurityConstraintEQ(t,brCstr)
1683    $ (BranchConstraintSense(t,brCstr) = 0)..
1684    sum[ br $ ACbranch(t,br)
1685       , branchCstrFactors(t,brCstr,br) * ACBRANCHFLOW(t,br) ]
1686  + sum[ br $ HVDClink(t,br)
1687       , branchCstrFactors(t,brCstr,br) * HVDCLINKFLOW(t,br) ]
1688  + DEFICITBRANCHSECURITYCONSTRAINT(t,brCstr)
1689  - SURPLUSBRANCHSECURITYCONSTRAINT(t,brCstr)
1690  =e=
1691    BranchConstraintLimit(t,brCstr)
1692    ;
1693   
1694   
1695   
1696  * Market node security constraint with LE sense (3.5.1.7a)
1697  MNodeSecurityConstraintLE(t,MnodeCstr)
1698    $ (MNodeConstraintSense(t,MnodeCstr) = -1)..
1699    sum[ o $ posEnrgOfr(t,o)
1700         , MNCstrEnrgFactors(t,MnodeCstr,o)
1701         * GENERATION(t,o)
1702       ]
1703  + sum[ (o,resC,resT) $ offer(t,o)
1704         , MNCnstrResrvFactors(t,MnodeCstr,o,resC,resT)
1705         * RESERVE(t,o,resC,resT)
1706       ]
1707  + sum[ bd $ Bid(t,bd)
1708         , mnCnstrEnrgBidFactors(t,MnodeCstr,bd)
1709         * PURCHASE(t,bd)
1710       ]
1711  - SURPLUSMNODECONSTRAINT(t,MnodeCstr)
1712  =l=
1713    MNodeConstraintLimit(t,MnodeCstr)
1714    ;
1715   
1716  * Market node security constraint with GE sense (3.5.1.7b)
1717  MNodeSecurityConstraintGE(t,MnodeCstr)
1718    $ (MNodeConstraintSense(t,MnodeCstr) = 1)..
1719    sum[ o $ posEnrgOfr(t,o)
1720         , MNCstrEnrgFactors(t,MnodeCstr,o)
1721         * GENERATION(t,o)
1722       ]
1723  + sum[ (o,resC,resT) $ offer(t,o)
1724         , MNCnstrResrvFactors(t,MnodeCstr,o,resC,resT)
1725         * RESERVE(t,o,resC,resT)
1726       ]
1727  + sum[ bd $ Bid(t,bd)
1728         , mnCnstrEnrgBidFactors(t,MnodeCstr,bd)
1729         * PURCHASE(t,bd)
1730       ]
1731  + DEFICITMNODECONSTRAINT(t,MnodeCstr)
1732  =g=
1733    MNodeConstraintLimit(t,MnodeCstr)
1734    ;
1735   
1736  * Market node security constraint with EQ sense (3.5.1.7c)
1737  MNodeSecurityConstraintEQ(t,MnodeCstr)
1738    $ (MNodeConstraintSense(t,MnodeCstr) = 0)..
1739    sum[ o $ posEnrgOfr(t,o)
1740         , MNCstrEnrgFactors(t,MnodeCstr,o)
1741         * GENERATION(t,o)
1742       ]
1743  + sum[ (o,resC,resT) $ offer(t,o)
1744         , MNCnstrResrvFactors(t,MnodeCstr,o,resC,resT)
1745         * RESERVE(t,o,resC,resT)
1746       ]
1747  + sum[ bd $ Bid(t,bd)
1748         , mnCnstrEnrgBidFactors(t,MnodeCstr,bd)
1749         * PURCHASE(t,bd)
1750       ]
1751  + DEFICITMNODECONSTRAINT(t,MnodeCstr)
1752  - SURPLUSMNODECONSTRAINT(t,MnodeCstr)
1753  =e=
1754    MNodeConstraintLimit(t,MnodeCstr)
1755    ;
1756   
1757  *======= SECURITY EQUATIONS END ================================================
1758   
1759   
1760  * Model declarations
1761  Model vSPD /
1762  * Objective function
1763    ObjectiveFunction
1764  * Offer and purchase definitions
1765    GenerationOfferDefintion, DemBidDefintion
1766    EnergyScarcityDefinition,
1767    GenerationRampUp, GenerationRampDown
1768  * Network
1769    HVDClinkMaximumFlow, HVDClinkLossDefinition
1770    HVDClinkFlowDefinition, LambdaDefinition
1771    ACnodeNetInjectionDefinition1
1772    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
1773    ACBranchFlowDefinition, LinearLoadFlow
1774    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
1775    ACBranchLossCalculation, ACDirectedBranchLossDefinition
1776  * Risk
1777    HVDCIslandRiskCalculation, HVDCRecCalculation
1778    GenIslandRiskCalculation, GenIslandRiskCalculation_1
1779    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
1780    ManualIslandRiskCalculation
1781  * Reserve
1782    PLSRReserveProportionMaximum, ReserveOfferDefinition
1783    EnergyAndReserveMaximum
1784  * Reserve scarcity/shortfall
1785    HVDCRiskReserveShortFallCalculation
1786    ManualRiskReserveShortFallCalculation
1787    GenRiskReserveShortFallCalculation
1788    HVDCsecRiskReserveShortFallCalculation
1789    HVDCsecManualRiskReserveShortFallCalculation
1790    RiskGroupReserveShortFallCalculation
1791  * Matching of reserve requirement and availability
1792    SupplyDemandReserveRequirement, IslandReserveCalculation
1793  * Risk Offset calculation
1794    RiskOffsetCalculation_DCCE
1795    RiskOffsetCalculation_DCECE
1796  * Island risk definitions
1797  * Include HVDC secondary risk constraints
1798    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
1799    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
1800  * Branch security constraints
1801    BranchSecurityConstraintLE
1802    BranchSecurityConstraintGE
1803    BranchSecurityConstraintEQ
1804  * Market node security constraints
1805    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE
1806    MNodeSecurityConstraintEQ
1807  * ViolationCost
1808    SystemCostDefinition, SystemBenefitDefinition
1809    SystemPenaltyCostDefinition, TotalViolationCostDefinition
1810    TotalScarcityCostDefinition
1811    / ;
1812   
1813  Model vSPD_NMIR /
1814  * Objective function
1815    ObjectiveFunction
1816  * Offer and purchase definitions
1817    GenerationOfferDefintion, DemBidDefintion
1818    EnergyScarcityDefinition,
1819    GenerationRampUp, GenerationRampDown, GenerationChangeUpDown
1820  * Network
1821    HVDClinkMaximumFlow, HVDClinkLossDefinition
1822    HVDClinkFlowDefinition, LambdaDefinition
1823    ACnodeNetInjectionDefinition1
1824    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
1825    ACBranchFlowDefinition, LinearLoadFlow
1826    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
1827    ACBranchLossCalculation, ACDirectedBranchLossDefinition
1828  * Risk
1829    RiskOffsetCalculation_DCCE, RiskOffsetCalculation_DCECE
1830    HVDCIslandRiskCalculation, HVDCRecCalculation, ManualIslandRiskCalculation
1831    GenIslandRiskCalculation, GenIslandRiskCalculation_1
1832    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
1833    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
1834    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
1835  * Reserve
1836    PLSRReserveProportionMaximum, ReserveOfferDefinition
1837    EnergyAndReserveMaximum
1838  * Reserve scarcity/shortfall
1839    HVDCRiskReserveShortFallCalculation
1840    ManualRiskReserveShortFallCalculation
1841    GenRiskReserveShortFallCalculation
1842    HVDCsecRiskReserveShortFallCalculation
1843    HVDCsecManualRiskReserveShortFallCalculation
1844    RiskGroupReserveShortFallCalculation
1845  * Matching of reserve requirement and availability
1846    SupplyDemandReserveRequirement, IslandReserveCalculation
1847  * Branch security constraints
1848    BranchSecurityConstraintLE
1849    BranchSecurityConstraintGE
1850    BranchSecurityConstraintEQ
1851  * Market node security constraints
1852    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE, MNodeSecurityConstraintEQ
1853  * ViolationCost
1854    SystemCostDefinition, SystemBenefitDefinition
1855    SystemPenaltyCostDefinition, TotalViolationCostDefinition
1856    TotalScarcityCostDefinition
1857  * General NMIR equations
1858    EffectiveReserveShareCalculation
1859    SharedReserveLimitByClearedReserve
1860    BothClearedAndFreeReserveCanBeShared
1861    ReverseReserveShareLimitByHVDCControlBand
1862    ReserveShareSentLimitByHVDCControlBand
1863    FwdReserveShareSentLimitByHVDCCapacity
1864    ReverseReserveOnlyToEnergySendingIsland
1865    ForwardReserveOnlyToEnergyReceivingIsland
1866    ReverseReserveLimitInReserveZone
1867    ZeroReserveInNoReserveZone
1868    OnlyOneActiveHVDCZoneForEachReserveClass
1869    ZeroSentHVDCFlowForNonSendingIsland
1870    RoundPowerZoneSentHVDCUpperLimit
1871    HVDCSendingIslandDefinition
1872    OnlyOneSendingIslandExists
1873    HVDCSentCalculation
1874    ExcessReserveSharePenalty
1875    ReserveShareEffective_CE_Calculation
1876    ReserveShareEffective_ECE_Calculation
1877  * Lamda loss model NMIR
1878    HVDCFlowAccountedForForwardReserve
1879    ForwardReserveReceivedAtHVDCReceivingIsland
1880    HVDCFlowAccountedForReverseReserve
1881    ReverseReserveReceivedAtHVDCSendingIsland
1882    HVDCSentEnergyLambdaDefinition
1883    HVDCSentEnergyFlowDefinition
1884    HVDCSentEnergyLossesDefinition
1885    HVDCSentReserveLambdaDefinition
1886    HVDCSentReserveFlowDefinition
1887    HVDCSentReserveLossesDefinition
1888    / ;
1889   
1890  Model vSPD_MIP /
1891  * Objective function
1892    ObjectiveFunction
1893  * Offer and purchase definitions
1894    GenerationOfferDefintion, DemBidDefintion
1895    EnergyScarcityDefinition,
1896    GenerationRampUp, GenerationRampDown, GenerationChangeUpDown
1897  * Network
1898    HVDClinkMaximumFlow, HVDClinkLossDefinition
1899    HVDClinkFlowDefinition, LambdaDefinition
1900    ACnodeNetInjectionDefinition1
1901    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
1902    ACBranchFlowDefinition, LinearLoadFlow
1903    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
1904    ACBranchLossCalculation, ACDirectedBranchLossDefinition
1905    ACDirectedBranchFlowIntegerDefinition1, ACDirectedBranchFlowIntegerDefinition2
1906    LambdaIntegerDefinition1, LambdaIntegerDefinition2
1907  * Risk
1908    RiskOffsetCalculation_DCCE, RiskOffsetCalculation_DCECE
1909    HVDCIslandRiskCalculation, HVDCRecCalculation, ManualIslandRiskCalculation
1910    GenIslandRiskCalculation, GenIslandRiskCalculation_1
1911    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
1912    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
1913    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
1914  * Reserve
1915    PLSRReserveProportionMaximum, ReserveOfferDefinition
1916    EnergyAndReserveMaximum
1917  * Reserve scarcity/shortfall
1918    HVDCRiskReserveShortFallCalculation
1919    ManualRiskReserveShortFallCalculation
1920    GenRiskReserveShortFallCalculation
1921    HVDCsecRiskReserveShortFallCalculation
1922    HVDCsecManualRiskReserveShortFallCalculation
1923    RiskGroupReserveShortFallCalculation
1924  * Matching of reserve requirement and availability
1925    SupplyDemandReserveRequirement, IslandReserveCalculation
1926  * Branch security constraints
1927    BranchSecurityConstraintLE
1928    BranchSecurityConstraintGE
1929    BranchSecurityConstraintEQ
1930  * Market node security constraints
1931    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE, MNodeSecurityConstraintEQ
1932  * ViolationCost
1933    SystemCostDefinition, SystemBenefitDefinition
1934    SystemPenaltyCostDefinition, TotalViolationCostDefinition
1935    TotalScarcityCostDefinition
1936  * Set of integer constraints on the HVDC link to incorporate the allowance of HVDC roundpower
1937    HVDClinkFlowIntegerDefinition1, HVDClinkFlowIntegerDefinition2
1938    HVDClinkFlowIntegerDefinition3, HVDClinkFlowIntegerDefinition4
1939  * General NMIR equations
1940    EffectiveReserveShareCalculation
1941    SharedReserveLimitByClearedReserve
1942    BothClearedAndFreeReserveCanBeShared
1943    ReverseReserveShareLimitByHVDCControlBand
1944    ReserveShareSentLimitByHVDCControlBand
1945    FwdReserveShareSentLimitByHVDCCapacity
1946    ReverseReserveOnlyToEnergySendingIsland
1947    ForwardReserveOnlyToEnergyReceivingIsland
1948    ReverseReserveLimitInReserveZone
1949    ZeroReserveInNoReserveZone
1950    OnlyOneActiveHVDCZoneForEachReserveClass
1951    ZeroSentHVDCFlowForNonSendingIsland
1952    RoundPowerZoneSentHVDCUpperLimit
1953    HVDCSendingIslandDefinition
1954    OnlyOneSendingIslandExists
1955    HVDCSentCalculation
1956    ExcessReserveSharePenalty
1957    ReserveShareEffective_CE_Calculation
1958    ReserveShareEffective_ECE_Calculation
1959  * Lamda loss model NMIR
1960    HVDCFlowAccountedForForwardReserve
1961    ForwardReserveReceivedAtHVDCReceivingIsland
1962    HVDCFlowAccountedForReverseReserve
1963    ReverseReserveReceivedAtHVDCSendingIsland
1964    HVDCSentEnergyLambdaDefinition
1965    HVDCSentEnergyFlowDefinition
1966    HVDCSentEnergyLossesDefinition
1967    HVDCSentReserveLambdaDefinition
1968    HVDCSentReserveFlowDefinition
1969    HVDCSentReserveLossesDefinition
1970    / ;
1971   
1972  Model vSPD_BranchFlowMIP /
1973  * Objective function
1974    ObjectiveFunction
1975  * Offer and purchase definitions
1976    GenerationOfferDefintion, DemBidDefintion
1977    EnergyScarcityDefinition,
1978    GenerationRampUp, GenerationRampDown, GenerationChangeUpDown
1979  * Network
1980    HVDClinkMaximumFlow, HVDClinkLossDefinition
1981    HVDClinkFlowDefinition, LambdaDefinition
1982    ACnodeNetInjectionDefinition1
1983    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
1984    ACBranchFlowDefinition, LinearLoadFlow
1985    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
1986    ACBranchLossCalculation, ACDirectedBranchLossDefinition
1987    ACDirectedBranchFlowIntegerDefinition1, ACDirectedBranchFlowIntegerDefinition2
1988    LambdaIntegerDefinition1, LambdaIntegerDefinition2
1989  * Risk
1990    RiskOffsetCalculation_DCCE, RiskOffsetCalculation_DCECE
1991    HVDCIslandRiskCalculation, HVDCRecCalculation, ManualIslandRiskCalculation
1992    GenIslandRiskCalculation, GenIslandRiskCalculation_1
1993    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
1994    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
1995    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
1996  * Reserve
1997    PLSRReserveProportionMaximum, ReserveOfferDefinition
1998    EnergyAndReserveMaximum
1999  * Reserve scarcity/shortfall
2000    HVDCRiskReserveShortFallCalculation
2001    ManualRiskReserveShortFallCalculation
2002    GenRiskReserveShortFallCalculation
2003    HVDCsecRiskReserveShortFallCalculation
2004    HVDCsecManualRiskReserveShortFallCalculation
2005    RiskGroupReserveShortFallCalculation
2006  * Matching of reserve requirement and availability
2007    SupplyDemandReserveRequirement, IslandReserveCalculation
2008  * Branch security constraints
2009    BranchSecurityConstraintLE
2010    BranchSecurityConstraintGE
2011    BranchSecurityConstraintEQ
2012  * Market node security constraints
2013    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE, MNodeSecurityConstraintEQ
2014  * ViolationCost
2015    SystemCostDefinition, SystemBenefitDefinition
2016    SystemPenaltyCostDefinition, TotalViolationCostDefinition
2017    TotalScarcityCostDefinition
2018  * Set of intrger constraints on the HVDC link to incorporate the allowance of HVDC roundpower
2019    HVDClinkFlowIntegerDefinition1, HVDClinkFlowIntegerDefinition2
2020    HVDClinkFlowIntegerDefinition3, HVDClinkFlowIntegerDefinition4
2021  * General NMIR equations
2022    EffectiveReserveShareCalculation
2023    SharedReserveLimitByClearedReserve
2024    BothClearedAndFreeReserveCanBeShared
2025    ReverseReserveShareLimitByHVDCControlBand
2026    ReserveShareSentLimitByHVDCControlBand
2027    FwdReserveShareSentLimitByHVDCCapacity
2028    ReverseReserveOnlyToEnergySendingIsland
2029    ForwardReserveOnlyToEnergyReceivingIsland
2030    ReverseReserveLimitInReserveZone
2031    ZeroReserveInNoReserveZone
2032    OnlyOneActiveHVDCZoneForEachReserveClass
2033    ZeroSentHVDCFlowForNonSendingIsland
2034    RoundPowerZoneSentHVDCUpperLimit
2035    HVDCSendingIslandDefinition
2036    OnlyOneSendingIslandExists
2037    HVDCSentCalculation
2038    ExcessReserveSharePenalty
2039    ReserveShareEffective_CE_Calculation
2040    ReserveShareEffective_ECE_Calculation
2041  * Lamda loss model NMIR
2042    HVDCFlowAccountedForForwardReserve
2043    ForwardReserveReceivedAtHVDCReceivingIsland
2044    HVDCFlowAccountedForReverseReserve
2045    ReverseReserveReceivedAtHVDCSendingIsland
2046    HVDCSentEnergyLambdaDefinition
2047    HVDCSentEnergyFlowDefinition
2048    HVDCSentEnergyLossesDefinition
2049    HVDCSentReserveLambdaDefinition
2050    HVDCSentReserveFlowDefinition
2051    HVDCSentReserveLossesDefinition
2052    / ;
2053   
2054  Model vSPD_FTR /
2055  * Objective function
2056    ObjectiveFunction
2057  * Offer and purchase definitions
2058    GenerationOfferDefintion
2059  * Network
2060    HVDClinkMaximumFlow
2061    ACNodeNetInjectionDefinition1, ACNodeNetInjectionDefinition2
2062    ACBranchMaximumFlow, ACBranchFlowDefinition, LinearLoadFlow
2063  * Branch security constraints
2064    BranchSecurityConstraintLE
2065    BranchSecurityConstraintGE
2066    BranchSecurityConstraintEQ
2067  * ViolationCost
2068    SystemCostDefinition, SystemBenefitDefinition
2069    SystemPenaltyCostDefinition, TotalViolationCostDefinition
2070    TotalScarcityCostDefinition
2071    / ;


COMPILATION TIME     =        0.016 SECONDS      3 MB  36.2.0 r433180e WEX-WEI
GAMS 36.2.0  r433180e Released Sep  3, 2021 WEX-WEI x86 64bit/MS Windows - 03/09/23 15:26:55 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


EXECUTION TIME       =        0.000 SECONDS      3 MB  36.2.0 r433180e WEX-WEI


USER: Small MUD-5 User License                       G220916|0002CO-GEN
      Electricity Authority - Te Mana Hiko,                  DC5643-S10


**** FILE SUMMARY

Input      C:\vSPD\ElectricityAuthority\Programs\vSPDmodel.gms
Output     C:\vSPD\ElectricityAuthority\Programs\vSPDmodel.lst
