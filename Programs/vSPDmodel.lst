GAMS 42.5.0  cf11b917 Mar 30, 2023          WEX-WEI x86 64bit/MS Windows - 07/28/23 13:59:01 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  *=====================================================================================
   2  * Name:                 vSPDmodel.gms
   3  * Function:             Mathematical formulation - based on the SPD formulation v9.0
   4  * Developed by:         Electricity Authority, New Zealand
   5  * Source:               https://github.com/ElectricityAuthority/vSPD
   6  *                       http://www.emi.ea.govt.nz/Tools/vSPD
   7  * Contact:              Forum: http://www.emi.ea.govt.nz/forum/
   8  *                       Email: emi@ea.govt.nz
   9  * Modified on:          1 Oct 2019
  10  *                       New feature added: New wind offer arrangements
  11  * Modified on:          11 Dec 2020
  12  *                       Branch Reverse Rating (this feature is suspended until further notice)
  13  * Modified on:          24 Feb 2021
  14  *                       Correcting the excess reserve sharing penalty
  15  *                       by adding RESERVESHAREEFFECTIVE_CE and ECE variables
  16  * Last modified on:     18 March 2022
  17  *                       Rename/remove primary sets to tidy up the code and
  18  *                       Assign value for constant sets such as ils, blk,resC, etc...
  19  *
  20  *=====================================================================================
  21   
      Directory of code sections in vSPDmodel.gms:
        1. Declare sets and parameters for all symbols to be loaded from daily GDX files
        2. Declare additional sets and parameters used throughout the model
        3. Declare model variables and constraints, and initialise constraints
       
      Aliases to be aware of:
        dt = dt1                                  tp = tp1,tp2
        isl = isl1, isl2                          b = b1, frB, toB
        n = n1, n2                                o = o1, o2
        bd = bd1, bd2
        br = br1
  35   
  36  * Allow empty data set declaration
  38   
  39  *===================================================================================
  40  * 1. Declare sets and parameters for all symbols to be loaded from daily GDX files
  41  *===================================================================================
  42  * Hard-coded sets.
  43  Sets
  44    isl(*)              'Islands'                                                 / NI, SI /
  45    blk(*)              'Trade block definitions used for the offer and bids'     / t1*t20 /
  46    los(*)              'Loss segments available for loss modelling'              / ls1*ls13 /
  47    fd(*)               'Directional flow definition used in the SPD formulation' / forward, backward /
  48    resC(*)             'Definition of fast and sustained instantaneous reserve'  / FIR, SIR /
  49    riskC(*)            'Different risks that could set the reserve requirements' / genRisk, DCCE, DCECE, manual, genRiskECE, manualECE, HVDCsecRisk, HVDCsecRiskECE /
  50    resT(*)             'Definition of reserve types (PLSR, TWDR, ILR)'           / PLRO, TWRO, ILRO /
  51   
  52    bidofrCmpnt(*)      'Components of the bid and offer'                 / limitMW, price, plsrPct /
  53    offerPar(*)         'The various parameters required for each offer'  / initialMW, rampUpRate, rampDnRate, resrvGenMax, isIG, FKbandMW, isPriceResponse, potentialMW  /
  54    riskPar(*)          'Different risk parameters'                       / freeReserve, adjustFactor, HVDCRampUp /
  55    brPar(*)            'Branch parameter specified'                      / resistance, susceptance, fixedLosses, numLossTranches /
  56    CstrRHS(*)          'Constraint RHS definition'                       / cnstrSense, cnstrLimit /
  57   
  58    z(*)                'Defined reverse reserve sharing zone for HVDC sent flow: RP -> round power zone, NR -> no reverse zone, RZ -> reverse zone' /RP, NR, RZ/
  59   
  60    testcases(*)        'Test Cases for RTP 4'                            /'MSS_21012023030850151_0X','MSS_21302023030830146_0X','MSS_21322023030800133_0X','MSS_61012023030935374_0X'/
  61    ;
  62   
  63  * Dynamic sets that are defined by /loaded from gdx inputs
  64  Sets
  65    caseName(*)         'Case name used to create the GDX file'
  66    ca(*)               'Case ID associated with data'
  67    dt(*)               'Date and time for the trade periods'
  68    tp(*)               'Trade periods for which input data is defined'
  69    b(*)                'Bus definitions for all trading periods'
  70    n(*)                'Node definitions for all trading periods'
  71    o(*)                'Offers for all trading periods'
  72    bd(*)               'Bids for all trading periods'
  73    trdr(*)             'Traders defined for all trading periods'
  74    br(*)               'Branch definition for all trading periods'
  75    brCstr(*)           'Branch constraint definitions for all trading periods'
  76    MnodeCstr(*)        'Market node constraint definitions for all trading periods'
  77    rg(*)               'Set representing a collection of generation and reserve offers treated as a group risk'
  78    rundt(*)            'Run datetime of the case for reporting'
  79    ;
  80   
  81  * Aliases
  82  Alias (dt,dt1,dt2),       (tp,tp1,tp2),     (isl,isl1,isl2),  (b,b1,frB,toB)
  83        (n,n1,n2),          (o,o1,o2),        (bd,bd2,bd1),     (br,br1)
  84        (fd,fd1,rd,rd1),    (z,z1,rrz,rrz1),  (rg,rg1),         (blk,blk1,blk2)
  85        (los,los1,bp,bp1,rsbp,rsbp1)
  86    ;
  87   
  88  Sets
  89  * 16 multi-dimensional sets, subsets, and mapping sets - membership is populated via loading from GDX file in vSPDsolve.gms
  90    case2name(ca,caseName<)                'Mapping caseID to CaseNanme'
  91    case2dt(ca<,dt)                        'Mapping caseID to datetime'
  92    case2rundt(ca<,rundt<)                 'Mapping caseID to rundatetime'
  93    dt2tp(dt,tp)                           'Mapping of dateTime set to the tradePeriod set'
  94    node(ca,dt,n<)                         'Node definition for the different trading periods'
  95    bus(ca,dt,b<)                          'Bus definition for the different trading periods'
  96    node2node(ca,dt,n,n1)                  'Node to node mapping used for price and energy shortfall transfer'
  97    offerNode(ca,dt,o<,n)                  'Offers and the corresponding offer node for the different trading periods'
  98    offerTrader(ca,dt,o<,trdr<)            'Offers and the corresponding trader for the different trading periods'
  99    bidNode(ca,dt,bd<,n)                   'Bids and the corresponding node for the different trading periods'
 100    bidTrader(ca,dt,bd<,trdr<)             'Bids and the corresponding trader for the different trading periods'
 101    busIsland(ca,dt,b,isl)                 'Bus island mapping for the different trade periods'
 102    nodeBus(ca,dt,n,b)                     'Node bus mapping for the different trading periods'
 103    branchDefn(ca,dt,br<,frB,toB)           'Branch definition for the different trading periods'
 104    riskGenerator(ca,dt,o)                 'Set of generators (offers) that can set the risk in the different trading periods'
 105    primarySecondaryOffer(ca,dt,o,o1)      'Primary-secondary offer mapping for the different trading periods - in use from 01 May 2012'
 106    dispatchableBid(ca,dt,bd)              'Set of dispatchable bids - effective date 20 May 2014'
 107    discreteModeBid(ca,dt,bd)              'Set of dispatchable discrete bids - Start From RTP phase 4 to support Dispatch Lite'
 108    differenceBid(ca,dt,bd)                'Set of difference bids - applied to PRSS mostly'
 109    dispatchableEnrgOffer(ca,dt,o)         'Set of dispatchable energy offer - Start From RTP phase 4 to support Dispatch Lite'
 110    nodeoutagebranch(ca,dt,n,br)           'Mappinging of branch and node where branch outage may affect the capacity to supply to the node'
 111    ;
 112   
 113   
 114  Parameters
 115  * 6 scalars - values are loaded from GDX file in vSPDsolve.gms
 116    caseGdxDate(ca,*)                                 'day, month, year of trade date for each caseID'
 117    gdxDate(*)                                        'day, month, year of trade date'
 118    intervalDuration(ca,dt)                           'Length of the trading period in minutes (e.g. 30)'
 119    caseIntervalDuration(ca)                          'Length of the trading period in minutes (e.g. 30) for each caseID'
 120   
 121  * 49 parameters - values are loaded from GDX file in vSPDsolve.gms
 122  * Offer data
 123    offerParameter(ca,dt,o,offerPar)                     'Initial MW for each offer for the different trading periods'
 124    energyOffer(ca,dt,o,blk,bidofrCmpnt)                 'Energy offers for the different trading periods'
 125    fastPLSRoffer(ca,dt,o,blk,bidofrCmpnt)               'Fast (6s) PLSR offers for the different trading periods'
 126    sustainedPLSRoffer(ca,dt,o,blk,bidofrCmpnt)          'Sustained (60s) PLSR offers for the different trading periods'
 127    fastTWDRoffer(ca,dt,o,blk,bidofrCmpnt)               'Fast (6s) TWDR offers for the different trading periods'
 128    sustainedTWDRoffer(ca,dt,o,blk,bidofrCmpnt)          'Sustained (60s) TWDR offers for the different trading periods'
 129    fastILRoffer(ca,dt,o,blk,bidofrCmpnt)                'Fast (6s) ILR offers for the different trading periods'
 130    sustainedILRoffer(ca,dt,o,blk,bidofrCmpnt)           'Sustained (60s) ILR offers for the different trading periods'
 131   
 132  * Bid data
 133    energyBid(ca,dt,bd,blk,bidofrCmpnt)                  'Energy bids for the different trading periods'
 134  * Demand data
 135    nodeDemand(ca,dt,n)                                  'MW demand at each node for all trading periods'
 136   
 137  * Network data
 138    refNode(ca,dt,n)                                     'Reference nodes for the different trading periods'
 139    HVDCBranch(ca,dt,br)                                 'HVDC branch indicator for the different trading periods'
 140    branchParameter(ca,dt,br,brPar)                      'Branch resistance, reactance, fixed losses and number of loss tranches for the different time periods'
 141    branchCapacity(ca,dt,br,fd)                          'Branch directed capacity for the different trading periods in MW (Branch Reverse Ratings)'
 142    branchOpenStatus(ca,dt,br)                           'Branch open status for the different trading periods, 1 = Open'
 143    nodeBusAllocationFactor(ca,dt,n,b)                   'Allocation factor of market node quantities to bus for the different trading periods'
 144    busElectricalIsland(ca,dt,b)                         'Electrical island status of each bus for the different trading periods (0 = Dead)'
 145   
 146  * Risk/Reserve data
 147    riskParameter(ca,dt,isl,resC,riskC,riskPar)          'Risk parameters for the different trading periods (From RMT)'
 148    islandMinimumRisk(ca,dt,isl,resC,riskC)              'Minimum MW risk level for each island for each reserve class applied to risk classes: manual, manualECE, HVDCsecRisk and HVDCsecRiskECE'
 149    HVDCSecRiskEnabled(ca,dt,isl,riskC)                  'Flag indicating if the HVDC secondary risk is enabled (1 = Yes)'
 150    HVDCSecRiskSubtractor(ca,dt,isl)                     'Ramp up capability on the HVDC pole that is not the secondary risk'
 151    reserveMaximumFactor(ca,dt,o,resC)                   'Factor to adjust the maximum reserve of the different classes for the different offers'
 152   
 153  * Branch constraint data
 154    branchCstrFactors(ca,dt,brCstr<,br)                   'Branch security constraint factors (sensitivities) for the current trading period'
 155    branchCstrRHS(ca,dt,brCstr,CstrRHS)                  'Branch constraint sense and limit for the different trading periods'
 156   
 157  * Market node constraint data
 158    mnCstrEnrgFactors(ca,dt,MnodeCstr<,o)                 'Market node energy offer constraint factors for the current trading period'
 159    mnCnstrResrvFactors(ca,dt,MnodeCstr,o,resC,resT)     'Market node reserve offer constraint factors for the current trading period'
 160    mnCnstrEnrgBidFactors(ca,dt,MnodeCstr,bd)            'Market node energy bid constraint factors for the different trading periods'
 161    mnCnstrResrvBidFactors(ca,dt,MnodeCstr,bd,resC)      'Market node IL reserve bid constraint factors for the different trading periods - currently not used'
 162    mnCnstrRHS(ca,dt,MnodeCstr,CstrRHS)                  'Market node constraint sense and limit for the different trading periods'
 163   
 164   
 165  * Real Time Pricing - Inputs
 166    studyMode(ca,dt)                                                     'RTD~101, RTDP~201, PRSS~130, NRSS~132, PRSL~131, NRSL~133, WDS~120'
 167    caseStudyMode(ca)                                                    'Study mode applied in a CaseID'
 168    useGenInitialMW(ca,dt)                                               'Flag that if set to 1 indicates that for a schedule that is solving multiple intervals in sequential mode'
 169    runEnrgShortfallTransfer(ca,dt)                                      'Flag that if set to 1 will enable shortfall transfer- post processing'
 170    runPriceTransfer(ca,dt)                                              'Flag that if set to 1 will enable price transfer - post processing.'
 171    replaceSurplusPrice(ca,dt)                                           'Flag that if set to 1 will enable sutplus price replacement - post processing'
 172    rtdIgIncreaseLimit(ca,dt)                                            'For price responsive Intermittent Generation (IG) the 5-minute ramp-up is capped using this parameter'
 173    useActualLoad(ca,dt)                                                 'Flag that if set to 0, initial estimated load [conformingfactor/noncomformingload] is used as initial load '
 174    dontScaleNegativeLoad(ca,dt)                                         'Flag that if set to 1 --> negative load will be fixed in RTD load calculation'
 175    inputInitialLoad(ca,dt,n)                                            'This value represents actual load MW for RTD schedule input'
 176    conformingFactor(ca,dt,n)                                            'Initial estimated load for conforming load'
 177    nonConformingLoad(ca,dt,n)                                           'Initial estimated load for non-conforming load'
 178    loadIsOverride(ca,dt,n)                                              'Flag if set to 1 --> InputInitialLoad will be fixed as node demand'
 179    loadIsBad(ca,dt,n)                                                   'Flag if set to 1 --> InitialLoad will be replaced by Estimated Initial Load'
 180    loadIsNCL(ca,dt,n)                                                   'Flag if set to 1 --> non-conforming load --> will be fixed in RTD load calculation'
 181    dispatchedLoad(ca,dt,n)                                              'Initial dispatched lite demand'
 182    dispatchedGeneration(ca,dt,n)                                        'Initial dispatched lite generation'
 183   
 184    maxLoad(ca,dt,n)                                                     'Pnode maximum load'
 185    instructedLoadShed(ca,dt,n)                                          'Instructed load shedding applied to RTDP and should be ignore by all other schedules'
 186    instructedShedActive(ca,dt,n)                                        'Flag if Instructed load shedding is active; applied to RTDP and should be ignore by all other schedules'
 187    islandMWIPS(ca,dt,isl)                                               'Island total generation at the start of RTD run'
 188    islandPDS(ca,dt,isl)                                                 'Island pre-solve deviation - used to adjust RTD node demand'
 189    islandLosses(ca,dt,isl)                                              'Island estimated losss - used to adjust RTD mode demand'
 190    enrgShortfallRemovalMargin(ca,dt)                                    'This small margin is added to the shortfall removed amount in order to prevent any associated binding ACLine constraint'
 191    maxSolveLoops(ca,dt)                                                 'The maximum number of times that the Energy Shortfall Check will re-solve the model'
 192   
 193   
 194    energyScarcityEnabled(ca,dt)                                         'Flag to apply energy scarcity (this is different from FP scarcity situation)'
 195    reserveScarcityEnabled(ca,dt)                                        'Flag to apply reserve scarcity (this is different from FP scarcity situation)'
 196    scarcityEnrgNationalFactor(ca,dt,blk)                                'National energy scarcity factors'
 197    scarcityEnrgNationalPrice(ca,dt,blk)                                 'National energy scarcity prices'
 198    scarcityEnrgNodeFactor(ca,dt,n,blk)                                  'Nodal energy scarcity factors'
 199    scarcityEnrgNodeFactorPrice(ca,dt,n,blk)                             'Nodal energy scarcity prices vs factors'
 200    scarcityEnrgNodeLimit(ca,dt,n,blk)                                   'Nodal energy scarcity limits'
 201    scarcityEnrgNodeLimitPrice(ca,dt,n,blk)                              'Nodal energy scarcity prices vs limits'
 202    scarcityResrvIslandLimit(ca,dt,isl,resC,blk)                         'Reserve scarcity limits'
 203    scarcityResrvIslandPrice(ca,dt,isl,resC,blk)                         'Reserve scarcity prices'
 204   
 205   ;
 206   
 207  * End of GDX declarations
 208   
 209   
 210   
 211  *===================================================================================
 212  * 2. Declare additional sets and parameters used throughout the model
 213  *===================================================================================
 214   
 215  Scalars
 216    useAClossModel
 217    useHVDClossModel
 218    useACbranchLimits                        'Use the AC branch limits (1 = Yes)'
 219    useHVDCbranchLimits                      'Use the HVDC branch limits (1 = Yes)'
 220    resolveCircularBranchFlows               'Resolve circular branch flows (1 = Yes)'
 221    resolveHVDCnonPhysicalLosses             'Resolve nonphysical losses on HVDC branches (1 = Yes)'
 222    resolveACnonPhysicalLosses               'Resolve nonphysical losses on AC branches (1 = Yes)'
 223    circularBranchFlowTolerance
 224    nonPhysicalLossTolerance
 225    useBranchFlowMIPtolerance
 226    useReserveModel                          'Use the reserve model (1 = Yes)'
 227    mixedMIPtolerance
 228    LPtimeLimit                              'CPU seconds allowed for LP solves'
 229    LPiterationLimit                         'Iteration limit allowed for LP solves'
 230    MIPtimeLimit                             'CPU seconds allowed for MIP solves'
 231    MIPiterationLimit                        'Iteration limit allowed for MIP solves'
 232    MIPoptimality
 233    disconnectedNodePriceCorrection          'Flag to apply price correction methods to disconnected node'
 234   
 235    branchReceivingEndLossProportion         'Proportion of losses to be allocated to the receiving end of a branch' /1/
 236   
 237  * External loss model from Transpower
 238    lossCoeff_A                       / 0.3101 /
 239    lossCoeff_C                       / 0.14495 /
 240    lossCoeff_D                       / 0.32247 /
 241    lossCoeff_E                       / 0.46742 /
 242    lossCoeff_F                       / 0.82247 /
 243    maxFlowSegment                    / 10000 /
 244    ;
 245   
 246  Sets
 247  * Global
 248    pole                                                   'HVDC poles' / pole1, pole2 /
 249    t(ca,dt)                                                  'Current trading interval to solve'
 250   
 251  * Offer
 252    offer(ca,dt,o)                                            'Offers defined for the current trading period'
 253    genOfrBlk(ca,dt,o,blk)                                    'Valid trade blocks for the respective generation offers'
 254    resOfrBlk(ca,dt,o,blk,resC,resT)                          'Valid trade blocks for the respective reserve offers by class and type'
 255    posEnrgOfr(ca,dt,o)                                       'Postive energy offers defined for the current trading period'
 256   
 257  * Bid
 258    Bid(ca,dt,bd)                                             'Bids defined for the current trading period'
 259    DemBidBlk(ca,dt,bd,blk)                                   'Valid trade blocks for the respective purchase bids'
 260   
 261  * Network
 262    branch(ca,dt,br)                                                     'Branches defined for the current trading period'
 263    branchBusDefn(ca,dt,br,frB,toB)                                      'Branch bus connectivity for the current trading period'
 264    branchFrBus(ca,dt,br,frB)                                            'Define branch from bus connectivity for the current trading period'
 265    branchToBus(ca,dt,br,frB)                                            'Define branch to bus connectivity for the current trading period'
 266    branchBusConnect(ca,dt,br,b)                                         'Indication if a branch is connected to a bus for the current trading period'
 267    ACBranchSendingBus(ca,dt,br,b,fd)                                    'Sending (From) bus of AC branch in forward and backward direction'
 268    ACBranchReceivingBus(ca,dt,br,b,fd)                                  'Receiving (To) bus of AC branch in forward and backward direction'
 269    HVDClinkSendingBus(ca,dt,br,b)                                       'Sending (From) bus of HVDC link'
 270    HVDClinkReceivingBus(ca,dt,br,toB)                                   'Receiving (To) bus of HVDC link'
 271    HVDClinkBus(ca,dt,br,b)                                              'Sending or Receiving bus of HVDC link'
 272    HVDClink(ca,dt,br)                                                   'HVDC links (branches) defined for the current trading period'
 273  *  HVDCpoles(ca,dt,br)                                                  'DC transmission between Benmore and Hayward'
 274   
 275    HVDCpoleDirection(ca,dt,br,fd)                                       'Direction defintion for HVDC poles S->N : forward and N->S : backward'
 276    ACBranch(ca,dt,br)                                                   'AC branches defined for the current trading period'
 277    validLossSegment(ca,dt,br,los,fd)                                    'Valid loss segments for a branch'
 278    lossBranch(ca,dt,br)                                                 'Subset of branches that have non-zero loss factors'
 279  * Mapping set of branches to HVDC pole
 280    HVDCpoleBranchMap(pole,br)                                        'Mapping of HVDC  branch to pole number'
 281  * Risk/Reserve
 282    islandRiskGenerator(ca,dt,isl,o)                          'Mapping of risk generator to island in the current trading period'
 283   
 284    GenRisk(riskC)                                                    'Subset containing generator risks'
 285    ManualRisk(riskC)                                                 'Subset containting manual risks'
 286    HVDCrisk(riskC)                                                   'Subset containing DCCE and DCECE risks'
 287    HVDCSecRisk(riskC)                                                'Subset containing secondary risk of the DCCE and DCECE events'
 288   
 289    PLRO(resT)                                             'PLSR reserve type'
 290    TWRO(resT)                                             'TWDR reserve type'
 291    ILRO(resT)                                             'ILR reserve type'
 292   
 293    nodeIsland(ca,dt,n,isl)                                   'Mapping node to island'
 294    offerIsland(ca,dt,o,isl)                                  'Mapping of reserve offer to island for the current trading period'
 295    bidIsland(ca,dt,bd,isl)                                   'Mapping of purchase bid ILR to island for the current trading period'
 296   
 297  * Definition of CE and ECE events to support different CE and ECE CVPs
 298    ContingentEvents(riskC)                                           'Subset of Risk Classes containing contigent event risks'
 299    ExtendedContingentEvent(riskC)                                    'Subset of Risk Classes containing extended contigent event risk'
 300  * Branch constraint
 301    BranchConstraint(ca,dt,brCstr)                                       'Set of valid branch constraints defined for the current trading period'
 302  * Market node constraint
 303    MNodeConstraint(ca,dt,MnodeCstr)                                     'Set of market node constraints defined for the current trading period'
 304  * NMIR update
 305    rampingConstraint(ca,dt,brCstr)                                      'Subset of branch constraints that limit total HVDC sent from an island due to ramping (5min schedule only)'
 306    bipoleConstraint(ca,dt,isl,brCstr)                                   'Subset of branch constraints that limit total HVDC sent from an island'
 307    monopoleConstraint(ca,dt,isl,brCstr,br)                              'Subset of branch constraints that limit the flow on HVDC pole sent from an island'
 308   
 309    riskGroupOffer(ca,dt,rg<,o,riskC)                                     'Mappimg of risk group to offers in current trading period for each risk class - SPD version 11.0 update'
 310    islandRiskGroup(ca,dt,isl,rg,riskC)                                  'Mappimg of risk group to island in current trading period for each risk class - SPD version 11.0 update'
 311    ;
 312   
 313  Alias (t,t1,t2);
 314   
 315  Parameters
 316  * Offers
 317    GenerationStart(ca,dt,o)                                  'The MW generation level associated with the offer at the start of a trading period'
 318    RampRateUp(ca,dt,o)                                       'The ramping up rate in MW per minute associated with the generation offer (MW/min)'
 319    RampRateDn(ca,dt,o)                                       'The ramping down rate in MW per minute associated with the generation offer (MW/min)'
 320    ReserveGenerationMaximum(ca,dt,o)                         'Maximum generation and reserve capability for the current trading period (MW)'
 321    WindOffer(ca,dt,o)                                        'Flag to indicate if offer is from wind generator (1 = Yes)'
 322    FKBand(ca,dt,o)                                           'Frequency keeper band MW which is set when the risk setter is selected as the frequency keeper'
 323    PriceResponsive(ca,dt,o)                                  'Flag to indicate if wind offer is price responsive (1 = Yes)'
 324    PotentialMW(ca,dt,o)                                      'Potential max output of Wind offer'
 325   
 326  * Energy offer
 327    EnrgOfrMW(ca,dt,o,blk)                                    'Generation offer block (MW)'
 328    EnrgOfrPrice(ca,dt,o,blk)                                 'Generation offer price ($/MW)'
 329   
 330  * Primary-secondary offer parameters
 331    PrimaryOffer(ca,dt,o)                                     'Flag to indicate if offer is a primary offer (1 = Yes)'
 332    SecondaryOffer(ca,dt,o)                                   'Flag to indicate if offer is a secondary offer (1 = Yes)'
 333   
 334   
 335    GenerationMaximum(ca,dt,o)                                           'Maximum generation level associated with the generation offer (MW)'
 336    GenerationMinimum(ca,dt,o)                                           'Minimum generation level associated with the generation offer (MW)'
 337    GenerationEndUp(ca,dt,o)                                             'MW generation level associated with the offer at the end of the trading period assuming ramp rate up'
 338    GenerationEndDown(ca,dt,o)                                           'MW generation level associated with the offer at the end of the trading period assuming ramp rate down'
 339    RampTimeUp(ca,dt,o)                                                  'Minimum of the trading period length and time to ramp up to maximum (Minutes)'
 340    RampTimeDown(ca,dt,o)                                                'Minimum of the trading period length and time to ramp down to minimum (Minutes)'
 341   
 342  * Reserve offer
 343    ResOfrPct(ca,dt,o,blk,resC)                          'The percentage of the MW block available for PLSR of class FIR or SIR'
 344    ResOfrPrice(ca,dt,o,blk,resC,resT)                   'The price of the reserve of the different reserve classes and types ($/MW)'
 345    ResOfrMW(ca,dt,o,blk,resC,resT)                      'The maximum MW offered reserve for the different reserve classes and types (MW)'
 346  * Demand
 347    RequiredLoad(ca,dt,n)                                             'Nodal demand for the current trading period in MW'
 348  * Bid
 349    DemBidMW(ca,dt,bd,blk)                               'Demand bid block in MW'
 350    DemBidPrice(ca,dt,bd,blk)                            'Purchase bid price in $/MW'
 351    DemBidILRMW(ca,dt,bd,blk,resC)                               'Purchase bid ILR block in MW for the different reserve classes'
 352    DemBidILRPrice(ca,dt,bd,blk,resC)                            'Purchase bid ILR price in $/MW for the different reserve classes'
 353  * Network
 354    branchResistance(ca,dt,br)                                           'Resistance of the a branch for the current trading period in per unit'
 355    branchSusceptance(ca,dt,br)                                          'Susceptance (inverse of reactance) of a branch for the current trading period in per unit'
 356    branchFixedLoss(ca,dt,br)                                            'Fixed loss of the a branch for the current trading period in MW'
 357    branchLossBlocks(ca,dt,br)                                           'Number of blocks in the loss curve for the a branch in the current trading period'
 358    lossSegmentMW(ca,dt,br,los,fd)                                       'MW capacity of each loss segment'
 359    lossSegmentFactor(ca,dt,br,los,fd)                                   'Loss factor of each loss segment'
 360    ACBranchLossMW(ca,dt,br,los,fd)                                      'MW element of the loss segment curve in MW'
 361    ACBranchLossFactor(ca,dt,br,los,fd)                                  'Loss factor element of the loss segment curve'
 362    HVDCBreakPointMWFlow(ca,dt,br,bp,fd)                                 'Value of power flow on the HVDC at the break point'
 363    HVDCBreakPointMWLoss(ca,dt,br,bp,fd)                                 'Value of variable losses on the HVDC at the break point'
 364   
 365  * Risk/Reserve
 366    IslandRiskAdjustmentFactor(ca,dt,isl,resC,riskC)                     'Risk adjustment factor for each island, reserve class and risk class'
 367    FreeReserve(ca,dt,isl,resC,riskC)                                    'MW free reserve for each island, reserve class and risk class'
 368    HVDCpoleRampUp(ca,dt,isl,resC,riskC)                                 'HVDC pole MW ramp up capability for each island, reserve class and risk class'
 369   
 370  * NMIR parameters
 371  * The follwing are new input for NMIR
 372    reserveRoundPower(ca,dt,resC)                                        'Database flag that disables round power under certain circumstances'
 373    reserveShareEnabled(ca,dt,resC)                                      'Database flag if reserve class resC is sharable'
 374    modulationRiskClass(ca,dt,riskC)                                     'HVDC energy modulation due to frequency keeping action'
 375    roundPower2MonoLevel(ca,dt)                                          'HVDC sent value above which one pole is stopped and therefore FIR cannot use round power'
 376    bipole2MonoLevel(ca,dt)                                              'HVDC sent value below which one pole is available to start in the opposite direction and therefore SIR can use round power'
 377    MonopoleMinimum(ca,dt)                                               'The lowest level that the sent HVDC sent can ramp down to when round power is not available.'
 378    HVDCControlBand(ca,dt,rd)                                            'Modulation limit of the HVDC control system apply to each HVDC direction'
 379    HVDClossScalingFactor(ca,dt)                                         'Losses used for full voltage mode are adjusted by a factor of (700/500)^2 for reduced voltage operation'
 380    sharedNFRFactor(ca,dt)                                               'Factor that is applied to [sharedNFRLoad - sharedNFRLoadOffset] as part of the calculation of sharedNFRMax'
 381    sharedNFRLoadOffset(ca,dt,isl)                                       'Island load that does not provide load damping, e.g., Tiwai smelter load in the South Island. Subtracted from the sharedNFRLoad in the calculation of sharedNFRMax.'
 382    effectiveFactor(ca,dt,isl,resC,riskC)                                'Estimate of the effectiveness of the shared reserve once it has been received in the risk island.'
 383    RMTReserveLimitTo(ca,dt,isl,resC)                                    'The shared reserve limit used by RMT when it calculated the NFRs. Applied as a cap to the value that is calculated for SharedNFRMax.'
 384  * The follwing are calculated parameters for NMIR
 385    reserveShareEnabledOverall(ca,dt)                                    'An internal parameter based on the FIR and SIR enabled, and used as a switch in various places'
 386    modulationRisk(ca,dt)                                                'Max of HVDC energy modulation due to frequency keeping action'
 387    roPwrZoneExit(ca,dt,resC)                                            'Above this point there is no guarantee that HVDC sent can be reduced below MonopoleMinimum.'
 388    sharedNFRLoad(ca,dt,isl)                                             'Island load, calculated in pre-processing from the required load and the bids. Used as an input to the calculation of SharedNFRMax.'
 389    sharedNFRMax(ca,dt,isl)                                              'Amount of island free reserve that can be shared through HVDC'
 390    numberOfPoles(ca,dt,isl)                                             'Number of HVDC poles avaialbe to send energy from an island'
 391    monoPoleCapacity(ca,dt,isl,br)                                       'Maximum capacity of monopole defined by min of branch capacity and monopole constraint RHS'
 392    biPoleCapacity(ca,dt,isl)                                            'Maximum capacity of bipole defined by bipole constraint RHS'
 393    HVDCMax(ca,dt,isl)                                                   'Max HVDC flow based on available poles and branch group constraints RHS'
 394    HVDCCapacity(ca,dt,isl)                                              'Total sent capacity of HVDC based on available poles'
 395    HVDCResistance(ca,dt,isl)                                            'Estimated resistance of HVDC flow sent from an island'
 396    HVDClossSegmentMW(ca,dt,isl,los)                                     'MW capacity of each loss segment applied to aggregated HVDC capacity'
 397    HVDClossSegmentFactor(ca,dt,isl,los)                                 'Loss factor of each loss segment applied to to aggregated HVDC loss'
 398    HVDCSentBreakPointMWFlow(ca,dt,isl,los)                              'Value of total HVDC sent power flow at the break point               --> lambda segment loss model'
 399    HVDCSentBreakPointMWLoss(ca,dt,isl,los)                              'Value of ariable losses of the total HVDC sent at the break point    --> lambda segment loss model'
 400    HVDCReserveBreakPointMWFlow(ca,dt,isl,los)                           'Value of total HVDC sent power flow + reserve at the break point     --> lambda segment loss model'
 401    HVDCReserveBreakPointMWLoss(ca,dt,isl,los)                           'Value of post-contingent variable HVDC losses at the break point     --> lambda segment loss model'
 402  * The follwing are flag and scalar for testing
 403    UseShareReserve(ca)                                                  'Flag to indicate if the reserve share is applied for CaseID'
 404    BigM                                                                 'Big M value to be applied for single active segment HVDC loss model' /10000/
 405  * NMIR parameters end
 406   
 407  * Branch constraint
 408    BranchConstraintSense(ca,dt,brCstr)                                  'Branch security constraint sense for the current trading period (-1:<=, 0:= 1:>=)'
 409    BranchConstraintLimit(ca,dt,brCstr)                                  'Branch security constraint limit for the current trading period'
 410   
 411  * Market node constraint
 412    MNodeConstraintSense(ca,dt,MnodeCstr)                                'Market node constraint sense for the current trading period'
 413    MNodeConstraintLimit(ca,dt,MnodeCstr)                                'Market node constraint limit for the current trading period'
 414   
 415   
 416  * Post-processing
 417    useBranchFlowMIP(ca,dt)                             'Flag to indicate if integer constraints are needed in the branch flow model: 1 = Yes'
 418   
 419  * Real Time Pricing
 420    ScarcityEnrgLimit(ca,dt,n,blk)                                    'Bus energy scarcity limits'
 421    ScarcityEnrgPrice(ca,dt,n,blk)                                    'Bus energy scarcity prices vs limits'
 422   
 423   
 424  * Real Time Pricing - Calculated parameters
 425    InitialLoad(ca,dt,n)                                'Value that represents the Pnode load MW at the start of the solution interval. Depending on the inputs this value will be either actual load, an operator applied override or an estimated initial load'
 426    LoadIsScalable(ca,dt,n)                             'Binary value. If True then the Pnode InitialLoad will be scaled in order to calculate nodedemand, if False then Pnode InitialLoad will be directly assigned to nodedemand'
 427    LoadScalingFactor(ca,dt,isl)                        'Island-level scaling factor applied to InitialLoad in order to calculate nodedemand'
 428    TargetTotalLoad(ca,dt,isl)                          'Island-level MW load forecast'
 429    LoadCalcLosses(ca,dt,isl)                           'Island-level MW losses used to calculate the Island-level load forecast from the InputIPS and the IslandPSD. 1st loop --> InitialLosses, 2nd solve loop --> SystemLosses as calculated in section 6.3'
 430    EstimatedInitialLoad(ca,dt,n)                       'Calculated estimate of initial MW load, available to be used as an alternative to InputInitialLoad'
 431    EstScalingFactor(ca,dt,isl)                         'Scaling applied to ConformingFactor load MW in order to calculate EstimatedInitialLoad'
 432    EstLoadIsScalable(ca,dt,n)                          'Binary value. If True then ConformingFactor load MW will be scaled in order to calculate EstimatedInitialLoad. If False then EstNonScalableLoad will be assigned directly to EstimatedInitialLoad'
 433    EstNonScalableLoad(ca,dt,n)                         'For a non-conforming Pnode this will be the NonConformingLoad MW input, for a conforming Pnode this will be the ConformingFactor MW input if that value is negative, otherwise it will be zero'
 434    EstScalableLoad(ca,dt,n)                            'For a non-conforming Pnode this value will be zero. For a conforming Pnode this value will be the ConformingFactor if it is non-negative, otherwise this value will be zero'
 435   
 436   
 437    ;
 438   
 439  Scalars
 440  * Violation penalties
 441  * These violation penalties are not specified in the model formulation document (ver.4.3) but are specified in the
 442  * document "Resolving Infeasibilities & High Spring Washer Price situations - an overview" available at www.systemoperator.co.nz/n2766,264.html
 443    deficitBusGenerationPenalty                      'Bus deficit violation penalty'                      /500000/
 444    surplusBusGenerationPenalty                      'Bus surplus violation penalty'                      /500000/
 445    deficitBrCstrPenalty                             'Deficit branch group constraint violation penalty'  /650000/
 446    surplusBrCstrPenalty                             'Surplus branch group constraint violation penalty'  /650000/
 447    deficitGnrcCstrPenalty                           'Deficit generic constraint violation penalty'       /710000/
 448    surplusGnrcCstrPenalty                           'Surplus generic constraint violation penalty'       /710000/
 449    deficitRampRatePenalty                           'Deficit ramp rate violation penalty'                /850000/
 450    surplusRampRatePenalty                           'Surplus ramp rate violation penalty'                /850000/
 451    deficitBranchFlowPenalty                         'Deficit branch flow violation penalty'              /600000/
 452    surplusBranchFlowPenalty                         'Surplus branch flow violation penalty'              /600000/
 453    deficitMnodeCstrPenalty                          'Deficit market node constraint violation penalty'   /700000/
 454    surplusMnodeCstrPenalty                          'Surplus market node constraint violation penalty'   /700000/
 455    DeficitReservePenalty_CE                         '6s and 60s CE reserve deficit violation penalty'    /100000/
 456    DeficitReservePenalty_ECE                        '6s and 60s ECE reserve deficit violation penalty'   /800000/
 457    ;
 458   
 459   
 460  *===================================================================================
 461  * 3. Declare model variables and constraints, and initialise constraints
 462  *=================================================================== ================
 463   
 464  * VARIABLES - UPPER CASE
 465  * Equations, parameters and everything else - lower or mixed case
 466   
 467  * Model formulation originally based on the SPD model formulation version 4.3 (15 Feb 2008) and amended as indicated
 468   
 469  Variables
 470    NETBENEFIT                                       'Defined as the difference between the consumer surplus and producer costs adjusted for penalty costs'
 471  * Risk
 472    ISLANDRISK(ca,dt,isl,resC,riskC)                    'Island MW risk for the different reserve and risk classes'
 473    GENISLANDRISK(ca,dt,isl,o,resC,riskC)               'Island MW risk for different risk setting generators'
 474    GENISLANDRISKGROUP(ca,dt,isl,rg,resC,riskC)         'Island MW risk for different risk group - SPD version 11.0'
 475    HVDCGENISLANDRISK(ca,dt,isl,o,resC,riskC)           'Island MW risk for different risk setting generators + HVDC'
 476    HVDCMANISLANDRISK(ca,dt,isl,resC,riskC)             'Island MW risk for manual risk + HVDC'
 477    HVDCREC(ca,dt,isl)                                  'Total net pre-contingent HVDC MW flow received at each island'
 478    RISKOFFSET(ca,dt,isl,resC,riskC)                    'MW offset applied to the raw risk to account for HVDC pole rampup, AUFLS, free reserve and non-compliant generation'
 479   
 480  * NMIR free variables
 481    HVDCRESERVESENT(ca,dt,isl,resC,rd)                  'Total net post-contingent HVDC MW flow sent from an island applied to each reserve class'
 482    HVDCRESERVELOSS(ca,dt,isl,resC,rd)                  'Post-contingent HVDC loss of energy + reserve sent from an island applied to each reserve class'
 483  * NMIR free variables end
 484   
 485  * Network
 486    ACNODENETINJECTION(ca,dt,b)                         'MW injection at buses corresponding to AC nodes'
 487    ACBRANCHFLOW(ca,dt,br)                              'MW flow on undirected AC branch'
 488    ACNODEANGLE(ca,dt,b)                                'Bus voltage angle'
 489   
 490  * Demand bids can be either positive or negative from v6.0 of SPD formulation (with DSBF)
 491  * The lower bound of the free variable is updated in vSPDSolve.gms to allow backward compatibility
 492  * Note the formulation now refers to this as Demand. So Demand (in SPD formulation) = Purchase (in vSPD code)
 493    PURCHASE(ca,dt,bd)                                  'Total MW purchase scheduled'
 494    PURCHASEBLOCK(ca,dt,bd,blk)                         'MW purchase scheduled from the individual trade blocks of a bid'
 495   
 496    ;
 497   
 498  Positive variables
 499  * system cost and benefit
 500    SYSTEMBENEFIT(ca,dt)                                'Total purchase bid benefit by period'
 501    SYSTEMCOST(ca,dt)                                   'Total generation and reserve costs by period'
 502    SYSTEMPENALTYCOST(ca,dt)                            'Total violation costs by period'
 503    TOTALPENALTYCOST                                 'Total violation costs'
 504    SCARCITYCOST(ca,dt)                                 'Total scarcity Cost'
 505  * scarcity variables
 506    ENERGYSCARCITYBLK(ca,dt,n,blk)                      'Block energy scarcity cleared at bus b'
 507    ENERGYSCARCITYNODE(ca,dt,n)                         'Energy scarcity cleared at bus b'
 508   
 509    RESERVESHORTFALLBLK(ca,dt,isl,resC,riskC,blk)       'Block reserve shortfall by risk class (excluding genrisk and HVDC secondary risk)'
 510    RESERVESHORTFALL(ca,dt,isl,resC,riskC)              'Reserve shortfall by risk class (excluding genris kand HVDC secondary risk)'
 511   
 512    RESERVESHORTFALLUNITBLK(ca,dt,isl,o,resC,riskC,blk) 'Block reserve shortfall by risk generation unit (applied to genrisk and HVDC secondary risk)'
 513    RESERVESHORTFALLUNIT(ca,dt,isl,o,resC,riskC)        'Reserve shortfall by risk generation unit (applied to genrisk and HVDC secondary risk)'
 514   
 515    RESERVESHORTFALLGROUPBLK(ca,dt,isl,rg,resC,riskC,blk) 'Block Reserve shortfall by risk group (applied to genrisk and HVDC secondary risk)'
 516    RESERVESHORTFALLGROUP(ca,dt,isl,rg,resC,riskC)        'Reserve shortfall by risk risk group (applied to genrisk and HVDC secondary risk)'
 517   
 518  * Generation
 519    GENERATION(ca,dt,o)                                 'Total MW generation scheduled from an offer'
 520    GENERATIONBLOCK(ca,dt,o,blk)                        'MW generation scheduled from the individual trade blocks of an offer'
 521    GENERATIONUPDELTA(ca,dt,o)                          'Total increase in MW generation scheduled from an offer'
 522    GENERATIONDNDELTA(ca,dt,o)                          'Total decrease in MW generation scheduled from an offer'
 523  * Reserve
 524    RESERVE(ca,dt,o,resC,resT)                          'MW Reserve scheduled from an offer'
 525    RESERVEBLOCK(ca,dt,o,blk,resC,resT)                 'MW Reserve scheduled from the individual trade blocks of an offer'
 526    ISLANDRESERVE(ca,dt,isl,resC)                       'Total island cleared reserve'
 527   
 528  * NMIR positive variables
 529    SHAREDNFR(ca,dt,isl)                                'Amount of free load reserve being shared from an island'
 530    SHAREDRESERVE(ca,dt,isl,resC)                       'Amount of cleared reserve from an island being shared to the other island'
 531    HVDCSENT(ca,dt,isl)                                 'Directed pre-contingent HVDC MW flow sent from each island'
 532    HVDCSENTLOSS(ca,dt,isl)                             'Energy loss for  HVDC flow sent from an island'
 533    RESERVESHAREEFFECTIVE(ca,dt,isl,resC,riskC)         'Effective shared reserve received at island after adjusted for losses and effectiveness factor'
 534    RESERVESHARERECEIVED(ca,dt,isl,resC,rd)             'Directed shared reserve received at island after adjusted for losses'
 535    RESERVESHARESENT(ca,dt,isl,resC,rd)                 'Directed shared reserve sent from and island'
 536    RESERVESHAREPENALTY(ca,dt)                          'Penalty cost for excessive reserve sharing'
 537  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation of RESERVESHAREPENALTY
 538    RESERVESHAREEFFECTIVE_CE(ca,dt,isl,resC)            'Max effective shared reserve for CE risk received at island after adjusted for losses and effectiveness factor'
 539    RESERVESHAREEFFECTIVE_ECE(ca,dt,isl,resC)           'Max effective shared reserve for ECE risk received at island after adjusted for losses and effectiveness factor'
 540  * NMIR positive variables end
 541   
 542  * Network
 543    HVDCLINKFLOW(ca,dt,br)                              'MW flow at the sending end scheduled for the HVDC link'
 544    HVDCLINKLOSSES(ca,dt,br)                            'MW losses on the HVDC link'
 545    LAMBDA(ca,dt,br,bp)                                 'Non-negative weight applied to the breakpoint of the HVDC link'
 546    ACBRANCHFLOWDIRECTED(ca,dt,br,fd)                   'MW flow on the directed branch'
 547    ACBRANCHLOSSESDIRECTED(ca,dt,br,fd)                 'MW losses on the directed branch'
 548    ACBRANCHFLOWBLOCKDIRECTED(ca,dt,br,los,fd)          'MW flow on the different blocks of the loss curve'
 549    ACBRANCHLOSSESBLOCKDIRECTED(ca,dt,br,los,fd)        'MW losses on the different blocks of the loss curve'
 550  * Violations
 551    DEFICITBUSGENERATION(ca,dt,b)                       'Deficit generation at a bus in MW'
 552    SURPLUSBUSGENERATION(ca,dt,b)                       'Surplus generation at a bus in MW'
 553    DEFICITBRANCHSECURITYCONSTRAINT(ca,dt,brCstr)       'Deficit branch security constraint in MW'
 554    SURPLUSBRANCHSECURITYCONSTRAINT(ca,dt,brCstr)       'Surplus branch security constraint in MW'
 555    DEFICITRAMPRATE(ca,dt,o)                            'Deficit ramp rate in MW'
 556    SURPLUSRAMPRATE(ca,dt,o)                            'Surplus ramp rate in MW'
 557    DEFICITBRANCHFLOW(ca,dt,br)                         'Deficit branch flow in MW'
 558    SURPLUSBRANCHFLOW(ca,dt,br)                         'Surplus branch flow in MW'
 559    DEFICITMNODECONSTRAINT(ca,dt,MnodeCstr)             'Deficit market node constraint in MW'
 560    SURPLUSMNODECONSTRAINT(ca,dt,MnodeCstr)             'Surplus market node constraint in MW'
 561  * Seperate CE and ECE violation variables to support different CVPs for CE and ECE
 562    DEFICITRESERVE_CE(ca,dt,isl,resC)                   'Deficit CE reserve generation in each island for each reserve class in MW'
 563    DEFICITRESERVE_ECE(ca,dt,isl,resC)                  'Deficit ECE reserve generation in each island for each reserve class in MW'
 564   
 565    ;
 566   
 567  Binary variables
 568  * NMIR binary variables
 569    HVDCSENDING(ca,dt,isl)                              'Binary variable indicating if island isl is the sending end of the HVDC flow. 1 = Yes.'
 570    INZONE(ca,dt,isl,resC,z)                            'Binary variable (1 = Yes ) indicating if the HVDC flow is in a zone (z) that facilitates the appropriate quantity of shared reserves in the reverse direction to the HVDC sending island isl for reserve class resC.'
 571    HVDCSENTINSEGMENT(ca,dt,isl,los)                    'Binary variable to decide which loss segment HVDC flow sent from an island falling into --> active segment loss model'
 572  * Discete dispachable demand block binary variables
 573    PURCHASEBLOCKBINARY(ca,dt,bd,blk)                   'Binary variable to decide if a purchase block is cleared either fully or nothing at all'
 574  * HVDC Secondary risk should not be covered if HVDC sending is zero. The following binary variable is to enforced that (Update from RTP phase 4)
 575    HVDCSENDZERO(ca,dt,isl)                              'Binary variable indicating if island is NOT the sending energy through HVDC flow. 1 = Yes.'
 576    ;
 577   
 578  SOS1 Variables
 579    ACBRANCHFLOWDIRECTED_INTEGER(ca,dt,br,fd)           'Integer variables used to select branch flow direction in the event of circular branch flows (3.8.1)'
 580    HVDCLINKFLOWDIRECTED_INTEGER(ca,dt,fd)              'Integer variables used to select the HVDC branch flow direction on in the event of S->N (forward) and N->S (reverse) flows (3.8.2)'
 581  * Integer varaible to prevent intra-pole circulating branch flows
 582    HVDCPOLEFLOW_INTEGER(ca,dt,pole,fd)                 'Integer variables used to select the HVDC pole flow direction on in the event of circulating branch flows within a pole'
 583    ;
 584   
 585  SOS2 Variables
 586    LAMBDAINTEGER(ca,dt,br,bp)                          'Integer variables used to enforce the piecewise linear loss approxiamtion on the HVDC links'
 587    LAMBDAHVDCENERGY(ca,dt,isl,bp)                      'Integer variables used to enforce the piecewise linear loss approxiamtion (NMIR) on the HVDC links'
 588    LAMBDAHVDCRESERVE(ca,dt,isl,resC,rd,rsbp)           'Integer variables used to enforce the piecewise linear loss approxiamtion (NMIR) on the HVDC links'
 589    ;
 590   
 591   
 592  Equations
 593    ObjectiveFunction                                'Objective function of the dispatch model (5.1.1.1)'
 594  * Cost and benefit breaking down
 595    SystemBenefitDefinition(ca,dt)                      'Defined as the sum of the purcahse bid benefit'
 596    SystemCostDefinition(ca,dt)                         'Defined as the sum of the generation and reserve costs'
 597    SystemPenaltyCostDefinition(ca,dt)                  'Defined as the sum of the individual violation costs'
 598    TotalViolationCostDefinition                     'Deined as the sume of period violation cost - (for reporting)'
 599    TotalScarcityCostDefinition(ca,dt)                  'Deined as the sume of scarcity cost'
 600   
 601   
 602  * Offer and purchase constraints
 603    GenerationChangeUpDown(ca,dt,o)                     'Calculate the MW of generation increase/decrease for RTD and RTDP (6.1.1.2)'
 604    GenerationOfferDefintion(ca,dt,o)                   'Definition of generation provided by an offer (6.1.1.3)'
 605    DemBidDiscrete(ca,dt,bd,blk)                        'Definition of discrete purchase mode (6.1.1.7)'
 606    DemBidDefintion(ca,dt,bd)                           'Definition of purchase provided by a bid (6.1.1.8)'
 607    EnergyScarcityDefinition(ca,dt,n)                   'Definition of bus energy scarcity (6.1.1.10)'
 608   
 609  * Ramping constraints
 610    GenerationRampUp(ca,dt,o)                           'Maximum movement of the generator upwards due to up ramp rate (6.2.1.1)'
 611    GenerationRampDown(ca,dt,o)                         'Maximum movement of the generator downwards due to down ramp rate (6.2.1.2)'
 612   
 613   
 614   
 615  * HVDC transmission constraints
 616    HVDClinkMaximumFlow(ca,dt,br)                       'Maximum flow on each HVDC link (6.3.1.1)'
 617    HVDClinkLossDefinition(ca,dt,br)                    'Definition of losses on the HVDC link (6.3.1.2)'
 618    HVDClinkFlowDefinition(ca,dt,br)                    'Definition of MW flow on the HVDC link (6.3.1.3)'
 619    LambdaDefinition(ca,dt,br)                          'Definition of weighting factor (6.3.1.4)'
 620   
 621  * HVDC transmission constraints to resolve non-physical loss and circular flow
 622  * These constraints are not explicitly formulated in SPD formulation
 623  * But you can find the description in "Post-Solve Checks"
 624    HVDClinkFlowIntegerDefinition1(ca,dt)               'Definition 1 of the integer HVDC link flow variable )'
 625    HVDClinkFlowIntegerDefinition2(ca,dt,fd)            'Definition 2 of the integer HVDC link flow variable'
 626    HVDClinkFlowIntegerDefinition3(ca,dt,pole)          'Definition 4 of the HVDC pole integer varaible to prevent intra-pole circulating branch flows'
 627    HVDClinkFlowIntegerDefinition4(ca,dt,pole,fd)       'Definition 4 of the HVDC pole integer varaible to prevent intra-pole circulating branch flows'
 628    LambdaIntegerDefinition1(ca,dt,br)                  'Definition of weighting factor when branch integer constraints are needed'
 629    LambdaIntegerDefinition2(ca,dt,br,los)              'Definition of weighting factor when branch integer constraints are needed'
 630   
 631  * AC transmission constraints
 632    ACnodeNetInjectionDefinition1(ca,dt,b)              '1st definition of the net injection at buses corresponding to AC nodes (6.4.1.1)'
 633    ACnodeNetInjectionDefinition2(ca,dt,b)              '2nd definition of the net injection at buses corresponding to AC nodes (6.4.1.2)'
 634    ACBranchMaximumFlow(ca,dt,br,fd)                    'Maximum flow on the AC branch (6.4.1.3)'
 635    ACBranchFlowDefinition(ca,dt,br)                    'Relationship between directed and undirected branch flow variables (6.4.1.4)'
 636    LinearLoadFlow(ca,dt,br)                            'Equation that describes the linear load flow (6.4.1.5)'
 637    ACBranchBlockLimit(ca,dt,br,los,fd)                 'Limit on each AC branch flow block (6.4.1.6)'
 638    ACDirectedBranchFlowDefinition(ca,dt,br,fd)         'Composition of the directed branch flow from the block branch flow (6.4.1.7)'
 639    ACBranchLossCalculation(ca,dt,br,los,fd)            'Calculation of the losses in each loss segment (6.4.1.8)'
 640    ACDirectedBranchLossDefinition(ca,dt,br,fd)         'Composition of the directed branch losses from the block branch losses (6.4.1.9)'
 641   
 642  * AC transmission constraints to resolve circular flow
 643    ACDirectedBranchFlowIntegerDefinition1(ca,dt,br)    'Integer constraint to enforce a flow direction on loss AC branches in the presence of circular branch flows or non-physical losses'
 644    ACDirectedBranchFlowIntegerDefinition2(ca,dt,br,fd) 'Integer constraint to enforce a flow direction on loss AC branches in the presence of circular branch flows or non-physical losses'
 645   
 646  * Risk
 647    RiskOffsetCalculation_DCCE(ca,dt,isl,resC,riskC)          '6.5.1.1 : Calculation of the risk offset variable for the DCCE risk class.'
 648    RiskOffsetCalculation_DCECE(ca,dt,isl,resC,riskC)         '6.5.1.3 : Calculation of the risk offset variable for the DCECE risk class.'
 649    HVDCRecCalculation(ca,dt,isl)                             '6.5.1.4 : Calculation of the net received HVDC MW flow into an island.'
 650    HVDCIslandRiskCalculation(ca,dt,isl,resC,riskC)           '6.5.1.5 : Calculation of the island risk for a DCCE and DCECE.'
 651   
 652    GenIslandRiskCalculation(ca,dt,isl,o,resC,riskC)          '6.5.1.6 : Calculation of the island risk for risk setting generators.'
 653    GenIslandRiskCalculation_1(ca,dt,isl,o,resC,riskC)        '6.5.1.6 : Calculation of the island risk for risk setting generators.'
 654    ManualIslandRiskCalculation(ca,dt,isl,resC,riskC)         '6.5.1.7 : Calculation of the island risk based on manual specifications.'
 655    HVDCSendMustZeroBinaryDefinition(ca,dt,isl)               '6.5.1.8: Define a flag to show if HVDC sending zero MW flow from an island '
 656   
 657    HVDCIslandSecRiskCalculation_GEN(ca,dt,isl,o,resC,riskC)     '6.5.1.9 : Calculation of the island risk for an HVDC secondary risk to an AC risk.'
 658    HVDCIslandSecRiskCalculation_GEN_1(ca,dt,isl,o,resC,riskC)   '6.5.1.9 : Calculation of the island risk for an HVDC secondary risk to an AC risk.'
 659    HVDCIslandSecRiskCalculation_Manual(ca,dt,isl,resC,riskC)    '6.5.1.10: Calculation of the island risk for an HVDC secondary risk to a manual risk.'
 660    HVDCIslandSecRiskCalculation_Manu_1(ca,dt,isl,resC,riskC)    '6.5.1.10: Calculation of the island risk for an HVDC secondary risk to a manual risk.'
 661    GenIslandRiskGroupCalculation(ca,dt,isl,rg,resC,riskC)       '6.5.1.11: Calculation of the island risk of risk group.'
 662    GenIslandRiskGroupCalculation_1(ca,dt,isl,rg,resC,riskC)     '6.5.1.11: Calculation of the risk of risk group.'
 663   
 664  * General NMIR equations
 665    EffectiveReserveShareCalculation(ca,dt,isl,resC,riskC)                           '6.5.2.1 : Calculation of effective shared reserve'
 666    SharedReserveLimitByClearedReserve(ca,dt,isl,resC)                               '6.5.2.2 : Shared offered reserve is limited by cleared reserved'
 667    BothClearedAndFreeReserveCanBeShared(ca,dt,isl,resC,rd)                          '6.5.2.4 : Shared reserve is covered by cleared reserved and shareable free reserve'
 668    ReserveShareSentLimitByHVDCControlBand(ca,dt,isl,resC,rd)                        '6.5.2.5 : Reserve share sent from an island is limited by HVDC control band'
 669    FwdReserveShareSentLimitByHVDCCapacity(ca,dt,isl,resC,rd)                        '6.5.2.6 : Forward reserve share sent from an island is limited by HVDC capacity'
 670    ReverseReserveOnlyToEnergySendingIsland(ca,dt,isl,resC,rd)                       '6.5.2.7 : Shared reserve sent in reverse direction is possible only if the island is not sending energy through HVDC'
 671    ReverseReserveShareLimitByHVDCControlBand(ca,dt,isl,resC,rd)                     '6.5.2.8 : Reverse reserve share recieved at an island is limited by HVDC control band'
 672    ForwardReserveOnlyToEnergyReceivingIsland(ca,dt,isl,resC,rd)                     '6.5.2.9 : Forward received reserve is possible if in the same direction of HVDC '
 673    ReverseReserveLimitInReserveZone(ca,dt,isl,resC,rd,z)                            '6.5.2.10: Reverse reserve constraint if HVDC sent flow in reverse zone'
 674    ZeroReserveInNoReserveZone(ca,dt,isl,resC,z)                                     '6.5.2.11 & 6.5.2.18: No reverse reserve if HVDC sent flow in no reverse zone and no forward reserve if round power disabled'
 675    OnlyOneActiveHVDCZoneForEachReserveClass(ca,dt,resC)                             '6.5.2.12: Across both island, one and only one zone is active for each reserve class'
 676    ZeroSentHVDCFlowForNonSendingIsland(ca,dt,isl)                                   '6.5.2.13: Directed HVDC sent from an island, if non-zero, must fall in a zone for each reserve class'
 677    RoundPowerZoneSentHVDCUpperLimit(ca,dt,isl,resC,z)                               '6.5.2.14: Directed HVDC sent from an island <= RoundPowerZoneExit level if in round power zone of that island'
 678    HVDCSendingIslandDefinition(ca,dt,isl,resC)                                      '6.5.2.15: An island is HVDC sending island if HVDC flow sent is in one of the three zones for each reserve class '
 679    OnlyOneSendingIslandExists(ca,dt)                                                '6.5.2.19: One and only one island is HVDC sending island'
 680    HVDCSentCalculation(ca,dt,isl)                                                   '6.5.2.20: Total HVDC sent from each island'
 681   
 682  * Lamda loss model
 683    HVDCFlowAccountedForForwardReserve(ca,dt,isl,resC,rd)                            '6.5.2.21: HVDC flow sent from an island taking into account forward sent reserve'
 684    ForwardReserveReceivedAtHVDCReceivingIsland(ca,dt,isl,resC,rd)                   '6.5.2.22: Forward reserve RECEIVED at an HVDC receiving island'
 685    HVDCFlowAccountedForReverseReserve(ca,dt,isl,resC,rd)                            '6.5.2.23: HVDC flow sent from an island taking into account reverse received reserve'
 686    ReverseReserveReceivedAtHVDCSendingIsland(ca,dt,isl,resC,rd)                     '6.5.2.24: Reverse reserve RECEIVED at an HVDC sending island'
 687    HVDCSentEnergyLambdaDefinition(ca,dt,isl)                                        '6.5.2.25: Definition of weight factor for total HVDC energy sent from an island'
 688    HVDCSentEnergyFlowDefinition(ca,dt,isl)                                          '6.5.2.26: Lambda definition of total HVDC energy flow sent from an island'
 689    HVDCSentEnergyLossesDefinition(ca,dt,isl)                                        '6.5.2.27: Lambda definition of total loss of HVDC energy sent from an island'
 690    HVDCSentReserveLambdaDefinition(ca,dt,isl,resC,rd)                               '6.5.2.28: Definition of weight factor for total HVDC+reserve sent from an island'
 691    HVDCSentReserveFlowDefinition(ca,dt,isl,resC,rd)                                 '6.5.2.29: Lambda definition of Reserse + Energy flow on HVDC sent from an island'
 692    HVDCSentReserveLossesDefinition(ca,dt,isl,resC,rd)                               '6.5.2.30: Lambda definition of Reserse + Energy loss on HVDC sent from an island'
 693   
 694  * Reserve share penalty
 695  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation
 696    ReserveShareEffective_CE_Calculation(ca,dt,isl,resC,riskC)                       '6.5.2.31: Calculate max effective shared reserve for CE risk received at island'
 697    ReserveShareEffective_ECE_Calculation(ca,dt,isl,resC,riskC)                      '6.5.2.31: Calculate max effective shared reserve for ECE risk received at island'
 698    ExcessReserveSharePenalty(ca,dt)                                                 '6.5.2.31: Constraint to avoid excessive reserve share'
 699   
 700  * Reserve
 701    PLSRReserveProportionMaximum(ca,dt,o,blk,resC,resT)                              '6.5.3.1: Maximum PLSR as a proportion of the block MW'
 702    ReserveInterruptibleOfferLimit(ca,dt,o,bd,resC,resT)                             '6.5.3.3: Cleared IL reserve is constrained by cleared dispatchable demand'
 703    ReserveOfferDefinition(ca,dt,o,resC,resT)                                        '6.5.3.4: Definition of the reserve offers of different classes and types'
 704    EnergyAndReserveMaximum(ca,dt,o,resC)                                            '6.5.3.5: Definition of maximum energy and reserves from each generator'
 705   
 706  * Reserve scarcity/shortfall
 707    HVDCRiskReserveShortFallCalculation(ca,dt,isl,resC,RiskC)                        '6.5.4.2: Total Reserve Shortfall for DCCE risk'
 708    ManualRiskReserveShortFallCalculation(ca,dt,isl,resC,RiskC)                      '6.5.4.2: Total Reserve Shortfall for Manual risk'
 709    GenRiskReserveShortFallCalculation(ca,dt,isl,o,resC,RiskC)                       '6.5.4.2: Total Reserve Shortfall for generation risk unit'
 710    HVDCsecRiskReserveShortFallCalculation(ca,dt,isl,o,resC,RiskC)                   '6.5.4.2: Total Reserve Shortfall for generation unit + HVDC risk'
 711    HVDCsecManualRiskReserveShortFallCalculation(ca,dt,isl,resC,RiskC)                '6.5.4.2: Total Reserve Shortfall for Manual risk + HVDC risk'
 712    RiskGroupReserveShortFallCalculation(ca,dt,isl,rg,resC,RiskC)                     '6.5.4.2: Total Reserve Shortfall for Risk Group'
 713   
 714  * Matching of reserve requirement and availability
 715    IslandReserveCalculation(ca,dt,isl,resC)                                         '6.5.5.1: Calculate total island cleared reserve'
 716    SupplyDemandReserveRequirement(ca,dt,isl,resC,riskC)                             '6.5.5.2&3: Matching of reserve supply and demand'
 717   
 718  * Branch security constraints
 719    BranchSecurityConstraintLE(ca,dt,brCstr)                                         '6.6.1.5: Branch security constraint with LE sense'
 720    BranchSecurityConstraintGE(ca,dt,brCstr)                                         '6.6.1.5: Branch security constraint with GE sense'
 721    BranchSecurityConstraintEQ(ca,dt,brCstr)                                         '6.6.1.5: Branch security constraint with EQ sense'
 722   
 723  * Market node security constraints
 724    MNodeSecurityConstraintLE(ca,dt,MnodeCstr)                                       '6.6.1.7: Market node security constraint with LE sense'
 725    MNodeSecurityConstraintGE(ca,dt,MnodeCstr)                                       '6.6.1.7: Market node security constraint with GE sense'
 726    MNodeSecurityConstraintEQ(ca,dt,MnodeCstr)                                       '6.6.1.7: Market node security constraint with EQ sense'
 727   
 728    ;
 729   
 730  * OBJECTIVE FUNCTION (5.1.1.1)
 731  ObjectiveFunction..
 732    NETBENEFIT
 733  =e=
 734    sum[ t, SYSTEMBENEFIT(t) - SYSTEMCOST(t) - SCARCITYCOST(t)
 735          - SYSTEMPENALTYCOST(t) - RESERVESHAREPENALTY(t) ]
 736    + sum[(t,n,blk), ScarcityEnrgLimit(t,n,blk) * ScarcityEnrgPrice(t,n,blk)]
 737    ;
 738   
 739  * Defined as the net sum of generation cost + reserve cost
 740  SystemCostDefinition(t)..
 741    SYSTEMCOST(t)
 742  =e=
 743    sum[ genOfrBlk(t,o,blk)
 744       , GENERATIONBLOCK(genOfrBlk)
 745       * EnrgOfrPrice(genOfrBlk) ]
 746  + sum[ resOfrBlk(t,o,blk,resC,resT)
 747       , RESERVEBLOCK(resOfrBlk)
 748       * ResOfrPrice(resOfrBlk) ]
 749    ;
 750   
 751  * Defined as the net sum of dispatchable load benefit
 752  SystemBenefitDefinition(t)..
 753    SYSTEMBENEFIT(t)
 754  =e=
 755    sum[ demBidBlk(t,bd,blk)
 756       , PURCHASEBLOCK(demBidBlk)
 757       * DemBidPrice(demBidBlk) ]
 758    ;
 759   
 760  * Defined as the sum of the individual violation costs
 761  SystemPenaltyCostDefinition(t)..
 762    SYSTEMPENALTYCOST(t)
 763  =e=
 764    sum[ bus(t,b), deficitBusGenerationPenalty * DEFICITBUSGENERATION(bus)
 765                      + surplusBusGenerationPenalty * SURPLUSBUSGENERATION(bus) ]
 766   
 767  + sum[ branch(t,br), surplusBranchFlowPenalty * SURPLUSBRANCHFLOW(branch) ]
 768   
 769  + sum[ offer(t,o), deficitRampRatePenalty * DEFICITRAMPRATE(offer)
 770                        + surplusRampRatePenalty * SURPLUSRAMPRATE(Offer) ]
 771   
 772  + sum[ BranchConstraint(t,brCstr)
 773       , deficitBrCstrPenalty * DEFICITBRANCHSECURITYCONSTRAINT(t,brCstr)
 774       + surplusBrCstrPenalty * SURPLUSBRANCHSECURITYCONSTRAINT(t,brCstr) ]
 775   
 776  + sum[ MNodeConstraint(t,MnodeCstr)
 777       , deficitMnodeCstrPenalty * DEFICITMNODECONSTRAINT(MNodeConstraint)
 778       + surplusMnodeCstrPenalty * SURPLUSMNODECONSTRAINT(MNodeConstraint) ]
 779   
 780  + sum[ (isl,resC)
 781         , [DeficitReservePenalty_CE  * DEFICITRESERVE_CE(t,isl,resC) ]
 782         + [DeficitReservePenalty_ECE * DEFICITRESERVE_ECE(t,isl,resC)]
 783       ]
 784   
 785  + sum[ o $ { (StudyMode(t) = 101) or (StudyMode(t) = 201) }
 786           , 0.0005 * ( GENERATIONUPDELTA(t,o) + GENERATIONDNDELTA(t,o) )
 787       ]
 788    ;
 789   
 790  * Defined as the sum of the individual violation costs (for reporting)
 791  TotalViolationCostDefinition..
 792    TOTALPENALTYCOST =e= sum[ t, SYSTEMPENALTYCOST(t) ] ;
 793   
 794  * Deined as the sume of scarcity cost
 795  TotalScarcityCostDefinition(t)..
 796    SCARCITYCOST(t)
 797  =e=
 798    sum[ (n,blk), ScarcityEnrgPrice(t,n,blk) * ENERGYSCARCITYBLK(t,n,blk) ]
 799   
 800  + sum[ (isl,resC,riskC,blk) $ HVDCrisk(riskC)
 801       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 802        * RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
 803   
 804  + sum[ (isl,resC,riskC,blk) $ ManualRisk(riskC)
 805       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 806       * RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
 807   
 808  +  sum[ (isl,o,resC,riskC,blk) $ { GenRisk(riskC)
 809                                 and islandRiskGenerator(t,isl,o) }
 810       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 811       * RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
 812   
 813  +  sum[ (isl,o,resC,riskC,blk) $ { HVDCsecRisk(riskC)
 814                                 and islandRiskGenerator(t,isl,o) }
 815       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 816       * RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
 817   
 818  +  sum[ (isl, resC,riskC,blk) $ HVDCsecRisk(riskC)
 819       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 820       * RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
 821   
 822  +  sum[ (isl,rg,resC,riskC,blk) $ GenRisk(riskC)
 823       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 824       * RESERVESHORTFALLGROUPBLK(t,isl,rg,resC,riskC,blk) ]
 825  ;
 826   
 827   
 828  *======= GENERATION AND LOAD CONSTRAINTS =======================================
 829   
 830  * Calculate the MW of generation increase/decrease for RTD and RTDP (6.1.1.2)'
 831  GenerationChangeUpDown(t,o) $ { (StudyMode(t) = 101) or (StudyMode(t) = 201) }..
 832    GENERATIONUPDELTA(t,o) - GENERATIONDNDELTA(t,o)
 833  =e=
 834    GENERATION(t,o) - generationStart(t,o);
 835   
 836  * Definition of generation provided by an offer (6.1.1.3)
 837  GenerationOfferDefintion(offer(t,o))..
 838    GENERATION(offer)
 839  =e=
 840    sum[ genOfrBlk(offer,blk), GENERATIONBLOCK(offer,blk) ]
 841    ;
 842   
 843  * Definition of discrete purchase mode (6.1.1.7)
 844  DemBidDiscrete(bid(t,bd),blk) $ discreteModeBid(bid) ..
 845    PURCHASEBLOCK(bid,blk)
 846  =e=
 847    PURCHASEBLOCKBINARY(bid,blk) * DemBidMW(bid,blk)
 848    ;
 849   
 850  * Definition of purchase provided by a bid (6.1.1.8)
 851  DemBidDefintion(bid(t,bd))..
 852    PURCHASE(bid)
 853  =e=
 854    sum[ demBidBlk(bid,blk), PURCHASEBLOCK(bid,blk) ]
 855    ;
 856   
 857  * Definition of bus energy scarcity (6.1.1.10)
 858  EnergyScarcityDefinition(t,n)..
 859    ENERGYSCARCITYNODE(t,n)
 860  =e=
 861    sum[ blk, ENERGYSCARCITYBLK(t,n,blk) ]
 862    ;
 863   
 864  *======= GENERATION AND LOAD CONSTRAINTS END ===================================
 865   
 866   
 867   
 868  *======= RAMPING CONSTRAINTS ===================================================
 869  * Note: The CoefficientForRampRate in SPD formulation  = intervalDuration / 60
 870   
 871  * Maximum movement of the generator downwards due to up ramp rate (6.2.1.1)
 872  GenerationRampUp(t,o) $ { posEnrgOfr(t,o) and PrimaryOffer(t,o) }..
 873    sum[ o1 $ PrimarySecondaryOffer(t,o,o1), GENERATION(t,o1) ]
 874  + GENERATION(t,o) - DEFICITRAMPRATE(t,o)
 875  =l=
 876    generationStart(t,o) + (RampRateUp(t,o) * intervalDuration(t) / 60)
 877    ;
 878   
 879  * Maximum movement of the generator downwards due to down ramp rate (6.2.1.2)
 880  GenerationRampDown(t,o) $ { posEnrgOfr(t,o) and PrimaryOffer(t,o) }..
 881    sum[ o1 $ PrimarySecondaryOffer(t,o,o1), GENERATION(t,o1) ]
 882  + GENERATION(t,o) + SURPLUSRAMPRATE(t,o)
 883  =g=
 884    generationStart(t,o) - (RampRateDn(t,o) * intervalDuration(t) / 60)
 885    ;
 886   
 887  *======= RAMPING CONSTRAINTS END================================================
 888   
 889   
 890  *======= HVDC TRANSMISSION EQUATIONS ===========================================
 891   
 892  * Maximum flow on each HVDC link (6.3.1.1)
 893  HVDClinkMaximumFlow(HVDClink(t,br)) $ useHVDCbranchLimits ..
 894    HVDCLINKFLOW(HVDClink)
 895  =l=
 896    sum[ fd $ ( ord(fd)=1 ), branchCapacity(HVDClink,fd) ]
 897    ;
 898   
 899  * Definition of losses on the HVDC link (6.3.1.2)
 900  HVDClinkLossDefinition(HVDClink(t,br))..
 901    HVDCLINKLOSSES(HVDClink)
 902  =e=
 903    sum[ validLossSegment(HVDClink,bp,fd)
 904       , HVDCBreakPointMWLoss(HVDClink,bp,fd) * LAMBDA(HVDClink,bp) ]
 905    ;
 906   
 907  * Definition of MW flow on the HVDC link (6.3.1.3)
 908  HVDClinkFlowDefinition(HVDClink(t,br))..
 909    HVDCLINKFLOW(HVDClink)
 910  =e=
 911    sum[ validLossSegment(HVDClink,bp,fd)
 912    , HVDCBreakPointMWFlow(HVDClink,bp,fd) * LAMBDA(HVDClink,bp) ]
 913    ;
 914   
 915  * Definition of weighting factor (6.3.1.4)
 916  LambdaDefinition(HVDClink(t,br))..
 917    sum(validLossSegment(HVDClink,bp,fd), LAMBDA(HVDClink,bp))
 918  =e=
 919    1
 920    ;
 921   
 922   
 923  *======= HVDC TRANSMISSION EQUATIONS END =======================================
 924   
 925   
 926   
 927  *======= HVDC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES ========================
 928  * HVDC transmission constraints to resolve non-physical loss and circular flow
 929  * These constraints are not explicitly formulated in SPD formulation
 930  * But you can find the description in "Post-Solve Checks
 931   
 932  * Definition 1 of the integer HVDC link flow variable
 933  * HVDC_North_Flow + HVDC_South_Flow
 934  * = BEN_HAY_1_Flow + BEN_HAY_2_Flow + HAY_BEN_1_Flow + HAY_BEN_2_Flow
 935  HVDClinkFlowIntegerDefinition1(t) $ { UseBranchFlowMIP(t) and
 936                                        resolveCircularBranchFlows }..
 937    sum[ fd, HVDCLINKFLOWDIRECTED_INTEGER(t,fd) ]
 938  =e=
 939    sum[ HVDCpoleDirection(HVDClink(t,br),fd), HVDCLINKFLOW(HVDClink) ]
 940    ;
 941   
 942  * Definition 2 of the integer HVDC link flow variable
 943  * HVDC_North_Flow = BEN_HAY_1_Flow + BEN_HAY_2_Flow
 944  * HVDC_South_Flow = HAY_BEN_1_Flow + HAY_BEN_2_Flow
 945  HVDClinkFlowIntegerDefinition2(t,fd) $ { UseBranchFlowMIP(t) and
 946                                           resolveCircularBranchFlows }..
 947    HVDCLINKFLOWDIRECTED_INTEGER(t,fd)
 948  =e=
 949    sum[ HVDCpoleDirection(HVDClink(t,br),fd), HVDCLINKFLOW(HVDClink) ]
 950    ;
 951   
 952  * Definition of the integer HVDC pole flow variable for intra-pole circulating branch flows
 953  * Pole1_North_Flow + Pole1_South_Flow = BEN_HAY_1_Flow + HAY_BEN_1_Flow
 954  * Pole2_North_Flow + Pole2_South_Flow = BEN_HAY_2_Flow + HAY_BEN_2_Flow
 955  HVDClinkFlowIntegerDefinition3(t,pole) $ { UseBranchFlowMIP(t) and
 956                                             resolveCircularBranchFlows }..
 957    sum[ br $ { HVDClink(t,br)
 958            and HVDCpoleBranchMap(pole,br) } , HVDCLINKFLOW(t,br) ]
 959  =e=
 960    sum[ fd, HVDCPOLEFLOW_INTEGER(t,pole,fd) ]
 961    ;
 962   
 963  * Definition of the integer HVDC pole flow variable for intra-pole circulating branch flows
 964  * Pole1_North_Flow = BEN_HAY_1_Flow + HAY_BEN_1_Flow
 965  * Pole1_South_Flow = BEN_HAY_1_Flow + HAY_BEN_1_Flow
 966  * Pole2_North_Flow = BEN_HAY_2_Flow + HAY_BEN_2_Flow
 967  * Pole2_South_Flow = BEN_HAY_2_Flow + HAY_BEN_2_Flow
 968   
 969  HVDClinkFlowIntegerDefinition4(t,pole,fd) $ { UseBranchFlowMIP(t) and
 970                                                resolveCircularBranchFlows }..
 971    sum[ HVDCpoleDirection(HVDClink(t,br),fd) $ HVDCpoleBranchMap(pole,br)
 972       , HVDCLINKFLOW(HVDClink) ]
 973  =e=
 974    HVDCPOLEFLOW_INTEGER(t,pole,fd)
 975    ;
 976   
 977  *======= HVDC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES END ====================
 978   
 979   
 980  *======= HVDC TRANSMISSION EQUATIONS FOR SOS2 VARIABLES ========================
 981  * Definition 1 of weighting factor when branch integer constraints are needed
 982  LambdaIntegerDefinition1(HVDClink(t,br)) $ { UseBranchFlowMIP(t) and
 983                                               resolveHVDCnonPhysicalLosses }..
 984    sum[ validLossSegment(HVDClink,bp,fd), LAMBDAINTEGER(HVDClink,bp) ]
 985  =e=
 986    1
 987    ;
 988   
 989  * Definition 2 of weighting factor when branch integer constraints are needed
 990  LambdaIntegerDefinition2(HVDClink(t,br),bp)
 991    $ { UseBranchFlowMIP(t) and resolveHVDCnonPhysicalLosses
 992    and sum[ fd $ validLossSegment(HVDClink,bp,fd), 1] }..
 993    LAMBDAINTEGER(HVDClink,bp)
 994  =e=
 995    LAMBDA(HVDClink,bp)
 996    ;
 997   
 998  *======= HVDC TRANSMISSION EQUATIONS END =======================================
 999   
1000   
1001   
1002   
1003  *======= AC TRANSMISSION EQUATIONS =============================================
1004   
1005  * 1st definition of the net injection at buses corresponding to AC nodes (6.4.1.1)
1006  ACnodeNetInjectionDefinition1(bus(t,b))..
1007    ACNODENETINJECTION(t,b)
1008  =e=
1009    sum[ ACBranchSendingBus(ACBranch(t,br),b,fd)
1010       , ACBRANCHFLOWDIRECTED(ACBranch,fd)
1011       ]
1012  - sum[ ACBranchReceivingBus(ACBranch(t,br),b,fd)
1013       , ACBRANCHFLOWDIRECTED(ACBranch,fd)
1014       ]
1015    ;
1016   
1017  * 2nd definition of the net injection at buses corresponding to AC nodes (6.4.1.2)
1018  ACnodeNetInjectionDefinition2(bus(t,b))..
1019    ACNODENETINJECTION(t,b)
1020  =e=
1021    sum[ offerNode(t,o,n) $ NodeBus(t,n,b)
1022       , nodeBusAllocationFactor(t,n,b) * GENERATION(t,o) ]
1023  - sum[ BidNode(t,bd,n) $ NodeBus(t,n,b)
1024       , NodeBusAllocationFactor(t,n,b) * PURCHASE(t,bd) ]
1025  - sum[ NodeBus(t,n,b)
1026       , NodeBusAllocationFactor(t,n,b) * RequiredLoad(t,n) ]
1027  + sum[ HVDClinkReceivingBus(HVDClink(t,br),b), HVDCLINKFLOW(HVDClink)   ]
1028  - sum[ HVDClinkReceivingBus(HVDClink(t,br),b), HVDCLINKLOSSES(HVDClink) ]
1029  - sum[ HVDClinkSendingBus(HVDClink(t,br),b)  , HVDCLINKFLOW(HVDClink)   ]
1030  - sum[ HVDClinkBus(HVDClink(t,br),b),   0.5 * branchFixedLoss(HVDClink) ]
1031  - sum[ ACBranchReceivingBus(ACBranch(t,br),b,fd)
1032       , branchReceivingEndLossProportion
1033       * ACBRANCHLOSSESDIRECTED(ACBranch,fd) ]
1034  - sum[ ACBranchSendingBus(ACBranch(t,br),b,fd)
1035       , (1 - branchReceivingEndLossProportion)
1036       * ACBRANCHLOSSESDIRECTED(ACBranch,fd) ]
1037  - sum[ BranchBusConnect(ACBranch(t,br),b), 0.5*branchFixedLoss(ACBranch) ]
1038  + DEFICITBUSGENERATION(t,b) - SURPLUSBUSGENERATION(t,b)
1039  * Note that we model energy scarcity as penalty instead of benefit like SPD
1040  * The reason for this is to avoid numerical issues.
1041  + sum[ NodeBus(t,n,b)
1042       , NodeBusAllocationFactor(t,n,b) * ENERGYSCARCITYNODE(t,n)]
1043    ;
1044   
1045  * Maximum flow on the AC branch (6.4.1.3)
1046  ACBranchMaximumFlow(ACbranch(t,br),fd) $ useACbranchLimits..
1047    ACBRANCHFLOWDIRECTED(ACBranch,fd) - SURPLUSBRANCHFLOW(ACBranch)
1048  =l=
1049    branchCapacity(ACBranch,fd)
1050    ;
1051   
1052  * Relationship between directed and undirected branch flow variables (6.4.1.4)
1053  ACBranchFlowDefinition(ACBranch(t,br))..
1054    ACBRANCHFLOW(ACBranch)
1055  =e=
1056    sum[ fd $ (ord(fd) = 1), ACBRANCHFLOWDIRECTED(ACBranch,fd) ]
1057  - sum[ fd $ (ord(fd) = 2), ACBRANCHFLOWDIRECTED(ACBranch,fd) ]
1058    ;
1059   
1060  * Equation that describes the linear load flow (6.4.1.5)
1061  LinearLoadFlow(ACBranch(t,br))..
1062    ACBRANCHFLOW(ACBranch)
1063  =e=
1064    branchSusceptance(ACBranch)
1065    * sum[ BranchBusDefn(ACBranch,frB,toB)
1066         , ACNODEANGLE(t,frB) - ACNODEANGLE(t,toB) ]
1067    ;
1068   
1069  * Limit on each AC branch flow block (6.4.1.6)
1070  ACBranchBlockLimit(validLossSegment(ACBranch(t,br),los,fd))..
1071    ACBRANCHFLOWBLOCKDIRECTED(ACBranch,los,fd)
1072  =l=
1073    ACBranchLossMW(ACBranch,los,fd)
1074    ;
1075   
1076  * Composition of the directed branch flow from the block branch flow (6.4.1.7)
1077  ACDirectedBranchFlowDefinition(ACBranch(t,br),fd)..
1078    ACBRANCHFLOWDIRECTED(ACBranch,fd)
1079  =e=
1080    sum[ validLossSegment(ACBranch,los,fd)
1081       , ACBRANCHFLOWBLOCKDIRECTED(ACBranch,los,fd) ]
1082    ;
1083   
1084  * Calculation of the losses in each loss segment (6.4.1.8) - Modified for BranchcReverseRatings
1085  ACBranchLossCalculation(validLossSegment(ACBranch(t,br),los,fd))..
1086    ACBRANCHLOSSESBLOCKDIRECTED(ACBranch,los,fd)
1087  =e=
1088    ACBRANCHFLOWBLOCKDIRECTED(ACBranch,los,fd)
1089    * ACBranchLossFactor(ACBranch,los,fd)
1090    ;
1091   
1092  * Composition of the directed branch losses from the block branch losses (6.4.1.9)
1093  ACDirectedBranchLossDefinition(ACBranch(t,br),fd)..
1094    ACBRANCHLOSSESDIRECTED(ACBranch,fd)
1095  =e=
1096    sum[ validLossSegment(ACBranch,los,fd)
1097       , ACBRANCHLOSSESBLOCKDIRECTED(ACBranch,los,fd) ]
1098    ;
1099   
1100  *======= AC TRANSMISSION EQUATIONS END =========================================
1101   
1102   
1103   
1104  *======= AC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES ==========================
1105  * AC transmission constraints to resolve circular flow
1106  * These constraints are not explicitly formulated in SPD formulation
1107  * But you can find the description in "Post-Solve Checks"
1108   
1109  * Integer constraint to enforce a flow direction on loss AC branches in the
1110  * presence of circular branch flows or non-physical losses
1111  ACDirectedBranchFlowIntegerDefinition1(ACBranch(lossBranch(t,br)))
1112    $ { UseBranchFlowMIP(t) and resolveCircularBranchFlows }..
1113    sum[ fd, ACBRANCHFLOWDIRECTED_INTEGER(ACBranch,fd) ]
1114  =e=
1115    sum[ fd, ACBRANCHFLOWDIRECTED(ACBranch,fd) ]
1116    ;
1117   
1118  * Integer constraint to enforce a flow direction on loss AC branches in the
1119  * presence of circular branch flows or non-physical losses
1120  ACDirectedBranchFlowIntegerDefinition2(ACBranch(lossBranch(t,br)),fd)
1121    $ { UseBranchFlowMIP(t) and resolveCircularBranchFlows }..
1122    ACBRANCHFLOWDIRECTED_INTEGER(ACBranch,fd)
1123  =e=
1124    ACBRANCHFLOWDIRECTED(ACBranch,fd)
1125    ;
1126   
1127  *======= AC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES END ======================
1128   
1129   
1130   
1131  *======= RISK EQUATIONS ========================================================
1132   
1133  * 6.5.1.1 : Calculation of the risk offset variable for the DCCE risk class.
1134  RiskOffsetCalculation_DCCE(t,isl,resC,riskC)
1135    $ { HVDCrisk(riskC) and ContingentEvents(riskC)  }..
1136    RISKOFFSET(t,isl,resC,riskC)
1137  =e=
1138    FreeReserve(t,isl,resC,riskC) + HVDCPoleRampUp(t,isl,resC,riskC)
1139    ;
1140   
1141  * 6.5.1.3 : Calculation of the risk offset variable for the DCECE risk class.
1142  RiskOffsetCalculation_DCECE(t,isl,resC,riskC)
1143    $ { HVDCrisk(riskC) and ExtendedContingentEvent(riskC) }..
1144    RISKOFFSET(t,isl,resC,riskC)
1145  =e=
1146    FreeReserve(t,isl,resC,riskC)
1147    ;
1148   
1149  * 6.5.1.4 : Calculation of the net received HVDC MW flow into an island.
1150  HVDCRecCalculation(t,isl)..
1151    HVDCREC(t,isl)
1152  =e=
1153    sum[ (b,br) $ { BusIsland(t,b,isl)
1154                and HVDClinkSendingBus(t,br,b)
1155                and HVDCLink(t,br)
1156                  }, -HVDCLINKFLOW(t,br)
1157       ]
1158  + sum[ (b,br) $ { BusIsland(t,b,isl)
1159                and HVDClinkReceivingBus(t,br,b)
1160                and HVDCLink(t,br)
1161                  }, HVDCLINKFLOW(t,br) - HVDCLINKLOSSES(t,br)
1162       ]
1163    ;
1164   
1165  * 6.5.1.5 : Calculation of the island risk for a DCCE and DCECE.
1166  HVDCIslandRiskCalculation(t,isl,resC,HVDCrisk)..
1167    ISLANDRISK(t,isl,resC,HVDCrisk)
1168  =e=
1169    IslandRiskAdjustmentFactor(t,isl,resC,HVDCrisk)
1170    * [ HVDCREC(t,isl)
1171      - RISKOFFSET(t,isl,resC,HVDCrisk)
1172      + modulationRiskClass(t,HVDCrisk)
1173      ]
1174  * Scarcity reserve (only applied for CE risk)
1175    - RESERVESHORTFALL(t,isl,resC,HVDCrisk) $ ContingentEvents(HVDCrisk)
1176    ;
1177   
1178  * 6.5.1.6 : Calculation of the risk of risk setting generators
1179  GenIslandRiskCalculation_1(t,isl,o,resC,GenRisk)
1180    $ islandRiskGenerator(t,isl,o) ..
1181    GENISLANDRISK(t,isl,o,resC,GenRisk)
1182  =e=
1183    IslandRiskAdjustmentFactor(t,isl,resC,GenRisk)
1184    * [ GENERATION(t,o)
1185      - FreeReserve(t,isl,resC,GenRisk)
1186      + FKBand(t,o)
1187      + sum[ resT, RESERVE(t,o,resC,resT) ]
1188      + sum[ o1 $ PrimarySecondaryOffer(t,o,o1)
1189           , sum[ resT, RESERVE(t,o1,resC,resT) ] + GENERATION(t,o1) ]
1190      ]
1191  * NMIR update
1192  - RESERVESHAREEFFECTIVE(t,isl,resC,GenRisk)$reserveShareEnabled(t,resC)
1193  * Scarcity reserve (only applied for CE risk)
1194  - RESERVESHORTFALLUNIT(t,isl,o,resC,GenRisk) $ ContingentEvents(GenRisk)
1195    ;
1196   
1197  * 6.5.1.6 : Calculation of the island risk for risk setting generators
1198  GenIslandRiskCalculation(t,isl,o,resC,GenRisk)
1199    $ islandRiskGenerator(t,isl,o) ..
1200    ISLANDRISK(t,isl,resC,GenRisk)
1201  =g=
1202    GENISLANDRISK(t,isl,o,resC,GenRisk) ;
1203   
1204  * 6.5.1.7 : Calculation of the island risk based on manual specifications
1205  ManualIslandRiskCalculation(t,isl,resC,ManualRisk)..
1206    ISLANDRISK(t,isl,resC,ManualRisk)
1207  =e=
1208    IslandRiskAdjustmentFactor(t,isl,resC,ManualRisk)
1209    * [ IslandMinimumRisk(t,isl,resC,ManualRisk)
1210      - FreeReserve(t,isl,resC,ManualRisk)
1211      ]
1212  * NMIR update
1213  - RESERVESHAREEFFECTIVE(t,isl,resC,ManualRisk)$reserveShareEnabled(t,resC)
1214  * Scarcity reserve (only applied for CE risk)
1215  - RESERVESHORTFALL(t,isl,resC,ManualRisk) $ ContingentEvents(ManualRisk)
1216    ;
1217   
1218  * 6.5.1.8: Define a flag to show if HVDC sending zero MW flow from an island
1219  HVDCSendMustZeroBinaryDefinition(t,isl).. HVDCSENT(t,isl) =l= BigM * [ 1 - HVDCSENDZERO(t,isl) ] ;
1220   
1221   
1222  * 6.5.1.9 : Calculation of the island risk for an HVDC secondary generation risk
1223  * HVDC secondary risk includes HVDC risk and Generation of both primary and secondary generation unit + cleared reserve + the FKBand for generator primary risk
1224  HVDCIslandSecRiskCalculation_GEN_1(t,isl,o,resC,HVDCSecRisk)
1225    $ { islandRiskGenerator(t,isl,o)  and
1226        HVDCSecRiskEnabled(t,isl,HVDCSecRisk) }..
1227    HVDCGENISLANDRISK(t,isl,o,resC,HVDCSecRisk)
1228  =e=
1229    IslandRiskAdjustmentFactor(t,isl,resC,HVDCSecRisk)
1230    * [ GENERATION(t,o)
1231      - FreeReserve(t,isl,resC,HVDCSecRisk)
1232      + HVDCREC(t,isl)
1233      - HVDCSecRiskSubtractor(t,isl)
1234      + FKBand(t,o)
1235      + sum[ resT, RESERVE(t,o,resC,resT) ]
1236      + sum[ o1 $ PrimarySecondaryOffer(t,o,o1)
1237           , sum[ resT, RESERVE(t,o1,resC,resT) ] + GENERATION(t,o1) ]
1238      + modulationRiskClass(t,HVDCSecRisk)
1239      ]
1240  * Scarcity reserve (only applied for CE risk)
1241    - RESERVESHORTFALLUNIT(t,isl,o,resC,HVDCSecRisk) $ ContingentEvents(HVDCSecRisk)
1242  * HVDC secondary risk not applied if HVDC sent is zero
1243    - BigM * sum[ isl1 $ (not sameas(isl1,isl)), HVDCSENDZERO(t,isl) ]
1244    ;
1245   
1246  * 6.5.1.9 : Calculation of the island risk for an HVDC secondary generation risk
1247  HVDCIslandSecRiskCalculation_GEN(t,isl,o,resC,HVDCSecRisk)
1248    $ { islandRiskGenerator(t,isl,o)  and
1249        HVDCSecRiskEnabled(t,isl,HVDCSecRisk) }..
1250    ISLANDRISK(t,isl,resC,HVDCSecRisk)
1251  =g=
1252    HVDCGENISLANDRISK(t,isl,o,resC,HVDCSecRisk)
1253    ;
1254   
1255  * 6.5.1.10: Calculation of the island risk for an HVDC secondary manual risk
1256  HVDCIslandSecRiskCalculation_Manu_1(t,isl,resC,HVDCSecRisk)
1257    $ HVDCSecRiskEnabled(t,isl,HVDCSecRisk)..
1258    HVDCMANISLANDRISK(t,isl,resC,HVDCSecRisk)
1259  =e=
1260    IslandRiskAdjustmentFactor(t,isl,resC,HVDCSecRisk)
1261    * [ IslandMinimumRisk(t,isl,resC,HVDCSecRisk)
1262      - FreeReserve(t,isl,resC,HVDCSecRisk)
1263      + HVDCREC(t,isl)
1264      - HVDCSecRiskSubtractor(t,isl)
1265      + modulationRiskClass(t,HVDCSecRisk)
1266      ]
1267  * Scarcity reserve (only applied for CE risk)
1268    - RESERVESHORTFALL(t,isl,resC,HVDCSecRisk) $ ContingentEvents(HVDCSecRisk)
1269  * HVDC secondary risk not applied if HVDC sent is zero
1270    - BigM * sum[ isl1 $ (not sameas(isl1,isl)), HVDCSENDZERO(t,isl) ]
1271    ;
1272   
1273  * 6.5.1.10: Calculation of the island risk for an HVDC secondary manual risk
1274  HVDCIslandSecRiskCalculation_Manual(t,isl,resC,HVDCSecRisk)
1275    $ HVDCSecRiskEnabled(t,isl,HVDCSecRisk)..
1276    ISLANDRISK(t,isl,resC,HVDCSecRisk)
1277  =g=
1278    HVDCMANISLANDRISK(t,isl,resC,HVDCSecRisk)
1279    ;
1280   
1281  * 6.5.1.11: Calculation of the risk of risk group
1282  GenIslandRiskGroupCalculation_1(t,isl,rg,resC,GenRisk)
1283    $ islandRiskGroup(t,isl,rg,GenRisk)..
1284    GENISLANDRISKGROUP(t,isl,rg,resC,GenRisk)
1285  =e=
1286    IslandRiskAdjustmentFactor(t,isl,resC,GenRisk)
1287    * [ sum[ o $ { offerIsland(t,o,isl)
1288               and riskGroupOffer(t,rg,o,GenRisk)
1289                 } , GENERATION(t,o) + FKBand(t,o)
1290                   + sum[ resT, RESERVE(t,o,resC,resT) ]
1291           ]
1292      - FreeReserve(t,isl,resC,GenRisk)
1293      ]
1294  * NMIR update
1295  - RESERVESHAREEFFECTIVE(t,isl,resC,GenRisk)$reserveShareEnabled(t,resC)
1296  * Scarcity reserve (only applied for CE risk)
1297  - RESERVESHORTFALLGROUP(t,isl,rg,resC,GenRisk) $ ContingentEvents(GenRisk)
1298    ;
1299   
1300  * 6.5.1.11: Calculation of the island risk for risk group
1301  GenIslandRiskGroupCalculation(t,isl,rg,resC,GenRisk)
1302    $ islandRiskGroup(t,isl,rg,GenRisk)..
1303    ISLANDRISK(t,isl,resC,GenRisk)
1304  =g=
1305    GENISLANDRISKGROUP(t,isl,rg,resC,GenRisk)
1306    ;
1307   
1308  *======= RISK EQUATIONS END ====================================================
1309   
1310   
1311  *======= NMIR - RESERVE SHARING EQUATIONS ======================================
1312   
1313  * General NMIR equations start -------------------------------------------------
1314   
1315  * Calculation of effective shared reserve - (6.5.2.1)
1316  EffectiveReserveShareCalculation(t,isl,resC,riskC)
1317    $ { reserveShareEnabled(t,resC)
1318    and ( GenRisk(riskC) or ManualRisk(riskC) ) }..
1319    RESERVESHAREEFFECTIVE(t,isl,resC,riskC)
1320  =l=
1321    Sum[ rd , RESERVESHARERECEIVED(t,isl,resC,rd)
1322            * effectiveFactor(t,isl,resC,riskC) ]
1323    ;
1324   
1325  * Shared offered reserve is limited by cleared reserved - (6.5.2.2)
1326  SharedReserveLimitByClearedReserve(t,isl,resC)
1327    $ reserveShareEnabled(t,resC)..
1328    SHAREDRESERVE(t,isl,resC)
1329  =l=
1330    ISLANDRESERVE(t,isl,resC)
1331    ;
1332   
1333  * Both cleared reserved and shareable free reserve can be shared - (6.5.2.4)
1334  BothClearedAndFreeReserveCanBeShared(t,isl,resC,rd)
1335    $ reserveShareEnabled(t,resC)..
1336    RESERVESHARESENT(t,isl,resC,rd)
1337  =l=
1338    SHAREDRESERVE(t,isl,resC) + SHAREDNFR(t,isl)$(ord(resC)=1)
1339    ;
1340   
1341  * Reserve share sent is limited by HVDC control band - (6.5.2.5)
1342  ReserveShareSentLimitByHVDCControlBand(t,isl,resC,rd)
1343    $ reserveShareEnabled(t,resC)..
1344    RESERVESHARESENT(t,isl,resC,rd)
1345  =l=
1346    [ HVDCControlBand(t,rd) - modulationRisk(t)
1347    ] $ (HVDCControlBand(t,rd) > modulationRisk(t))
1348    ;
1349   
1350  * Forward reserve share sent is limited by HVDC capacity - (6.5.2.6)
1351  FwdReserveShareSentLimitByHVDCCapacity(t,isl,resC,rd)
1352    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1353    RESERVESHARESENT(t,isl,resC,rd)
1354  + HVDCSENT(t,isl)
1355  =l=
1356    [ HVDCMax(t,isl) - modulationRisk(t) ] $ (HVDCMax(t,isl) > modulationRisk(t))
1357  ;
1358   
1359  * Reverse shared reserve is only possible for receiving island - (6.5.2.7)
1360  ReverseReserveOnlyToEnergySendingIsland(t,isl,resC,rd)
1361    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1362    RESERVESHARESENT(t,isl,resC,rd)
1363  =l=
1364    BigM * [ 1 - HVDCSENDING(t,isl) ]
1365    ;
1366   
1367  * Reverse shared reserve recieved at an island is limited by HVDC control band - (6.5.2.8)
1368  ReverseReserveShareLimitByHVDCControlBand(t,isl,resC,rd)
1369    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1370    RESERVESHARERECEIVED(t,isl,resC,rd)
1371  =l=
1372    HVDCSENDING(t,isl) * [ HVDCControlBand(t,rd) - modulationRisk(t)
1373                         ] $ ( HVDCControlBand(t,rd) > modulationRisk(t) )
1374    ;
1375   
1376  * Forward received shared reserve only possible for receiving island - (3.4.2.9)
1377  ForwardReserveOnlyToEnergyReceivingIsland(t,isl,resC,rd)
1378    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1379    RESERVESHARERECEIVED(t,isl,resC,rd)
1380  =l=
1381    BigM * [ 1 - HVDCSENDING(t,isl) ]
1382    ;
1383   
1384  * Reverse shared reserve limit if HVDC sent flow in reverse zone - (6.5.2.10)
1385  ReverseReserveLimitInReserveZone(t,isl,resC,rd,z)
1386    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) and (ord(z) = 3) }..
1387    RESERVESHARERECEIVED(t,isl,resC,rd)
1388  =l=
1389    HVDCSENT(t,isl)
1390  - (MonopoleMinimum(t) + modulationRisk(t))
1391  + BigM * [ 1 - INZONE(t,isl,resC,z) ]
1392    ;
1393   
1394  * No reverse shared reserve if HVDC sent flow in no reverse zone &
1395  * No forward reserve if HVDC sent flow in no reverse zone and RP disabled
1396  * (6.5.2.11) & (6.5.2.18)
1397  ZeroReserveInNoReserveZone(t,isl,resC,z)
1398    $ { reserveShareEnabled(t,resC) and (ord(z) = 2) }..
1399    Sum[ rd $ (ord(rd) = 2), RESERVESHARERECEIVED(t,isl,resC,rd) ]
1400  + Sum[ rd $ (ord(rd) = 1), RESERVESHARESENT(t,isl,resC,rd)
1401       ] $ {reserveRoundPower(t,resC) = 0}
1402  =l=
1403    BigM * [ 1 - INZONE(t,isl,resC,z) ]
1404    ;
1405   
1406  * Across both island, only one zone is active for each reserve class -(6.5.2.12)
1407  OnlyOneActiveHVDCZoneForEachReserveClass(t,resC) $ reserveShareEnabled(t,resC)..
1408    Sum[ (isl,z), INZONE(t,isl,resC,z) ] =e= 1 ;
1409   
1410  * HVDC sent from sending island only - (6.5.2.13)
1411  ZeroSentHVDCFlowForNonSendingIsland(t,isl) $ reserveShareEnabledOverall(t)..
1412    HVDCSENT(t,isl) =l= BigM * HVDCSENDING(t,isl) ;
1413   
1414  * HVDC sent from an island <= RoundPowerZoneExit level if in round power zone
1415  * of that island - (6.5.2.14)
1416  RoundPowerZoneSentHVDCUpperLimit(t,isl,resC,z)
1417    $ { reserveShareEnabled(t,resC) and (ord(z) = 1) }..
1418    HVDCSENT(t,isl)
1419  =l=
1420    roPwrZoneExit(t,resC) + BigM * [ 1 - INZONE(t,isl,resC,z) ]
1421  ;
1422   
1423  * An island is HVDC sending island if HVDC flow sent is in one of the three
1424  * zones for each reserve class - (6.5.2.15)
1425  HVDCSendingIslandDefinition(t,isl,resC) $ reserveShareEnabled(t,resC)..
1426    HVDCSENDING(t,isl) =e= Sum[ z, INZONE(t,isl,resC,z) ] ;
1427   
1428  * One and only one island is HVDC sending island - (6.5.2.19)
1429  OnlyOneSendingIslandExists(t) $ reserveShareEnabledOverall(t)..
1430   Sum[ isl, HVDCSENDING(t,isl) ] =e= 1 ;
1431   
1432  * Total HVDC sent from each island - (6.5.2.20)
1433  HVDCSentCalculation(t,isl) $ reserveShareEnabledOverall(t)..
1434    HVDCSENT(t,isl)
1435  =e=
1436    Sum[ (b,br) $ { BusIsland(t,b,isl)
1437                and HVDClinkSendingBus(t,br,b)
1438                and HVDClink(t,br)
1439                  }, HVDCLINKFLOW(t,br)
1440       ]
1441  ;
1442   
1443  * General NMIR equations end ---------------------------------------------------
1444   
1445   
1446  * Lamda loss model -------------------------------------------------------------
1447   
1448  * HVDC flow + forward reserve sent from an island - (6.5.2.21)
1449  HVDCFlowAccountedForForwardReserve(t,isl,resC,rd)
1450    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1451    HVDCRESERVESENT(t,isl,resC,rd)
1452  =e=
1453    RESERVESHARESENT(t,isl,resC,rd) + HVDCSENT(t,isl)
1454    ;
1455   
1456  * Received forward shared reserve at an HVDC receiving island - (6.5.2.22)
1457  ForwardReserveReceivedAtHVDCReceivingIsland(t,isl,resC,rd)
1458    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1459    RESERVESHARERECEIVED(t,isl,resC,rd)
1460  =e=
1461    Sum[ isl1 $ (not sameas(isl1,isl))
1462        , RESERVESHARESENT(t,isl1,resC,rd)
1463        - HVDCRESERVELOSS(t,isl1,resC,rd)
1464        + HVDCSENTLOSS(t,isl1) ]
1465    ;
1466   
1467  * HVDC flow - received reverse reserve sent from an island - (6.5.2.23)
1468  HVDCFlowAccountedForReverseReserve(t,isl,resC,rd)
1469    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1470    HVDCRESERVESENT(t,isl,resC,rd)
1471  =e=
1472    HVDCSENT(t,isl) - RESERVESHARERECEIVED(t,isl,resC,rd)
1473    ;
1474   
1475  * Reverse reserve RECEIVED at an HVDC sending island - (6.5.2.24)
1476  ReverseReserveReceivedAtHVDCSendingIsland(t,isl,resC,rd)
1477    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1478    RESERVESHARERECEIVED(t,isl,resC,rd)
1479  =e=
1480    Sum[ isl1 $ (not sameas(isl1,isl)), RESERVESHARESENT(t,isl1,resC,rd) ]
1481  - HVDCRESERVELOSS(t,isl,resC,rd)
1482  + HVDCSENTLOSS(t,isl)
1483    ;
1484   
1485  * Total weight factor = 1 for HVDC energy sent from an island - (6.5.2.25)
1486  HVDCSentEnergyLambdaDefinition(t,isl) $ reserveShareEnabledOverall(t)..
1487    Sum[ bp $ (ord(bp) <= 7),LAMBDAHVDCENERGY(t,isl,bp) ] =e= 1 ;
1488   
1489  * Lambda definition of total HVDC energy flow sent from an island
1490  * (6.5.2.26) - SPD version 11.0
1491  HVDCSentEnergyFlowDefinition(t,isl) $ reserveShareEnabledOverall(t)..
1492    HVDCSENT(t,isl)
1493  =e=
1494    Sum[ bp $ (ord(bp) <= 7), HVDCSentBreakPointMWFlow(t,isl,bp)
1495                            * LAMBDAHVDCENERGY(t,isl,bp) ]
1496    ;
1497   
1498  * Lambda definition of total loss of HVDC energy sent from an island
1499  * (6.5.2.27) - SPD version 11.0
1500  HVDCSentEnergyLossesDefinition(t,isl) $ reserveShareEnabledOverall(t)..
1501    HVDCSENTLOSS(t,isl)
1502  =e=
1503    Sum[ bp $ (ord(bp) <= 7), HVDCSentBreakPointMWLoss(t,isl,bp)
1504                            * LAMBDAHVDCENERGY(t,isl,bp) ]
1505    ;
1506   
1507  * Total weight factor = 1 for HVDC+reserve sent from an island -(6.5.2.28)
1508  HVDCSentReserveLambdaDefinition(t,isl,resC,rd) $ reserveShareEnabled(t,resC)..
1509    Sum[ rsbp, LAMBDAHVDCRESERVE(t,isl,resC,rd,rsbp) ] =e= 1 ;
1510   
1511  * Lambda definition of Reserse + Energy flow on HVDC sent from an island
1512  * (3.4.2.29) - SPD version 11.0
1513  HVDCSentReserveFlowDefinition(t,isl,resC,rd)
1514    $ reserveShareEnabled(t,resC)..
1515    HVDCRESERVESENT(t,isl,resC,rd)
1516  =e=
1517    Sum[ rsbp, HVDCReserveBreakPointMWFlow(t,isl,rsbp)
1518             * LAMBDAHVDCRESERVE(t,isl,resC,rd,rsbp) ]
1519    ;
1520   
1521  * Lambda definition of Reserse + Energy Loss on HVDC sent from an island
1522  * (3.4.2.30) - SPD version 11.0
1523  HVDCSentReserveLossesDefinition(t,isl,resC,rd)
1524    $ reserveShareEnabled(t,resC)..
1525    HVDCRESERVELOSS(t,isl,resC,rd)
1526  =e=
1527    Sum[ rsbp, HVDCReserveBreakPointMWLoss(t,isl,rsbp)
1528             * LAMBDAHVDCRESERVE(t,isl,resC,rd,rsbp) ]
1529    ;
1530   
1531  * Lamda loss model end ---------------------------------------------------------
1532   
1533   
1534  * Calculate Reserve sharing excess penalty -------------------------------------
1535   
1536  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation
1537  * Calculate max effective shared reserve for CE risk received at island (6.5.2.31)
1538  ReserveShareEffective_CE_Calculation(t,isl,resC,riskC)
1539    $ { reserveShareEnabled(t,resC) and ContingentEvents(riskC)
1540    and ( GenRisk(riskC) or ManualRisk(riskC) ) }..
1541    RESERVESHAREEFFECTIVE_CE(t,isl,resC)
1542  =g=
1543    RESERVESHAREEFFECTIVE(t,isl,resC,riskC)
1544    ;
1545   
1546  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation
1547  * Calculate max effective shared reserve for CE risk received at island (6.5.2.31)
1548  ReserveShareEffective_ECE_Calculation(t,isl,resC,riskC)
1549    $ { reserveShareEnabled(t,resC) and ExtendedContingentEvent(riskC)
1550    and ( GenRisk(riskC) or ManualRisk(riskC) ) }..
1551    RESERVESHAREEFFECTIVE_ECE(t,isl,resC)
1552  =g=
1553    RESERVESHAREEFFECTIVE(t,isl,resC,riskC)
1554    ;
1555   
1556  * Constraint to avoid excessive reserve share (6.5.2.31)
1557  ExcessReserveSharePenalty(t) $ reserveShareEnabledOverall(t)..
1558    RESERVESHAREPENALTY(t)
1559  =e=
1560    sum[ isl, 1e-5 * SHAREDNFR(t,isl) ]
1561  + sum[ (isl,resC), 2e-5 * SHAREDRESERVE(t,isl,resC) ]
1562  * Tuong Nguyen modified on 24 Feb 2021 to correct the calculation
1563  *+ sum[ (isl,resC,riskC), 3e-5 * RESERVESHAREEFFECTIVE(t,isl,resC,riskC)]
1564  + sum[ (isl,resC), 3e-5 * RESERVESHAREEFFECTIVE_CE(t,isl,resC)]
1565  + sum[ (isl,resC), 3e-5 * RESERVESHAREEFFECTIVE_ECE(t,isl,resC)]
1566  ;
1567  * Calculate Reserve sharing excess penalty end ---------------------------------
1568   
1569  *======= NMIR - RESERVE SHARING EQUATIONS END ==================================
1570   
1571   
1572   
1573  *======= RESERVE EQUATIONS =====================================================
1574  * 6.5.3.1: Maximum PLSR as a proportion of the block MW
1575  PLSRReserveProportionMaximum(offer(t,o),blk,resC,PLRO)
1576    $ resOfrBlk(offer,blk,resC,PLRO)..
1577    RESERVEBLOCK(Offer,blk,resC,PLRO)
1578  =l=
1579    ResOfrPct(Offer,blk,resC) * GENERATION(Offer)
1580    ;
1581   
1582  * 6.5.3.3: Cleared IL reserve is constrained by cleared dispatchable demand'
1583  ReserveInterruptibleOfferLimit(t,o,bd,resC,ILRO(resT))
1584    $ { sameas(o,bd) and offer(t,o) and bid(t,bd) and (sum[blk,DemBidMW(t,bd,blk)] >= 0) } ..
1585    RESERVE(t,o,resC,resT)
1586  =l=
1587    PURCHASE(t,bd);
1588   
1589   
1590  * 6.5.3.4 Definition of the reserve offers of different classes and types
1591  ReserveOfferDefinition(offer(t,o),resC,resT)..
1592    RESERVE(offer,resC,resT)
1593  =e=
1594    sum[ blk, RESERVEBLOCK(offer,blk,resC,resT) ]
1595    ;
1596   
1597  * 6.5.3.5 Definition of maximum energy and reserves from each generator
1598  EnergyAndReserveMaximum(offer(t,o),resC)..
1599    GENERATION(offer)
1600  + reserveMaximumFactor(offer,resC)
1601    * sum[ resT $ (not ILRO(resT)), RESERVE(offer,resC,resT) ]
1602  =l=
1603    ReserveGenerationMaximum(offer)
1604    ;
1605   
1606  *======= RESERVE EQUATIONS END =================================================
1607   
1608   
1609   
1610  *======= RESERVE SCARCITY ======================================================
1611  * 6.5.4.2: Total Reserve Shortfall for DCCE risk
1612  HVDCRiskReserveShortFallCalculation(t,isl,resC,HVDCrisk(RiskC))
1613    $ ContingentEvents(riskC)..
1614    RESERVESHORTFALL(t,isl,resC,riskC)
1615  =e=
1616    sum[ blk, RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
1617    ;
1618   
1619  * 6.5.4.2: Total Reserve Shortfall for Manual risk
1620  ManualRiskReserveShortFallCalculation(t,isl,resC,ManualRisk(RiskC))
1621    $ ContingentEvents(riskC)..
1622    RESERVESHORTFALL(t,isl,resC,riskC)
1623  =e=
1624    sum[ blk, RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
1625    ;
1626   
1627  * 6.5.4.2: Total Reserve Shortfall for generation risk unit
1628  GenRiskReserveShortFallCalculation(t,isl,o,resC,GenRisk(RiskC))
1629    $ { ContingentEvents(riskC) and  islandRiskGenerator(t,isl,o)  }..
1630    RESERVESHORTFALLUNIT(t,isl,o,resC,riskC)
1631  =e=
1632    sum[ blk, RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
1633    ;
1634   
1635  * 6.5.4.2: Total Reserve Shortfall for generation unit + HVDC risk
1636  HVDCsecRiskReserveShortFallCalculation(t,isl,o,resC,HVDCsecRisk(RiskC))
1637    $ { ContingentEvents(riskC) and  islandRiskGenerator(t,isl,o)  }..
1638    RESERVESHORTFALLUNIT(t,isl,o,resC,riskC)
1639  =e=
1640    sum[ blk, RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
1641    ;
1642   
1643  * 6.5.4.2: Total Reserve Shortfall for Manual risk + HVDC risk
1644  HVDCsecManualRiskReserveShortFallCalculation(t,isl,resC,HVDCsecRisk(RiskC))
1645    $ ContingentEvents(riskC)..
1646    RESERVESHORTFALL(t,isl,resC,riskC)
1647  =e=
1648    sum[ blk, RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
1649    ;
1650   
1651  * 6.5.4.2: Total Reserve Shortfall for risk group
1652  RiskGroupReserveShortFallCalculation(t,isl,rg,resC,GenRisk(RiskC))
1653    $ { ContingentEvents(riskC) and islandRiskGroup(t,isl,rg,RiskC)}..
1654    RESERVESHORTFALLGROUP(t,isl,rg,resC,riskC)
1655  =e=
1656    sum[ blk, RESERVESHORTFALLGROUPBLK(t,isl,rg,resC,riskC,blk) ]
1657    ;
1658   
1659  *======= RESERVE SCARCITY END ==================================================
1660   
1661   
1662   
1663  *======= RISK AND RESERVE BALANCE EQUATIONS ====================================
1664   
1665  * 6.5.5.1: Calculate total island cleared reserve
1666  IslandReserveCalculation(t,isl,resC)..
1667    ISLANDRESERVE(t,isl,resC)
1668  =l=
1669    Sum[ (o,resT) $ { offer(t,o) and offerIsland(t,o,isl) }
1670                  , RESERVE(t,o,resC,resT)
1671       ]
1672    ;
1673   
1674  * 6.5.5.2 & 6.5.5.3: Matching of reserve supply and demand
1675  SupplyDemandReserveRequirement(t,isl,resC,riskC) $ useReserveModel..
1676    ISLANDRISK(t,isl,resC,riskC)
1677  - DEFICITRESERVE_CE(t,isl,resC)   $ ContingentEvents(riskC)
1678  - DEFICITRESERVE_ECE(t,isl,resC)  $ ExtendedContingentEvent(riskC)
1679  =l=
1680    ISLANDRESERVE(t,isl,resC)
1681    ;
1682   
1683  *======= RISK AND RESERVE BALANCE EQUATIONS END ================================
1684   
1685   
1686   
1687  *======= SECURITY EQUATIONS ====================================================
1688   
1689  * 6.6.1.5 Branch security constraint with LE sense
1690  BranchSecurityConstraintLE(t,brCstr)
1691    $ (BranchConstraintSense(t,brCstr) = -1)..
1692    sum[ br $ ACbranch(t,br)
1693       , branchCstrFactors(t,brCstr,br) * ACBRANCHFLOW(t,br) ]
1694  + sum[ br $ HVDClink(t,br)
1695       , branchCstrFactors(t,brCstr,br) * HVDCLINKFLOW(t,br) ]
1696  - SURPLUSBRANCHSECURITYCONSTRAINT(t,brCstr)
1697  =l=
1698    BranchConstraintLimit(t,brCstr)
1699    ;
1700   
1701  * 6.6.1.5 Branch security constraint with GE sense
1702  BranchSecurityConstraintGE(t,brCstr)
1703    $ (BranchConstraintSense(t,brCstr) = 1)..
1704    sum[ br $ ACbranch(t,br)
1705       , branchCstrFactors(t,brCstr,br) * ACBRANCHFLOW(t,br) ]
1706  + sum[ br $ HVDClink(t,br)
1707       , branchCstrFactors(t,brCstr,br) * HVDCLINKFLOW(t,br) ]
1708  + DEFICITBRANCHSECURITYCONSTRAINT(t,brCstr)
1709  =g=
1710    BranchConstraintLimit(t,brCstr)
1711    ;
1712   
1713  * 6.6.1.5 Branch security constraint with EQ sense
1714  BranchSecurityConstraintEQ(t,brCstr)
1715    $ (BranchConstraintSense(t,brCstr) = 0)..
1716    sum[ br $ ACbranch(t,br)
1717       , branchCstrFactors(t,brCstr,br) * ACBRANCHFLOW(t,br) ]
1718  + sum[ br $ HVDClink(t,br)
1719       , branchCstrFactors(t,brCstr,br) * HVDCLINKFLOW(t,br) ]
1720  + DEFICITBRANCHSECURITYCONSTRAINT(t,brCstr)
1721  - SURPLUSBRANCHSECURITYCONSTRAINT(t,brCstr)
1722  =e=
1723    BranchConstraintLimit(t,brCstr)
1724    ;
1725   
1726   
1727   
1728  * Market node security constraint with LE sense (3.5.1.7a)
1729  MNodeSecurityConstraintLE(t,MnodeCstr)
1730    $ (MNodeConstraintSense(t,MnodeCstr) = -1)..
1731    sum[ o $ posEnrgOfr(t,o)
1732         , MNCstrEnrgFactors(t,MnodeCstr,o)
1733         * GENERATION(t,o)
1734       ]
1735  + sum[ (o,resC,resT) $ offer(t,o)
1736         , MNCnstrResrvFactors(t,MnodeCstr,o,resC,resT)
1737         * RESERVE(t,o,resC,resT)
1738       ]
1739  + sum[ bd $ Bid(t,bd)
1740         , mnCnstrEnrgBidFactors(t,MnodeCstr,bd)
1741         * PURCHASE(t,bd)
1742       ]
1743  - SURPLUSMNODECONSTRAINT(t,MnodeCstr)
1744  =l=
1745    MNodeConstraintLimit(t,MnodeCstr)
1746    ;
1747   
1748  * Market node security constraint with GE sense (3.5.1.7b)
1749  MNodeSecurityConstraintGE(t,MnodeCstr)
1750    $ (MNodeConstraintSense(t,MnodeCstr) = 1)..
1751    sum[ o $ posEnrgOfr(t,o)
1752         , MNCstrEnrgFactors(t,MnodeCstr,o)
1753         * GENERATION(t,o)
1754       ]
1755  + sum[ (o,resC,resT) $ offer(t,o)
1756         , MNCnstrResrvFactors(t,MnodeCstr,o,resC,resT)
1757         * RESERVE(t,o,resC,resT)
1758       ]
1759  + sum[ bd $ Bid(t,bd)
1760         , mnCnstrEnrgBidFactors(t,MnodeCstr,bd)
1761         * PURCHASE(t,bd)
1762       ]
1763  + DEFICITMNODECONSTRAINT(t,MnodeCstr)
1764  =g=
1765    MNodeConstraintLimit(t,MnodeCstr)
1766    ;
1767   
1768  * Market node security constraint with EQ sense (3.5.1.7c)
1769  MNodeSecurityConstraintEQ(t,MnodeCstr)
1770    $ (MNodeConstraintSense(t,MnodeCstr) = 0)..
1771    sum[ o $ posEnrgOfr(t,o)
1772         , MNCstrEnrgFactors(t,MnodeCstr,o)
1773         * GENERATION(t,o)
1774       ]
1775  + sum[ (o,resC,resT) $ offer(t,o)
1776         , MNCnstrResrvFactors(t,MnodeCstr,o,resC,resT)
1777         * RESERVE(t,o,resC,resT)
1778       ]
1779  + sum[ bd $ Bid(t,bd)
1780         , mnCnstrEnrgBidFactors(t,MnodeCstr,bd)
1781         * PURCHASE(t,bd)
1782       ]
1783  + DEFICITMNODECONSTRAINT(t,MnodeCstr)
1784  - SURPLUSMNODECONSTRAINT(t,MnodeCstr)
1785  =e=
1786    MNodeConstraintLimit(t,MnodeCstr)
1787    ;
1788   
1789  *======= SECURITY EQUATIONS END ================================================
1790   
1791   
1792  * Model declarations
1793  Model vSPD /
1794  * Objective function
1795    ObjectiveFunction
1796  * Offer and purchase definitions
1797    GenerationOfferDefintion, DemBidDefintion
1798    EnergyScarcityDefinition,
1799    GenerationRampUp, GenerationRampDown
1800  * Network
1801    HVDClinkMaximumFlow, HVDClinkLossDefinition
1802    HVDClinkFlowDefinition, LambdaDefinition
1803    ACnodeNetInjectionDefinition1
1804    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
1805    ACBranchFlowDefinition, LinearLoadFlow
1806    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
1807    ACBranchLossCalculation, ACDirectedBranchLossDefinition
1808  * Risk
1809    HVDCIslandRiskCalculation, HVDCRecCalculation
1810    GenIslandRiskCalculation, GenIslandRiskCalculation_1
1811    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
1812    ManualIslandRiskCalculation
1813  * Reserve
1814    PLSRReserveProportionMaximum, ReserveOfferDefinition
1815    EnergyAndReserveMaximum
1816  * Reserve scarcity/shortfall
1817    HVDCRiskReserveShortFallCalculation
1818    ManualRiskReserveShortFallCalculation
1819    GenRiskReserveShortFallCalculation
1820    HVDCsecRiskReserveShortFallCalculation
1821    HVDCsecManualRiskReserveShortFallCalculation
1822    RiskGroupReserveShortFallCalculation
1823  * Matching of reserve requirement and availability
1824    SupplyDemandReserveRequirement, IslandReserveCalculation
1825  * Risk Offset calculation
1826    RiskOffsetCalculation_DCCE
1827    RiskOffsetCalculation_DCECE
1828  * Island risk definitions
1829  * Include HVDC secondary risk constraints
1830    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
1831    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
1832  * Branch security constraints
1833    BranchSecurityConstraintLE
1834    BranchSecurityConstraintGE
1835    BranchSecurityConstraintEQ
1836  * Market node security constraints
1837    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE
1838    MNodeSecurityConstraintEQ
1839  * ViolationCost
1840    SystemCostDefinition, SystemBenefitDefinition
1841    SystemPenaltyCostDefinition, TotalViolationCostDefinition
1842    TotalScarcityCostDefinition
1843    / ;
1844   
1845  Model vSPD_NMIR /
1846  * Objective function
1847    ObjectiveFunction
1848  * Offer and purchase definitions
1849    GenerationOfferDefintion, DemBidDiscrete,
1850    DemBidDefintion, EnergyScarcityDefinition,
1851    GenerationRampUp, GenerationRampDown, GenerationChangeUpDown
1852  * Network
1853    HVDClinkMaximumFlow, HVDClinkLossDefinition
1854    HVDClinkFlowDefinition, LambdaDefinition
1855    ACnodeNetInjectionDefinition1
1856    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
1857    ACBranchFlowDefinition, LinearLoadFlow
1858    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
1859    ACBranchLossCalculation, ACDirectedBranchLossDefinition
1860  * Risk
1861    RiskOffsetCalculation_DCCE, RiskOffsetCalculation_DCECE
1862    HVDCIslandRiskCalculation, HVDCRecCalculation, ManualIslandRiskCalculation
1863    GenIslandRiskCalculation, GenIslandRiskCalculation_1
1864    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
1865    HVDCSendMustZeroBinaryDefinition
1866    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
1867    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
1868  * Reserve
1869    PLSRReserveProportionMaximum, ReserveInterruptibleOfferLimit
1870    ReserveOfferDefinition, EnergyAndReserveMaximum
1871  * Reserve scarcity/shortfall
1872    HVDCRiskReserveShortFallCalculation
1873    ManualRiskReserveShortFallCalculation
1874    GenRiskReserveShortFallCalculation
1875    HVDCsecRiskReserveShortFallCalculation
1876    HVDCsecManualRiskReserveShortFallCalculation
1877    RiskGroupReserveShortFallCalculation
1878  * Matching of reserve requirement and availability
1879    SupplyDemandReserveRequirement, IslandReserveCalculation
1880  * Branch security constraints
1881    BranchSecurityConstraintLE
1882    BranchSecurityConstraintGE
1883    BranchSecurityConstraintEQ
1884  * Market node security constraints
1885    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE, MNodeSecurityConstraintEQ
1886  * ViolationCost
1887    SystemCostDefinition, SystemBenefitDefinition
1888    SystemPenaltyCostDefinition, TotalViolationCostDefinition
1889    TotalScarcityCostDefinition
1890  * General NMIR equations
1891    EffectiveReserveShareCalculation
1892    SharedReserveLimitByClearedReserve
1893    BothClearedAndFreeReserveCanBeShared
1894    ReverseReserveShareLimitByHVDCControlBand
1895    ReserveShareSentLimitByHVDCControlBand
1896    FwdReserveShareSentLimitByHVDCCapacity
1897    ReverseReserveOnlyToEnergySendingIsland
1898    ForwardReserveOnlyToEnergyReceivingIsland
1899    ReverseReserveLimitInReserveZone
1900    ZeroReserveInNoReserveZone
1901    OnlyOneActiveHVDCZoneForEachReserveClass
1902    ZeroSentHVDCFlowForNonSendingIsland
1903    RoundPowerZoneSentHVDCUpperLimit
1904    HVDCSendingIslandDefinition
1905    OnlyOneSendingIslandExists
1906    HVDCSentCalculation
1907    ExcessReserveSharePenalty
1908    ReserveShareEffective_CE_Calculation
1909    ReserveShareEffective_ECE_Calculation
1910  * Lamda loss model NMIR
1911    HVDCFlowAccountedForForwardReserve
1912    ForwardReserveReceivedAtHVDCReceivingIsland
1913    HVDCFlowAccountedForReverseReserve
1914    ReverseReserveReceivedAtHVDCSendingIsland
1915    HVDCSentEnergyLambdaDefinition
1916    HVDCSentEnergyFlowDefinition
1917    HVDCSentEnergyLossesDefinition
1918    HVDCSentReserveLambdaDefinition
1919    HVDCSentReserveFlowDefinition
1920    HVDCSentReserveLossesDefinition
1921    / ;
1922   
1923  Model vSPD_MIP /
1924  * Objective function
1925    ObjectiveFunction
1926  * Offer and purchase definitions
1927    GenerationOfferDefintion, DemBidDiscrete, DemBidDefintion
1928    EnergyScarcityDefinition,
1929    GenerationRampUp, GenerationRampDown, GenerationChangeUpDown
1930  * Network
1931    HVDClinkMaximumFlow, HVDClinkLossDefinition
1932    HVDClinkFlowDefinition, LambdaDefinition
1933    ACnodeNetInjectionDefinition1
1934    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
1935    ACBranchFlowDefinition, LinearLoadFlow
1936    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
1937    ACBranchLossCalculation, ACDirectedBranchLossDefinition
1938    ACDirectedBranchFlowIntegerDefinition1, ACDirectedBranchFlowIntegerDefinition2
1939    LambdaIntegerDefinition1, LambdaIntegerDefinition2
1940  * Risk
1941    RiskOffsetCalculation_DCCE, RiskOffsetCalculation_DCECE
1942    HVDCIslandRiskCalculation, HVDCRecCalculation, ManualIslandRiskCalculation
1943    GenIslandRiskCalculation, GenIslandRiskCalculation_1
1944    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
1945    HVDCSendMustZeroBinaryDefinition
1946    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
1947    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
1948  * Reserve
1949    PLSRReserveProportionMaximum, ReserveInterruptibleOfferLimit
1950    ReserveOfferDefinition, EnergyAndReserveMaximum
1951  * Reserve scarcity/shortfall
1952    HVDCRiskReserveShortFallCalculation
1953    ManualRiskReserveShortFallCalculation
1954    GenRiskReserveShortFallCalculation
1955    HVDCsecRiskReserveShortFallCalculation
1956    HVDCsecManualRiskReserveShortFallCalculation
1957    RiskGroupReserveShortFallCalculation
1958  * Matching of reserve requirement and availability
1959    SupplyDemandReserveRequirement, IslandReserveCalculation
1960  * Branch security constraints
1961    BranchSecurityConstraintLE
1962    BranchSecurityConstraintGE
1963    BranchSecurityConstraintEQ
1964  * Market node security constraints
1965    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE, MNodeSecurityConstraintEQ
1966  * ViolationCost
1967    SystemCostDefinition, SystemBenefitDefinition
1968    SystemPenaltyCostDefinition, TotalViolationCostDefinition
1969    TotalScarcityCostDefinition
1970  * Set of integer constraints on the HVDC link to incorporate the allowance of HVDC roundpower
1971    HVDClinkFlowIntegerDefinition1, HVDClinkFlowIntegerDefinition2
1972    HVDClinkFlowIntegerDefinition3, HVDClinkFlowIntegerDefinition4
1973  * General NMIR equations
1974    EffectiveReserveShareCalculation
1975    SharedReserveLimitByClearedReserve
1976    BothClearedAndFreeReserveCanBeShared
1977    ReverseReserveShareLimitByHVDCControlBand
1978    ReserveShareSentLimitByHVDCControlBand
1979    FwdReserveShareSentLimitByHVDCCapacity
1980    ReverseReserveOnlyToEnergySendingIsland
1981    ForwardReserveOnlyToEnergyReceivingIsland
1982    ReverseReserveLimitInReserveZone
1983    ZeroReserveInNoReserveZone
1984    OnlyOneActiveHVDCZoneForEachReserveClass
1985    ZeroSentHVDCFlowForNonSendingIsland
1986    RoundPowerZoneSentHVDCUpperLimit
1987    HVDCSendingIslandDefinition
1988    OnlyOneSendingIslandExists
1989    HVDCSentCalculation
1990    ExcessReserveSharePenalty
1991    ReserveShareEffective_CE_Calculation
1992    ReserveShareEffective_ECE_Calculation
1993  * Lamda loss model NMIR
1994    HVDCFlowAccountedForForwardReserve
1995    ForwardReserveReceivedAtHVDCReceivingIsland
1996    HVDCFlowAccountedForReverseReserve
1997    ReverseReserveReceivedAtHVDCSendingIsland
1998    HVDCSentEnergyLambdaDefinition
1999    HVDCSentEnergyFlowDefinition
2000    HVDCSentEnergyLossesDefinition
2001    HVDCSentReserveLambdaDefinition
2002    HVDCSentReserveFlowDefinition
2003    HVDCSentReserveLossesDefinition
2004    / ;
2005   
2006  Model vSPD_BranchFlowMIP /
2007  * Objective function
2008    ObjectiveFunction
2009  * Offer and purchase definitions
2010    GenerationOfferDefintion, DemBidDefintion
2011    EnergyScarcityDefinition,
2012    GenerationRampUp, GenerationRampDown, GenerationChangeUpDown
2013  * Network
2014    HVDClinkMaximumFlow, HVDClinkLossDefinition
2015    HVDClinkFlowDefinition, LambdaDefinition
2016    ACnodeNetInjectionDefinition1
2017    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
2018    ACBranchFlowDefinition, LinearLoadFlow
2019    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
2020    ACBranchLossCalculation, ACDirectedBranchLossDefinition
2021    ACDirectedBranchFlowIntegerDefinition1, ACDirectedBranchFlowIntegerDefinition2
2022    LambdaIntegerDefinition1, LambdaIntegerDefinition2
2023  * Risk
2024    RiskOffsetCalculation_DCCE, RiskOffsetCalculation_DCECE
2025    HVDCIslandRiskCalculation, HVDCRecCalculation, ManualIslandRiskCalculation
2026    GenIslandRiskCalculation, GenIslandRiskCalculation_1
2027    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
2028    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
2029    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
2030  * Reserve
2031    PLSRReserveProportionMaximum, ReserveOfferDefinition
2032    EnergyAndReserveMaximum
2033  * Reserve scarcity/shortfall
2034    HVDCRiskReserveShortFallCalculation
2035    ManualRiskReserveShortFallCalculation
2036    GenRiskReserveShortFallCalculation
2037    HVDCsecRiskReserveShortFallCalculation
2038    HVDCsecManualRiskReserveShortFallCalculation
2039    RiskGroupReserveShortFallCalculation
2040  * Matching of reserve requirement and availability
2041    SupplyDemandReserveRequirement, IslandReserveCalculation
2042  * Branch security constraints
2043    BranchSecurityConstraintLE
2044    BranchSecurityConstraintGE
2045    BranchSecurityConstraintEQ
2046  * Market node security constraints
2047    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE, MNodeSecurityConstraintEQ
2048  * ViolationCost
2049    SystemCostDefinition, SystemBenefitDefinition
2050    SystemPenaltyCostDefinition, TotalViolationCostDefinition
2051    TotalScarcityCostDefinition
2052  * Set of intrger constraints on the HVDC link to incorporate the allowance of HVDC roundpower
2053    HVDClinkFlowIntegerDefinition1, HVDClinkFlowIntegerDefinition2
2054    HVDClinkFlowIntegerDefinition3, HVDClinkFlowIntegerDefinition4
2055  * General NMIR equations
2056    EffectiveReserveShareCalculation
2057    SharedReserveLimitByClearedReserve
2058    BothClearedAndFreeReserveCanBeShared
2059    ReverseReserveShareLimitByHVDCControlBand
2060    ReserveShareSentLimitByHVDCControlBand
2061    FwdReserveShareSentLimitByHVDCCapacity
2062    ReverseReserveOnlyToEnergySendingIsland
2063    ForwardReserveOnlyToEnergyReceivingIsland
2064    ReverseReserveLimitInReserveZone
2065    ZeroReserveInNoReserveZone
2066    OnlyOneActiveHVDCZoneForEachReserveClass
2067    ZeroSentHVDCFlowForNonSendingIsland
2068    RoundPowerZoneSentHVDCUpperLimit
2069    HVDCSendingIslandDefinition
2070    OnlyOneSendingIslandExists
2071    HVDCSentCalculation
2072    ExcessReserveSharePenalty
2073    ReserveShareEffective_CE_Calculation
2074    ReserveShareEffective_ECE_Calculation
2075  * Lamda loss model NMIR
2076    HVDCFlowAccountedForForwardReserve
2077    ForwardReserveReceivedAtHVDCReceivingIsland
2078    HVDCFlowAccountedForReverseReserve
2079    ReverseReserveReceivedAtHVDCSendingIsland
2080    HVDCSentEnergyLambdaDefinition
2081    HVDCSentEnergyFlowDefinition
2082    HVDCSentEnergyLossesDefinition
2083    HVDCSentReserveLambdaDefinition
2084    HVDCSentReserveFlowDefinition
2085    HVDCSentReserveLossesDefinition
2086    / ;
2087   
2088  Model vSPD_FTR /
2089  * Objective function
2090    ObjectiveFunction
2091  * Offer and purchase definitions
2092    GenerationOfferDefintion
2093  * Network
2094    HVDClinkMaximumFlow
2095    ACNodeNetInjectionDefinition1, ACNodeNetInjectionDefinition2
2096    ACBranchMaximumFlow, ACBranchFlowDefinition, LinearLoadFlow
2097  * Branch security constraints
2098    BranchSecurityConstraintLE
2099    BranchSecurityConstraintGE
2100    BranchSecurityConstraintEQ
2101  * ViolationCost
2102    SystemCostDefinition, SystemBenefitDefinition
2103    SystemPenaltyCostDefinition, TotalViolationCostDefinition
2104    TotalScarcityCostDefinition
2105    / ;


COMPILATION TIME     =        0.000 SECONDS      3 MB  42.5.0 cf11b917 WEX-WEI
GAMS 42.5.0  cf11b917 Mar 30, 2023          WEX-WEI x86 64bit/MS Windows - 07/28/23 13:59:01 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


EXECUTION TIME       =        0.000 SECONDS      3 MB  42.5.0 cf11b917 WEX-WEI


USER: Small MUD-5 User License                       G220916|0002CO-GEN
      Electricity Authority - Te Mana Hiko,                  DC5643-S10


**** FILE SUMMARY

Input      C:\vSPD\vSPD\Programs\vSPDmodel.gms
Output     C:\vSPD\vSPD\Programs\vSPDmodel.lst
Save       C:\vSPD\vSPD\Programs\vSPDmodel.g0?

**** WARNING - COMPILER OPTIONS ARE NON DEFAULT     ONEMPTY
