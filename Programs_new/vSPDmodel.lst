GAMS 36.2.0  r433180e Released Sep  3, 2021 WEX-WEI x86 64bit/MS Windows - 08/09/23 15:00:26 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  *=========================================================================
      ============
   2  * Name:                 vSPDmodel.gms
   3  * Function:             Mathematical formulation - based on the SPD formul
      ation v9.0
   4  * Developed by:         Electricity Authority, New Zealand
   5  * Source:               https://github.com/ElectricityAuthority/vSPD
   6  *                       http://www.emi.ea.govt.nz/Tools/vSPD
   7  * Contact:              Forum: http://www.emi.ea.govt.nz/forum/
   8  *                       Email: emi@ea.govt.nz
   9  * Modified on:          1 Oct 2019
  10  *                       New feature added: New wind offer arrangements
  11  * Modified on:          11 Dec 2020
  12  *                       Branch Reverse Rating (this feature is suspended u
      ntil further notice)
  13  * Modified on:          24 Feb 2021
  14  *                       Correcting the excess reserve sharing penalty
  15  *                       by adding RESERVESHAREEFFECTIVE_CE and ECE variabl
      es
  16  * Last modified on:     18 March 2022
  17  *                       Rename/remove primary sets to tidy up the code and
  18  *                       Assign value for constant sets such as ils, blk,re
      sC, etc...
  19  *
  20  *=========================================================================
      ============
  21   
      Directory of code sections in vSPDmodel.gms:
        1. Declare sets and parameters for all symbols to be loaded from daily G
      DX files
        2. Declare additional sets and parameters used throughout the model
        3. Declare model variables and constraints, and initialise constraints
       
      Aliases to be aware of:
        dt = dt1                                  tp = tp1,tp2
        isl = isl1, isl2                          b = b1, frB, toB
        n = n1, n2                                o = o1, o2
        bd = bd1, bd2
        br = br1
  35   
  36  * Allow empty data set declaration
  38   
  39  *=========================================================================
      ==========
  40  * 1. Declare sets and parameters for all symbols to be loaded from daily G
      DX files
  41  *=========================================================================
      ==========
  42  * Hard-coded sets.
  43  Sets
  44    isl(*)              'Islands'                                           
            / NI, SI /
  45    blk(*)              'Trade block definitions used for the offer and bids
      '     / t1*t20 /
  46    los(*)              'Loss segments available for loss modelling'        
            / ls1*ls13 /
  47    fd(*)               'Directional flow definition used in the SPD formula
      tion' / forward, backward /
  48    resC(*)             'Definition of fast and sustained instantaneous rese
      rve'  / FIR, SIR /
  49    riskC(*)            'Different risks that could set the reserve requirem
      ents' / genRisk, genRiskECE, DCCE, DCECE, manual, manualECE, HVDCsecRisk, 
      HVDCsecRiskECE /
  50    resT(*)             'Definition of reserve types (PLSR, TWDR, ILR)'     
            / PLRO, TWRO, ILRO /
  51   
  52    casePar(*)          'Different information about a case and datetime' /s
      tudyMode, intervalLength/
  53   
  54    dtPar(*)            'The various parameters applied for datetime'     / 
      usegeninitialMW, enrgShortfallTransfer, priceTransfer, replaceSurplusPrice
      , igIncreaseLimitRTD, useActualLoad, dontScaleNegLoad, maxSolveLoop, short
      fallRemovalMargin, enrgScarcity, resrvScarcity /
  55   
  56    islPar(*)           'The various parameters applied for each island'  / 
      HVDCsecRisk, HVDCsecRiskECE, HVDCSecSubtractor, sharedNFRLoadOffset, RMTli
      mitFIR, RMTlimitSIR, MWIPS, PDS, Losses, SPDLoadCalcLosses/
  57   
  58    bidofrCmpnt(*)      'Components of the bid and offer'                 / 
      limitMW, price, plsrPct, factor /
  59   
  60    offerPar(*)         'The various parameters required for each offer'  / 
      initialMW, rampUpRate, rampDnRate, resrvGenMax, isIG, FKbandMW, isPriceRes
      ponse, potentialMW, riskGenerator, dispatchable, maxFactorFIR, maxFactorSI
      R /
  61   
  62    bidPar(*)           'The various parameters required for each offer'  / 
      dispatchable, discrete, difference /
  63   
  64    nodePar(*)          'The various parameters applied for each  node'   / 
      demand, initialLoad, conformingFactor, nonConformingFactor, loadIsOverride
      , loadIsBad,loadIsNCL, maxLoad, instructedLoadShed, instructedShedActive, 
      dispatchedLoad, dispatchedGeneration /
  65   
  66    brPar(*)            'Branch parameter specified'                      / 
      forwardCap, backwardCap, resistance, susceptance, fixedLosses, numLossTran
      ches, HVDCbranch, isOpen /
  67   
  68    resPar(*)           'Parameters applied to reserve class'             / 
      sharingFIR, sharingSIR, roundPwrFIR, roundPwrSIR, roundPwr2Mono, biPole2Mo
      no, monoPoleMin, modulationRisk, lossScalingFactorHVDC, sharedNFRfactor,fo
      rwardHVDCcontrolBand, backwardHVDCcontrolBand /
  69   
  70    riskPar(*)          'Different risk parameters'                       / 
      freeReserve, adjustFactor, HVDCRampUp, manualRisk, sharingEffectiveFactor 
      /
  71   
  72    CstrRHS(*)          'Constraint RHS definition'                       / 
      cnstrSense, cnstrLimit, rampingCnstr /
  73   
  74    z(*)                'RP: round power, NR: no reverse, RZ: reverse'    /R
      P, NR, RZ/
  75   
  76    pole(*)             'HVDC poles'                                      / 
      pole1, pole2 /
  77   
  78    testcases(*)        'Test Cases for RTP 4'                            /'
      MSS_21012023030850151_0X','MSS_21302023030830146_0X','MSS_2132202303080013
      3_0X','MSS_61012023030935374_0X'/
  79    ;
  80   
  81  * Primary sets that are defined by /loaded from gdx inputs
  82  Sets
  83    cn(*)               'Case name used to create the GDX file'
  84    ca(*)               'Case ID associated with data'
  85    dt(*)               'Date and time for the trade periods'
  86    tp(*)               'Trade periods for which input data is defined'
  87    b(*)                'Bus definitions for all trading periods'
  88    n(*)                'Node definitions for all trading periods'
  89    o(*)                'Offers for all trading periods'
  90    bd(*)               'Bids for all trading periods'
  91    trdr(*)             'Traders defined for all trading periods'
  92    br(*)               'Branch definition for all trading periods'
  93    brCstr(*)           'Branch constraint definitions for all trading perio
      ds'
  94    MnodeCstr(*)        'Market node constraint definitions for all trading 
      periods'
  95    rg(*)               'Set representing a collection of generation and res
      erve offers treated as a group risk'
  96    rundt(*)            'Run datetime of the case for reporting'
  97    ;
  98   
  99  * Aliases
 100  Alias (dt,dt1,dt2),       (tp,tp1,tp2),     (isl,isl1,isl2),  (b,b1,frB,to
      B),      (n,n1,n2),          (o,o1,o2),        (bd,bd2,bd1)
 101        (br,br1),           (fd,fd1,rd,rd1),  (z,z1,rrz,rrz1),  (rg,rg1),   
               (blk,blk1,blk2),    (los,los1,bp,bp1,rsbp,rsbp1)
 102    ;
 103   
 104  * Dynamic sets that are loaded from GDX
 105  Sets
 106  * Case/period sets
 107    caseDefn(ca,cn,rundt)                 'Mapping caseid - casename - runda
      tetime set'
 108    case2dt2tp(ca,dt,tp)                  'Mapping caseid - datetime - trade
      Period set'
 109   
 110  * Node/bus sets
 111    node2node(ca,dt,n,n1)                 'Node to node mapping used for pri
      ce and energy shortfall transfer'
 112    busIsland(ca,dt,b,isl)                'Bus island mapping for the differ
      ent trade periods'
 113    nodeBus(ca,dt,n,b)                    'Node bus mapping for the differen
      t trading periods'
 114   
 115  * Branch sets
 116    branchDefn(ca,dt,br<,frB,toB)         'Branch definition for the differe
      nt trading periods'
 117    nodeoutagebranch(ca,dt,n,br)          'Mappinging of branch and node whe
      re branch outage may affect the capacity to supply to the node'
 118   
 119  * Offer sets
 120    offerNode(ca,dt,o<,n)                 'Offers and the corresponding offe
      r node for the different trading periods'
 121    offerTrader(ca,dt,o,trdr<)            'Offers and the corresponding trad
      er for the different trading periods'
 122    primarySecondaryOffer(ca,dt,o,o1)     'Primary-secondary offer mapping f
      or the different trading periods - in use from 01 May 2012'
 123   
 124  * Bid sets
 125    bidNode(ca,dt,bd<,n)                  'Bids and the corresponding node f
      or the different trading periods'
 126    bidTrader(ca,dt,bd,trdr<)             'Bids and the corresponding trader
       for the different trading periods'
 127   
 128  * Risk sets
 129    riskGroupOffer(ca,dt,rg<,o,riskC)     'Mappimg of risk group to offers i
      n current trading period for each risk class - SPD version 11.0 update'
 130    ;
 131   
 132   
 133  * Paraeters loaded from GDX file in vSPDsolve.gms
 134  Parameters
 135  * Case-Period data
 136    gdxDate(*)                                        'day, month, year of t
      rade date applied to daily GDX'
 137    runMode(ca,casePar)                               'Study mode and interv
      al length applied to each caseID'
 138    dtParameter(ca,dt,dtPar)                          'Parameters applied to
       each caseID-datetime pair'
 139   
 140  * Island data
 141    dtIslandParameter(ca,dt,isl,islPar)               'Island parameters for
       the different trading periods'
 142   
 143  * Nodal data
 144    refNode(ca,dt,n)                                  'Reference nodes for t
      he different trading periods'
 145    nodeParameter(ca,dt,n,nodePar)                    'Nodal input data for 
      all trading periods'
 146   
 147  * Bus data
 148    busElectricalIsland(ca,dt,b)                      'Electrical island sta
      tus of each bus for the different trading periods (0 = Dead)'
 149    nodeBusAllocationFactor(ca,dt,n,b)                'Allocation factor of 
      market node quantities to bus for the different trading periods'
 150   
 151  * Branch and branch constraint data
 152    branchParameter(ca,dt,br,brPar)                   'Branch parameters for
       the different time periods'
 153    branchCstrFactors(ca,dt,brCstr<,br)               'Branch security const
      raint factors (sensitivities) for the current trading period'
 154    branchCstrRHS(ca,dt,brCstr,CstrRHS)               'Branch constraint sen
      se and limit for the different trading periods'
 155   
 156  * Offer data
 157    energyOffer(ca,dt,o,blk,bidofrCmpnt)              'Energy offers for the
       different trading periods'
 158    reserveOffer(ca,dt,o,resC,resT,blk,bidofrCmpnt)   'Reserve offers for th
      e different trading periods'
 159    offerParameter(ca,dt,o,offerPar)                  'Initial MW for each o
      ffer for the different trading periods'
 160   
 161  * Bid data
 162    energyBid(ca,dt,bd,blk,bidofrCmpnt)               'Energy bids for the d
      ifferent trading periods'
 163    bidParameter(ca,dt,bd,bidPar)                     'Parameters applied to
       each bid for the different trading periods'
 164   
 165  * Market node constraint data
 166    mnCnstrRHS(ca,dt,MnodeCstr<,CstrRHS)              'Market node constrain
      t sense and limit for the different trading periods'
 167    mnCstrEnrgFactors(ca,dt,MnodeCstr,o)              'Market node energy of
      fer constraint factors for the current trading period'
 168    mnCnstrResrvFactors(ca,dt,MnodeCstr,o,resC,resT)  'Market node reserve o
      ffer constraint factors for the current trading period'
 169    mnCnstrEnrgBidFactors(ca,dt,MnodeCstr,bd)         'Market node energy bi
      d constraint factors for the different trading periods'
 170    mnCnstrResrvBidFactors(ca,dt,MnodeCstr,bd,resC)   'Market node IL reserv
      e bid constraint factors for the different trading periods - currently not
       used'
 171   
 172  * Risk and reserve/sharing data
 173    riskParameter(ca,dt,isl,resC,riskC,riskPar)       'Risk parameters for t
      he different trading periods'
 174    reserveSharingParameter(ca,dt,resPar)             'Reserve (sharing) par
      ameters for the different trading periods'
 175   
 176  * Scarcity data
 177    scarcityNationalFactor(ca,dt,blk,bidofrCmpnt)      'National energy scar
      city factor parameters'
 178    scarcityNodeFactor(ca,dt,n,blk,bidofrCmpnt)        'Nodal energy scarcit
      y factor parameters'
 179    scarcityNodeLimit(ca,dt,n,blk,bidofrCmpnt)         'Nodal energy scarcit
      y limit parameters'
 180    scarcityResrvLimit(ca,dt,isl,resC,blk,bidofrCmpnt) 'Reserve scarcity lim
      it parameters'
 181   
 182    ;
 183   
 184  * Setting scalars that are hard-coded or defined in vSPDSetting.inc
 185  Scalars
 186    useAClossModel
 187    useHVDClossModel
 188    useACbranchLimits                        'Use the AC branch limits (1 = 
      Yes)'
 189    useHVDCbranchLimits                      'Use the HVDC branch limits (1 
      = Yes)'
 190    resolveCircularBranchFlows               'Resolve circular branch flows 
      (1 = Yes)'
 191    resolveHVDCnonPhysicalLosses             'Resolve nonphysical losses on 
      HVDC branches (1 = Yes)'
 192    resolveACnonPhysicalLosses               'Resolve nonphysical losses on 
      AC branches (1 = Yes)'
 193    circularBranchFlowTolerance
 194    nonPhysicalLossTolerance
 195    useBranchFlowMIPtolerance
 196    useReserveModel                          'Use the reserve model (1 = Yes
      )'
 197    mixedMIPtolerance
 198    LPtimeLimit                              'CPU seconds allowed for LP sol
      ves'
 199    LPiterationLimit                         'Iteration limit allowed for LP
       solves'
 200    MIPtimeLimit                             'CPU seconds allowed for MIP so
      lves'
 201    MIPiterationLimit                        'Iteration limit allowed for MI
      P solves'
 202    MIPoptimality
 203    disconnectedNodePriceCorrection          'Flag to apply price correction
       methods to disconnected node'
 204    branchReceivingEndLossProportion         'Proportion of losses to be all
      ocated to the receiving end of a branch' /1/
 205   
 206  * External loss model from Transpower
 207    lossCoeff_A                       / 0.3101 /
 208    lossCoeff_C                       / 0.14495 /
 209    lossCoeff_D                       / 0.32247 /
 210    lossCoeff_E                       / 0.46742 /
 211    lossCoeff_F                       / 0.82247 /
 212    maxFlowSegment                    / 10000 /
 213    ;
 214   
 215   
 216   
 217   
 218   
 219   
 220   
 221   
 222  * Dynamic sets that are calculated on the fly
 223  Sets
 224  * Global
 225    t(ca,dt)                               'Current trading interval to solv
      e'
 226   
 227  * Node/bus
 228    node(ca,dt,n)                          'Node definition for the differen
      t trading periods'
 229    bus(ca,dt,b)                           'Bus definition for the different
       trading periods'
 230  ;
 231   
 232   
 233   
 234   
 235   
 236  * Parameters calculated on the fly
 237  Parameters
 238   
 239    branchCapacity(ca,dt,br,fd)                          'Branch directed ca
      pacity for the different trading periods in MW (Branch Reverse Ratings)'
 240   
 241   
 242   
 243  * Risk/Reserve data
 244   
 245    islandMinimumRisk(ca,dt,isl,resC,riskC)              'Minimum MW risk le
      vel for each island for each reserve class applied to risk classes: manual
      , manualECE, HVDCsecRisk and HVDCsecRiskECE'
 246   
 247    HVDCSecRiskEnabled(ca,dt,isl,riskC)                  'Flag indicating if
       the HVDC secondary risk is enabled (1 = Yes)'
 248    HVDCSecRiskSubtractor(ca,dt,isl)                     'Ramp up capability
       on the HVDC pole that is not the secondary risk'
 249    reserveMaximumFactor(ca,dt,o,resC)                   'Factor to adjust t
      he maximum reserve of the different classes for the different offers'
 250   
 251   
 252   
 253   
 254   
 255   
 256  * Real Time Pricing - Inputs
 257    useGenInitialMW(ca,dt)                                               'Fl
      ag that if set to 1 indicates that for a schedule that is solving multiple
       intervals in sequential mode'
 258    runEnrgShortfallTransfer(ca,dt)                                      'Fl
      ag that if set to 1 will enable shortfall transfer- post processing'
 259    runPriceTransfer(ca,dt)                                              'Fl
      ag that if set to 1 will enable price transfer - post processing.'
 260    replaceSurplusPrice(ca,dt)                                           'Fl
      ag that if set to 1 will enable sutplus price replacement - post processin
      g'
 261    rtdIgIncreaseLimit(ca,dt)                                            'Fo
      r price responsive Intermittent Generation (IG) the 5-minute ramp-up is ca
      pped using this parameter'
 262    useActualLoad(ca,dt)                                                 'Fl
      ag that if set to 0, initial estimated load [conformingfactor/noncomformin
      gload] is used as initial load '
 263    dontScaleNegativeLoad(ca,dt)                                         'Fl
      ag that if set to 1 --> negative load will be fixed in RTD load calculatio
      n'
 264    inputInitialLoad(ca,dt,n)                                            'Th
      is value represents actual load MW for RTD schedule input'
 265    conformingFactor(ca,dt,n)                                            'In
      itial estimated load for conforming load'
 266    nonConformingLoad(ca,dt,n)                                           'In
      itial estimated load for non-conforming load'
 267    loadIsOverride(ca,dt,n)                                              'Fl
      ag if set to 1 --> InputInitialLoad will be fixed as node demand'
 268    loadIsBad(ca,dt,n)                                                   'Fl
      ag if set to 1 --> InitialLoad will be replaced by Estimated Initial Load'
 269    loadIsNCL(ca,dt,n)                                                   'Fl
      ag if set to 1 --> non-conforming load --> will be fixed in RTD load calcu
      lation'
 270    dispatchedLoad(ca,dt,n)                                              'In
      itial dispatched lite demand'
 271    dispatchedGeneration(ca,dt,n)                                        'In
      itial dispatched lite generation'
 272   
 273    maxLoad(ca,dt,n)                                                     'Pn
      ode maximum load'
 274    instructedLoadShed(ca,dt,n)                                          'In
      structed load shedding applied to RTDP and should be ignore by all other s
      chedules'
 275    instructedShedActive(ca,dt,n)                                        'Fl
      ag if Instructed load shedding is active; applied to RTDP and should be ig
      nore by all other schedules'
 276    islandMWIPS(ca,dt,isl)                                               'Is
      land total generation at the start of RTD run'
 277    islandPDS(ca,dt,isl)                                                 'Is
      land pre-solve deviation - used to adjust RTD node demand'
 278    islandLosses(ca,dt,isl)                                              'Is
      land estimated losss - used to adjust RTD mode demand'
 279    enrgShortfallRemovalMargin(ca,dt)                                    'Th
      is small margin is added to the shortfall removed amount in order to preve
      nt any associated binding ACLine constraint'
 280    maxSolveLoops(ca,dt)                                                 'Th
      e maximum number of times that the Energy Shortfall Check will re-solve th
      e model'
 281   
 282   
 283    energyScarcityEnabled(ca,dt)                                         'Fl
      ag to apply energy scarcity (this is different from FP scarcity situation)
      '
 284    reserveScarcityEnabled(ca,dt)                                        'Fl
      ag to apply reserve scarcity (this is different from FP scarcity situation
      )'
 285    scarcityEnrgNationalFactor(ca,dt,blk)                                'Na
      tional energy scarcity factors'
 286    scarcityEnrgNationalPrice(ca,dt,blk)                                 'Na
      tional energy scarcity prices'
 287    scarcityEnrgNodeFactor(ca,dt,n,blk)                                  'No
      dal energy scarcity factors'
 288    scarcityEnrgNodeFactorPrice(ca,dt,n,blk)                             'No
      dal energy scarcity prices vs factors'
 289    scarcityEnrgNodeLimit(ca,dt,n,blk)                                   'No
      dal energy scarcity limits'
 290    scarcityEnrgNodeLimitPrice(ca,dt,n,blk)                              'No
      dal energy scarcity prices vs limits'
 291    scarcityResrvIslandLimit(ca,dt,isl,resC,blk)                         'Re
      serve scarcity limits'
 292    scarcityResrvIslandPrice(ca,dt,isl,resC,blk)                         'Re
      serve scarcity prices'
 293   
 294    ;
 295   
 296  * End of GDX declarations
 297   
 298   
 299   
 300  *=========================================================================
      ==========
 301  * 2. Declare additional sets and parameters used throughout the model
 302  *=========================================================================
      ==========
 303   
 304   
 305   
 306  * Dynamic sets that are calculated on the fly
 307  Sets
 308  * Global
 309    t(ca,dt)                               'Current trading interval to solv
      e'
 310   
 311  * Node/bus
 312    node(ca,dt,n)                          'Node definition for the differen
      t trading periods'
 313    bus(ca,dt,b)                           'Bus definition for the different
       trading periods'
 314   
 315  * Offer
 316    offer(ca,dt,o)                                            'Offers define
      d for the current trading period'
 317    genOfrBlk(ca,dt,o,blk)                                    'Valid trade b
      locks for the respective generation offers'
 318    resOfrBlk(ca,dt,o,blk,resC,resT)                          'Valid trade b
      locks for the respective reserve offers by class and type'
 319    posEnrgOfr(ca,dt,o)                                       'Postive energ
      y offers defined for the current trading period'
 320   
 321  * Bid
 322    Bid(ca,dt,bd)                                             'Bids defined 
      for the current trading period'
 323    DemBidBlk(ca,dt,bd,blk)                                   'Valid trade b
      locks for the respective purchase bids'
 324   
 325  * Network
 326    branch(ca,dt,br)                                                     'Br
      anches defined for the current trading period'
 327    branchBusDefn(ca,dt,br,frB,toB)                                      'Br
      anch bus connectivity for the current trading period'
 328    branchFrBus(ca,dt,br,frB)                                            'De
      fine branch from bus connectivity for the current trading period'
 329    branchToBus(ca,dt,br,frB)                                            'De
      fine branch to bus connectivity for the current trading period'
 330    branchBusConnect(ca,dt,br,b)                                         'In
      dication if a branch is connected to a bus for the current trading period'
 331    ACBranchSendingBus(ca,dt,br,b,fd)                                    'Se
      nding (From) bus of AC branch in forward and backward direction'
 332    ACBranchReceivingBus(ca,dt,br,b,fd)                                  'Re
      ceiving (To) bus of AC branch in forward and backward direction'
 333    HVDClinkSendingBus(ca,dt,br,b)                                       'Se
      nding (From) bus of HVDC link'
 334    HVDClinkReceivingBus(ca,dt,br,toB)                                   'Re
      ceiving (To) bus of HVDC link'
 335    HVDClinkBus(ca,dt,br,b)                                              'Se
      nding or Receiving bus of HVDC link'
 336    HVDClink(ca,dt,br)                                                   'HV
      DC links (branches) defined for the current trading period'
 337  *  HVDCpoles(ca,dt,br)                                                  'D
      C transmission between Benmore and Hayward'
 338   
 339    HVDCpoleDirection(ca,dt,br,fd)                                       'Di
      rection defintion for HVDC poles S->N : forward and N->S : backward'
 340    ACBranch(ca,dt,br)                                                   'AC
       branches defined for the current trading period'
 341    validLossSegment(ca,dt,br,los,fd)                                    'Va
      lid loss segments for a branch'
 342    lossBranch(ca,dt,br)                                                 'Su
      bset of branches that have non-zero loss factors'
 343  * Mapping set of branches to HVDC pole
 344    HVDCpoleBranchMap(pole,br)                                        'Mappi
      ng of HVDC  branch to pole number'
 345  * Risk/Reserve
 346    islandRiskGenerator(ca,dt,isl,o)                          'Mapping of ri
      sk generator to island in the current trading period'
 347   
 348    GenRisk(riskC)                                                    'Subse
      t containing generator risks'
 349    ManualRisk(riskC)                                                 'Subse
      t containting manual risks'
 350    HVDCrisk(riskC)                                                   'Subse
      t containing DCCE and DCECE risks'
 351    HVDCSecRisk(riskC)                                                'Subse
      t containing secondary risk of the DCCE and DCECE events'
 352   
 353    PLRO(resT)                                             'PLSR reserve typ
      e'
 354    TWRO(resT)                                             'TWDR reserve typ
      e'
 355    ILRO(resT)                                             'ILR reserve type
      '
 356   
 357    nodeIsland(ca,dt,n,isl)                                   'Mapping node 
      to island'
 358    offerIsland(ca,dt,o,isl)                                  'Mapping of re
      serve offer to island for the current trading period'
 359    bidIsland(ca,dt,bd,isl)                                   'Mapping of pu
      rchase bid ILR to island for the current trading period'
 360   
 361  * Definition of CE and ECE events to support different CE and ECE CVPs
 362    ContingentEvents(riskC)                                           'Subse
      t of Risk Classes containing contigent event risks'
 363    ExtendedContingentEvent(riskC)                                    'Subse
      t of Risk Classes containing extended contigent event risk'
 364  * Branch constraint
 365    BranchConstraint(ca,dt,brCstr)                                       'Se
      t of valid branch constraints defined for the current trading period'
 366  * Market node constraint
 367    MNodeConstraint(ca,dt,MnodeCstr)                                     'Se
      t of market node constraints defined for the current trading period'
 368  * NMIR update
 369    rampingConstraint(ca,dt,brCstr)                                      'Su
      bset of branch constraints that limit total HVDC sent from an island due t
      o ramping (5min schedule only)'
 370    bipoleConstraint(ca,dt,isl,brCstr)                                   'Su
      bset of branch constraints that limit total HVDC sent from an island'
 371    monopoleConstraint(ca,dt,isl,brCstr,br)                              'Su
      bset of branch constraints that limit the flow on HVDC pole sent from an i
      sland'
 372   
 373   
 374    islandRiskGroup(ca,dt,isl,rg,riskC)                                  'Ma
      ppimg of risk group to island in current trading period for each risk clas
      s - SPD version 11.0 update'
 375    ;
 376   
 377  Alias (t,t1,t2);
 378   
 379  Parameters
 380    studyMode(ca,dt)                                  'RTD~101, RTDP~201, PR
      SS~130, NRSS~132, PRSL~131, NRSL~133, WDS~120'
 381    intervalDuration(ca,dt)                           'Length of the trading
       period in minutes (e.g. 30) applied to each caseID-Period pair'
 382   
 383  * Offers
 384    GenerationStart(ca,dt,o)                                  'The MW genera
      tion level associated with the offer at the start of a trading period'
 385    RampRateUp(ca,dt,o)                                       'The ramping u
      p rate in MW per minute associated with the generation offer (MW/min)'
 386    RampRateDn(ca,dt,o)                                       'The ramping d
      own rate in MW per minute associated with the generation offer (MW/min)'
 387    ReserveGenerationMaximum(ca,dt,o)                         'Maximum gener
      ation and reserve capability for the current trading period (MW)'
 388    WindOffer(ca,dt,o)                                        'Flag to indic
      ate if offer is from wind generator (1 = Yes)'
 389    FKBand(ca,dt,o)                                           'Frequency kee
      per band MW which is set when the risk setter is selected as the frequency
       keeper'
 390    PriceResponsive(ca,dt,o)                                  'Flag to indic
      ate if wind offer is price responsive (1 = Yes)'
 391    PotentialMW(ca,dt,o)                                      'Potential max
       output of Wind offer'
 392   
 393  * Energy offer
 394    EnrgOfrMW(ca,dt,o,blk)                                    'Generation of
      fer block (MW)'
 395    EnrgOfrPrice(ca,dt,o,blk)                                 'Generation of
      fer price ($/MW)'
 396   
 397  * Primary-secondary offer parameters
 398    PrimaryOffer(ca,dt,o)                                     'Flag to indic
      ate if offer is a primary offer (1 = Yes)'
 399    SecondaryOffer(ca,dt,o)                                   'Flag to indic
      ate if offer is a secondary offer (1 = Yes)'
 400   
 401   
 402    GenerationMaximum(ca,dt,o)                                           'Ma
      ximum generation level associated with the generation offer (MW)'
 403    GenerationMinimum(ca,dt,o)                                           'Mi
      nimum generation level associated with the generation offer (MW)'
 404    GenerationEndUp(ca,dt,o)                                             'MW
       generation level associated with the offer at the end of the trading peri
      od assuming ramp rate up'
 405    GenerationEndDown(ca,dt,o)                                           'MW
       generation level associated with the offer at the end of the trading peri
      od assuming ramp rate down'
 406    RampTimeUp(ca,dt,o)                                                  'Mi
      nimum of the trading period length and time to ramp up to maximum (Minutes
      )'
 407    RampTimeDown(ca,dt,o)                                                'Mi
      nimum of the trading period length and time to ramp down to minimum (Minut
      es)'
 408   
 409  * Reserve offer
 410    ResOfrPct(ca,dt,o,blk,resC)                          'The percentage of 
      the MW block available for PLSR of class FIR or SIR'
 411    ResOfrPrice(ca,dt,o,blk,resC,resT)                   'The price of the r
      eserve of the different reserve classes and types ($/MW)'
 412    ResOfrMW(ca,dt,o,blk,resC,resT)                      'The maximum MW off
      ered reserve for the different reserve classes and types (MW)'
 413  * Demand
 414    RequiredLoad(ca,dt,n)                                             'Nodal
       demand for the current trading period in MW'
 415  * Bid
 416    DemBidMW(ca,dt,bd,blk)                               'Demand bid block i
      n MW'
 417    DemBidPrice(ca,dt,bd,blk)                            'Purchase bid price
       in $/MW'
 418    DemBidILRMW(ca,dt,bd,blk,resC)                               'Purchase b
      id ILR block in MW for the different reserve classes'
 419    DemBidILRPrice(ca,dt,bd,blk,resC)                            'Purchase b
      id ILR price in $/MW for the different reserve classes'
 420  * Network
 421    branchResistance(ca,dt,br)                                           'Re
      sistance of the a branch for the current trading period in per unit'
 422    branchSusceptance(ca,dt,br)                                          'Su
      sceptance (inverse of reactance) of a branch for the current trading perio
      d in per unit'
 423    branchFixedLoss(ca,dt,br)                                            'Fi
      xed loss of the a branch for the current trading period in MW'
 424    branchLossBlocks(ca,dt,br)                                           'Nu
      mber of blocks in the loss curve for the a branch in the current trading p
      eriod'
 425    lossSegmentMW(ca,dt,br,los,fd)                                       'MW
       capacity of each loss segment'
 426    lossSegmentFactor(ca,dt,br,los,fd)                                   'Lo
      ss factor of each loss segment'
 427    ACBranchLossMW(ca,dt,br,los,fd)                                      'MW
       element of the loss segment curve in MW'
 428    ACBranchLossFactor(ca,dt,br,los,fd)                                  'Lo
      ss factor element of the loss segment curve'
 429    HVDCBreakPointMWFlow(ca,dt,br,bp,fd)                                 'Va
      lue of power flow on the HVDC at the break point'
 430    HVDCBreakPointMWLoss(ca,dt,br,bp,fd)                                 'Va
      lue of variable losses on the HVDC at the break point'
 431   
 432  * Risk/Reserve
 433    IslandRiskAdjustmentFactor(ca,dt,isl,resC,riskC)                     'Ri
      sk adjustment factor for each island, reserve class and risk class'
 434    FreeReserve(ca,dt,isl,resC,riskC)                                    'MW
       free reserve for each island, reserve class and risk class'
 435    HVDCpoleRampUp(ca,dt,isl,resC,riskC)                                 'HV
      DC pole MW ramp up capability for each island, reserve class and risk clas
      s'
 436   
 437  * NMIR parameters
 438  * The follwing are new input for NMIR
 439    reserveRoundPower(ca,dt,resC)                                        'Da
      tabase flag that disables round power under certain circumstances'
 440    reserveShareEnabled(ca,dt,resC)                                      'Da
      tabase flag if reserve class resC is sharable'
 441    modulationRiskClass(ca,dt,riskC)                                     'HV
      DC energy modulation due to frequency keeping action'
 442    roundPower2MonoLevel(ca,dt)                                          'HV
      DC sent value above which one pole is stopped and therefore FIR cannot use
       round power'
 443    bipole2MonoLevel(ca,dt)                                              'HV
      DC sent value below which one pole is available to start in the opposite d
      irection and therefore SIR can use round power'
 444    MonopoleMinimum(ca,dt)                                               'Th
      e lowest level that the sent HVDC sent can ramp down to when round power i
      s not available.'
 445    HVDCControlBand(ca,dt,rd)                                            'Mo
      dulation limit of the HVDC control system apply to each HVDC direction'
 446    HVDClossScalingFactor(ca,dt)                                         'Lo
      sses used for full voltage mode are adjusted by a factor of (700/500)^2 fo
      r reduced voltage operation'
 447    sharedNFRFactor(ca,dt)                                               'Fa
      ctor that is applied to [sharedNFRLoad - sharedNFRLoadOffset] as part of t
      he calculation of sharedNFRMax'
 448    sharedNFRLoadOffset(ca,dt,isl)                                       'Is
      land load that does not provide load damping, e.g., Tiwai smelter load in 
      the South Island. Subtracted from the sharedNFRLoad in the calculation of 
      sharedNFRMax.'
 449    effectiveFactor(ca,dt,isl,resC,riskC)                                'Es
      timate of the effectiveness of the shared reserve once it has been receive
      d in the risk island.'
 450    RMTReserveLimitTo(ca,dt,isl,resC)                                    'Th
      e shared reserve limit used by RMT when it calculated the NFRs. Applied as
       a cap to the value that is calculated for SharedNFRMax.'
 451  * The follwing are calculated parameters for NMIR
 452    reserveShareEnabledOverall(ca,dt)                                    'An
       internal parameter based on the FIR and SIR enabled, and used as a switch
       in various places'
 453    modulationRisk(ca,dt)                                                'Ma
      x of HVDC energy modulation due to frequency keeping action'
 454    roPwrZoneExit(ca,dt,resC)                                            'Ab
      ove this point there is no guarantee that HVDC sent can be reduced below M
      onopoleMinimum.'
 455    sharedNFRLoad(ca,dt,isl)                                             'Is
      land load, calculated in pre-processing from the required load and the bid
      s. Used as an input to the calculation of SharedNFRMax.'
 456    sharedNFRMax(ca,dt,isl)                                              'Am
      ount of island free reserve that can be shared through HVDC'
 457    numberOfPoles(ca,dt,isl)                                             'Nu
      mber of HVDC poles avaialbe to send energy from an island'
 458    monoPoleCapacity(ca,dt,isl,br)                                       'Ma
      ximum capacity of monopole defined by min of branch capacity and monopole 
      constraint RHS'
 459    biPoleCapacity(ca,dt,isl)                                            'Ma
      ximum capacity of bipole defined by bipole constraint RHS'
 460    HVDCMax(ca,dt,isl)                                                   'Ma
      x HVDC flow based on available poles and branch group constraints RHS'
 461    HVDCCapacity(ca,dt,isl)                                              'To
      tal sent capacity of HVDC based on available poles'
 462    HVDCResistance(ca,dt,isl)                                            'Es
      timated resistance of HVDC flow sent from an island'
 463    HVDClossSegmentMW(ca,dt,isl,los)                                     'MW
       capacity of each loss segment applied to aggregated HVDC capacity'
 464    HVDClossSegmentFactor(ca,dt,isl,los)                                 'Lo
      ss factor of each loss segment applied to to aggregated HVDC loss'
 465    HVDCSentBreakPointMWFlow(ca,dt,isl,los)                              'Va
      lue of total HVDC sent power flow at the break point               --> lam
      bda segment loss model'
 466    HVDCSentBreakPointMWLoss(ca,dt,isl,los)                              'Va
      lue of ariable losses of the total HVDC sent at the break point    --> lam
      bda segment loss model'
 467    HVDCReserveBreakPointMWFlow(ca,dt,isl,los)                           'Va
      lue of total HVDC sent power flow + reserve at the break point     --> lam
      bda segment loss model'
 468    HVDCReserveBreakPointMWLoss(ca,dt,isl,los)                           'Va
      lue of post-contingent variable HVDC losses at the break point     --> lam
      bda segment loss model'
 469  * The follwing are flag and scalar for testing
 470    UseShareReserve(ca)                                                  'Fl
      ag to indicate if the reserve share is applied for CaseID'
 471    BigM                                                                 'Bi
      g M value to be applied for single active segment HVDC loss model' /10000/
 472  * NMIR parameters end
 473   
 474  * Branch constraint
 475    BranchConstraintSense(ca,dt,brCstr)                                  'Br
      anch security constraint sense for the current trading period (-1:<=, 0:= 
      1:>=)'
 476    BranchConstraintLimit(ca,dt,brCstr)                                  'Br
      anch security constraint limit for the current trading period'
 477   
 478  * Market node constraint
 479    MNodeConstraintSense(ca,dt,MnodeCstr)                                'Ma
      rket node constraint sense for the current trading period'
 480    MNodeConstraintLimit(ca,dt,MnodeCstr)                                'Ma
      rket node constraint limit for the current trading period'
 481   
 482   
 483  * Post-processing
 484    useBranchFlowMIP(ca,dt)                             'Flag to indicate if
       integer constraints are needed in the branch flow model: 1 = Yes'
 485   
 486  * Real Time Pricing
 487    ScarcityEnrgLimit(ca,dt,n,blk)                                    'Bus e
      nergy scarcity limits'
 488    ScarcityEnrgPrice(ca,dt,n,blk)                                    'Bus e
      nergy scarcity prices vs limits'
 489   
 490   
 491  * Real Time Pricing - Calculated parameters
 492    InitialLoad(ca,dt,n)                                'Value that represen
      ts the Pnode load MW at the start of the solution interval. Depending on t
      he inputs this value will be either actual load, an operator applied overr
      ide or an estimated initial load'
 493    LoadIsScalable(ca,dt,n)                             'Binary value. If Tr
      ue then the Pnode InitialLoad will be scaled in order to calculate nodedem
      and, if False then Pnode InitialLoad will be directly assigned to nodedema
      nd'
 494    LoadScalingFactor(ca,dt,isl)                        'Island-level scalin
      g factor applied to InitialLoad in order to calculate nodedemand'
 495    TargetTotalLoad(ca,dt,isl)                          'Island-level MW loa
      d forecast'
 496    LoadCalcLosses(ca,dt,isl)                           'Island-level MW los
      ses used to calculate the Island-level load forecast from the InputIPS and
       the IslandPSD. 1st loop --> InitialLosses, 2nd solve loop --> SystemLosse
      s as calculated in section 6.3'
 497    EstimatedInitialLoad(ca,dt,n)                       'Calculated estimate
       of initial MW load, available to be used as an alternative to InputInitia
      lLoad'
 498    EstScalingFactor(ca,dt,isl)                         'Scaling applied to 
      ConformingFactor load MW in order to calculate EstimatedInitialLoad'
 499    EstLoadIsScalable(ca,dt,n)                          'Binary value. If Tr
      ue then ConformingFactor load MW will be scaled in order to calculate Esti
      matedInitialLoad. If False then EstNonScalableLoad will be assigned direct
      ly to EstimatedInitialLoad'
 500    EstNonScalableLoad(ca,dt,n)                         'For a non-conformin
      g Pnode this will be the NonConformingLoad MW input, for a conforming Pnod
      e this will be the ConformingFactor MW input if that value is negative, ot
      herwise it will be zero'
 501    EstScalableLoad(ca,dt,n)                            'For a non-conformin
      g Pnode this value will be zero. For a conforming Pnode this value will be
       the ConformingFactor if it is non-negative, otherwise this value will be 
      zero'
 502   
 503   
 504    ;
 505   
 506  Scalars
 507  * Violation penalties
 508  * These violation penalties are not specified in the model formulation doc
      ument (ver.4.3) but are specified in the
 509  * document "Resolving Infeasibilities & High Spring Washer Price situation
      s - an overview" available at www.systemoperator.co.nz/n2766,264.html
 510    deficitBusGenerationPenalty                      'Bus deficit violation 
      penalty'                      /500000/
 511    surplusBusGenerationPenalty                      'Bus surplus violation 
      penalty'                      /500000/
 512    deficitBrCstrPenalty                             'Deficit branch group c
      onstraint violation penalty'  /650000/
 513    surplusBrCstrPenalty                             'Surplus branch group c
      onstraint violation penalty'  /650000/
 514    deficitGnrcCstrPenalty                           'Deficit generic constr
      aint violation penalty'       /710000/
 515    surplusGnrcCstrPenalty                           'Surplus generic constr
      aint violation penalty'       /710000/
 516    deficitRampRatePenalty                           'Deficit ramp rate viol
      ation penalty'                /850000/
 517    surplusRampRatePenalty                           'Surplus ramp rate viol
      ation penalty'                /850000/
 518    deficitBranchFlowPenalty                         'Deficit branch flow vi
      olation penalty'              /600000/
 519    surplusBranchFlowPenalty                         'Surplus branch flow vi
      olation penalty'              /600000/
 520    deficitMnodeCstrPenalty                          'Deficit market node co
      nstraint violation penalty'   /700000/
 521    surplusMnodeCstrPenalty                          'Surplus market node co
      nstraint violation penalty'   /700000/
 522    DeficitReservePenalty_CE                         '6s and 60s CE reserve 
      deficit violation penalty'    /100000/
 523    DeficitReservePenalty_ECE                        '6s and 60s ECE reserve
       deficit violation penalty'   /800000/
 524    ;
 525   
 526   
 527  *=========================================================================
      ==========
 528  * 3. Declare model variables and constraints, and initialise constraints
 529  *=================================================================== =====
      ===========
 530   
 531  * VARIABLES - UPPER CASE
 532  * Equations, parameters and everything else - lower or mixed case
 533   
 534  * Model formulation originally based on the SPD model formulation version 
      4.3 (15 Feb 2008) and amended as indicated
 535   
 536  Variables
 537    NETBENEFIT                                       'Defined as the differe
      nce between the consumer surplus and producer costs adjusted for penalty c
      osts'
 538  * Risk
 539    ISLANDRISK(ca,dt,isl,resC,riskC)                    'Island MW risk for 
      the different reserve and risk classes'
 540    GENISLANDRISK(ca,dt,isl,o,resC,riskC)               'Island MW risk for 
      different risk setting generators'
 541    GENISLANDRISKGROUP(ca,dt,isl,rg,resC,riskC)         'Island MW risk for 
      different risk group - SPD version 11.0'
 542    HVDCGENISLANDRISK(ca,dt,isl,o,resC,riskC)           'Island MW risk for 
      different risk setting generators + HVDC'
 543    HVDCMANISLANDRISK(ca,dt,isl,resC,riskC)             'Island MW risk for 
      manual risk + HVDC'
 544    HVDCREC(ca,dt,isl)                                  'Total net pre-conti
      ngent HVDC MW flow received at each island'
 545    RISKOFFSET(ca,dt,isl,resC,riskC)                    'MW offset applied t
      o the raw risk to account for HVDC pole rampup, AUFLS, free reserve and no
      n-compliant generation'
 546   
 547  * NMIR free variables
 548    HVDCRESERVESENT(ca,dt,isl,resC,rd)                  'Total net post-cont
      ingent HVDC MW flow sent from an island applied to each reserve class'
 549    HVDCRESERVELOSS(ca,dt,isl,resC,rd)                  'Post-contingent HVD
      C loss of energy + reserve sent from an island applied to each reserve cla
      ss'
 550  * NMIR free variables end
 551   
 552  * Network
 553    ACNODENETINJECTION(ca,dt,b)                         'MW injection at bus
      es corresponding to AC nodes'
 554    ACBRANCHFLOW(ca,dt,br)                              'MW flow on undirect
      ed AC branch'
 555    ACNODEANGLE(ca,dt,b)                                'Bus voltage angle'
 556   
 557  * Demand bids can be either positive or negative from v6.0 of SPD formulat
      ion (with DSBF)
 558  * The lower bound of the free variable is updated in vSPDSolve.gms to allo
      w backward compatibility
 559  * Note the formulation now refers to this as Demand. So Demand (in SPD for
      mulation) = Purchase (in vSPD code)
 560    PURCHASE(ca,dt,bd)                                  'Total MW purchase s
      cheduled'
 561    PURCHASEBLOCK(ca,dt,bd,blk)                         'MW purchase schedul
      ed from the individual trade blocks of a bid'
 562   
 563    ;
 564   
 565  Positive variables
 566  * system cost and benefit
 567    SYSTEMBENEFIT(ca,dt)                                'Total purchase bid 
      benefit by period'
 568    SYSTEMCOST(ca,dt)                                   'Total generation an
      d reserve costs by period'
 569    SYSTEMPENALTYCOST(ca,dt)                            'Total violation cos
      ts by period'
 570    TOTALPENALTYCOST                                 'Total violation costs'
 571    SCARCITYCOST(ca,dt)                                 'Total scarcity Cost
      '
 572  * scarcity variables
 573    ENERGYSCARCITYBLK(ca,dt,n,blk)                      'Block energy scarci
      ty cleared at bus b'
 574    ENERGYSCARCITYNODE(ca,dt,n)                         'Energy scarcity cle
      ared at bus b'
 575   
 576    RESERVESHORTFALLBLK(ca,dt,isl,resC,riskC,blk)       'Block reserve short
      fall by risk class (excluding genrisk and HVDC secondary risk)'
 577    RESERVESHORTFALL(ca,dt,isl,resC,riskC)              'Reserve shortfall b
      y risk class (excluding genris kand HVDC secondary risk)'
 578   
 579    RESERVESHORTFALLUNITBLK(ca,dt,isl,o,resC,riskC,blk) 'Block reserve short
      fall by risk generation unit (applied to genrisk and HVDC secondary risk)'
 580    RESERVESHORTFALLUNIT(ca,dt,isl,o,resC,riskC)        'Reserve shortfall b
      y risk generation unit (applied to genrisk and HVDC secondary risk)'
 581   
 582    RESERVESHORTFALLGROUPBLK(ca,dt,isl,rg,resC,riskC,blk) 'Block Reserve sho
      rtfall by risk group (applied to genrisk and HVDC secondary risk)'
 583    RESERVESHORTFALLGROUP(ca,dt,isl,rg,resC,riskC)        'Reserve shortfall
       by risk risk group (applied to genrisk and HVDC secondary risk)'
 584   
 585  * Generation
 586    GENERATION(ca,dt,o)                                 'Total MW generation
       scheduled from an offer'
 587    GENERATIONBLOCK(ca,dt,o,blk)                        'MW generation sched
      uled from the individual trade blocks of an offer'
 588    GENERATIONUPDELTA(ca,dt,o)                          'Total increase in M
      W generation scheduled from an offer'
 589    GENERATIONDNDELTA(ca,dt,o)                          'Total decrease in M
      W generation scheduled from an offer'
 590  * Reserve
 591    RESERVE(ca,dt,o,resC,resT)                          'MW Reserve schedule
      d from an offer'
 592    RESERVEBLOCK(ca,dt,o,blk,resC,resT)                 'MW Reserve schedule
      d from the individual trade blocks of an offer'
 593    ISLANDRESERVE(ca,dt,isl,resC)                       'Total island cleare
      d reserve'
 594   
 595  * NMIR positive variables
 596    SHAREDNFR(ca,dt,isl)                                'Amount of free load
       reserve being shared from an island'
 597    SHAREDRESERVE(ca,dt,isl,resC)                       'Amount of cleared r
      eserve from an island being shared to the other island'
 598    HVDCSENT(ca,dt,isl)                                 'Directed pre-contin
      gent HVDC MW flow sent from each island'
 599    HVDCSENTLOSS(ca,dt,isl)                             'Energy loss for  HV
      DC flow sent from an island'
 600    RESERVESHAREEFFECTIVE(ca,dt,isl,resC,riskC)         'Effective shared re
      serve received at island after adjusted for losses and effectiveness facto
      r'
 601    RESERVESHARERECEIVED(ca,dt,isl,resC,rd)             'Directed shared res
      erve received at island after adjusted for losses'
 602    RESERVESHARESENT(ca,dt,isl,resC,rd)                 'Directed shared res
      erve sent from and island'
 603    RESERVESHAREPENALTY(ca,dt)                          'Penalty cost for ex
      cessive reserve sharing'
 604  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation of RESERVES
      HAREPENALTY
 605    RESERVESHAREEFFECTIVE_CE(ca,dt,isl,resC)            'Max effective share
      d reserve for CE risk received at island after adjusted for losses and eff
      ectiveness factor'
 606    RESERVESHAREEFFECTIVE_ECE(ca,dt,isl,resC)           'Max effective share
      d reserve for ECE risk received at island after adjusted for losses and ef
      fectiveness factor'
 607  * NMIR positive variables end
 608   
 609  * Network
 610    HVDCLINKFLOW(ca,dt,br)                              'MW flow at the send
      ing end scheduled for the HVDC link'
 611    HVDCLINKLOSSES(ca,dt,br)                            'MW losses on the HV
      DC link'
 612    LAMBDA(ca,dt,br,bp)                                 'Non-negative weight
       applied to the breakpoint of the HVDC link'
 613    ACBRANCHFLOWDIRECTED(ca,dt,br,fd)                   'MW flow on the dire
      cted branch'
 614    ACBRANCHLOSSESDIRECTED(ca,dt,br,fd)                 'MW losses on the di
      rected branch'
 615    ACBRANCHFLOWBLOCKDIRECTED(ca,dt,br,los,fd)          'MW flow on the diff
      erent blocks of the loss curve'
 616    ACBRANCHLOSSESBLOCKDIRECTED(ca,dt,br,los,fd)        'MW losses on the di
      fferent blocks of the loss curve'
 617  * Violations
 618    DEFICITBUSGENERATION(ca,dt,b)                       'Deficit generation 
      at a bus in MW'
 619    SURPLUSBUSGENERATION(ca,dt,b)                       'Surplus generation 
      at a bus in MW'
 620    DEFICITBRANCHSECURITYCONSTRAINT(ca,dt,brCstr)       'Deficit branch secu
      rity constraint in MW'
 621    SURPLUSBRANCHSECURITYCONSTRAINT(ca,dt,brCstr)       'Surplus branch secu
      rity constraint in MW'
 622    DEFICITRAMPRATE(ca,dt,o)                            'Deficit ramp rate i
      n MW'
 623    SURPLUSRAMPRATE(ca,dt,o)                            'Surplus ramp rate i
      n MW'
 624    DEFICITBRANCHFLOW(ca,dt,br)                         'Deficit branch flow
       in MW'
 625    SURPLUSBRANCHFLOW(ca,dt,br)                         'Surplus branch flow
       in MW'
 626    DEFICITMNODECONSTRAINT(ca,dt,MnodeCstr)             'Deficit market node
       constraint in MW'
 627    SURPLUSMNODECONSTRAINT(ca,dt,MnodeCstr)             'Surplus market node
       constraint in MW'
 628  * Seperate CE and ECE violation variables to support different CVPs for CE
       and ECE
 629    DEFICITRESERVE_CE(ca,dt,isl,resC)                   'Deficit CE reserve 
      generation in each island for each reserve class in MW'
 630    DEFICITRESERVE_ECE(ca,dt,isl,resC)                  'Deficit ECE reserve
       generation in each island for each reserve class in MW'
 631   
 632    ;
 633   
 634  Binary variables
 635  * NMIR binary variables
 636    HVDCSENDING(ca,dt,isl)                              'Binary variable ind
      icating if island isl is the sending end of the HVDC flow. 1 = Yes.'
 637    INZONE(ca,dt,isl,resC,z)                            'Binary variable (1 
      = Yes ) indicating if the HVDC flow is in a zone (z) that facilitates the 
      appropriate quantity of shared reserves in the reverse direction to the HV
      DC sending island isl for reserve class resC.'
 638    HVDCSENTINSEGMENT(ca,dt,isl,los)                    'Binary variable to 
      decide which loss segment HVDC flow sent from an island falling into --> a
      ctive segment loss model'
 639  * Discete dispachable demand block binary variables
 640    PURCHASEBLOCKBINARY(ca,dt,bd,blk)                   'Binary variable to 
      decide if a purchase block is cleared either fully or nothing at all'
 641  * HVDC Secondary risk should not be covered if HVDC sending is zero. The f
      ollowing binary variable is to enforced that (Update from RTP phase 4)
 642    HVDCSENDZERO(ca,dt,isl)                              'Binary variable in
      dicating if island is NOT the sending energy through HVDC flow. 1 = Yes.'
 643    ;
 644   
 645  SOS1 Variables
 646    ACBRANCHFLOWDIRECTED_INTEGER(ca,dt,br,fd)           'Integer variables u
      sed to select branch flow direction in the event of circular branch flows 
      (3.8.1)'
 647    HVDCLINKFLOWDIRECTED_INTEGER(ca,dt,fd)              'Integer variables u
      sed to select the HVDC branch flow direction on in the event of S->N (forw
      ard) and N->S (reverse) flows (3.8.2)'
 648  * Integer varaible to prevent intra-pole circulating branch flows
 649    HVDCPOLEFLOW_INTEGER(ca,dt,pole,fd)                 'Integer variables u
      sed to select the HVDC pole flow direction on in the event of circulating 
      branch flows within a pole'
 650    ;
 651   
 652  SOS2 Variables
 653    LAMBDAINTEGER(ca,dt,br,bp)                          'Integer variables u
      sed to enforce the piecewise linear loss approxiamtion on the HVDC links'
 654    LAMBDAHVDCENERGY(ca,dt,isl,bp)                      'Integer variables u
      sed to enforce the piecewise linear loss approxiamtion (NMIR) on the HVDC 
      links'
 655    LAMBDAHVDCRESERVE(ca,dt,isl,resC,rd,rsbp)           'Integer variables u
      sed to enforce the piecewise linear loss approxiamtion (NMIR) on the HVDC 
      links'
 656    ;
 657   
 658   
 659  Equations
 660    ObjectiveFunction                                'Objective function of 
      the dispatch model (5.1.1.1)'
 661  * Cost and benefit breaking down
 662    SystemBenefitDefinition(ca,dt)                      'Defined as the sum 
      of the purcahse bid benefit'
 663    SystemCostDefinition(ca,dt)                         'Defined as the sum 
      of the generation and reserve costs'
 664    SystemPenaltyCostDefinition(ca,dt)                  'Defined as the sum 
      of the individual violation costs'
 665    TotalViolationCostDefinition                     'Deined as the sume of 
      period violation cost - (for reporting)'
 666    TotalScarcityCostDefinition(ca,dt)                  'Deined as the sume 
      of scarcity cost'
 667   
 668   
 669  * Offer and purchase constraints
 670    GenerationChangeUpDown(ca,dt,o)                     'Calculate the MW of
       generation increase/decrease for RTD and RTDP (6.1.1.2)'
 671    GenerationOfferDefintion(ca,dt,o)                   'Definition of gener
      ation provided by an offer (6.1.1.3)'
 672    DemBidDiscrete(ca,dt,bd,blk)                        'Definition of discr
      ete purchase mode (6.1.1.7)'
 673    DemBidDefintion(ca,dt,bd)                           'Definition of purch
      ase provided by a bid (6.1.1.8)'
 674    EnergyScarcityDefinition(ca,dt,n)                   'Definition of bus e
      nergy scarcity (6.1.1.10)'
 675   
 676  * Ramping constraints
 677    GenerationRampUp(ca,dt,o)                           'Maximum movement of
       the generator upwards due to up ramp rate (6.2.1.1)'
 678    GenerationRampDown(ca,dt,o)                         'Maximum movement of
       the generator downwards due to down ramp rate (6.2.1.2)'
 679   
 680   
 681   
 682  * HVDC transmission constraints
 683    HVDClinkMaximumFlow(ca,dt,br)                       'Maximum flow on eac
      h HVDC link (6.3.1.1)'
 684    HVDClinkLossDefinition(ca,dt,br)                    'Definition of losse
      s on the HVDC link (6.3.1.2)'
 685    HVDClinkFlowDefinition(ca,dt,br)                    'Definition of MW fl
      ow on the HVDC link (6.3.1.3)'
 686    LambdaDefinition(ca,dt,br)                          'Definition of weigh
      ting factor (6.3.1.4)'
 687   
 688  * HVDC transmission constraints to resolve non-physical loss and circular 
      flow
 689  * These constraints are not explicitly formulated in SPD formulation
 690  * But you can find the description in "Post-Solve Checks"
 691    HVDClinkFlowIntegerDefinition1(ca,dt)               'Definition 1 of the
       integer HVDC link flow variable )'
 692    HVDClinkFlowIntegerDefinition2(ca,dt,fd)            'Definition 2 of the
       integer HVDC link flow variable'
 693    HVDClinkFlowIntegerDefinition3(ca,dt,pole)          'Definition 4 of the
       HVDC pole integer varaible to prevent intra-pole circulating branch flows
      '
 694    HVDClinkFlowIntegerDefinition4(ca,dt,pole,fd)       'Definition 4 of the
       HVDC pole integer varaible to prevent intra-pole circulating branch flows
      '
 695    LambdaIntegerDefinition1(ca,dt,br)                  'Definition of weigh
      ting factor when branch integer constraints are needed'
 696    LambdaIntegerDefinition2(ca,dt,br,los)              'Definition of weigh
      ting factor when branch integer constraints are needed'
 697   
 698  * AC transmission constraints
 699    ACnodeNetInjectionDefinition1(ca,dt,b)              '1st definition of t
      he net injection at buses corresponding to AC nodes (6.4.1.1)'
 700    ACnodeNetInjectionDefinition2(ca,dt,b)              '2nd definition of t
      he net injection at buses corresponding to AC nodes (6.4.1.2)'
 701    ACBranchMaximumFlow(ca,dt,br,fd)                    'Maximum flow on the
       AC branch (6.4.1.3)'
 702    ACBranchFlowDefinition(ca,dt,br)                    'Relationship betwee
      n directed and undirected branch flow variables (6.4.1.4)'
 703    LinearLoadFlow(ca,dt,br)                            'Equation that descr
      ibes the linear load flow (6.4.1.5)'
 704    ACBranchBlockLimit(ca,dt,br,los,fd)                 'Limit on each AC br
      anch flow block (6.4.1.6)'
 705    ACDirectedBranchFlowDefinition(ca,dt,br,fd)         'Composition of the 
      directed branch flow from the block branch flow (6.4.1.7)'
 706    ACBranchLossCalculation(ca,dt,br,los,fd)            'Calculation of the 
      losses in each loss segment (6.4.1.8)'
 707    ACDirectedBranchLossDefinition(ca,dt,br,fd)         'Composition of the 
      directed branch losses from the block branch losses (6.4.1.9)'
 708   
 709  * AC transmission constraints to resolve circular flow
 710    ACDirectedBranchFlowIntegerDefinition1(ca,dt,br)    'Integer constraint 
      to enforce a flow direction on loss AC branches in the presence of circula
      r branch flows or non-physical losses'
 711    ACDirectedBranchFlowIntegerDefinition2(ca,dt,br,fd) 'Integer constraint 
      to enforce a flow direction on loss AC branches in the presence of circula
      r branch flows or non-physical losses'
 712   
 713  * Risk
 714    RiskOffsetCalculation_DCCE(ca,dt,isl,resC,riskC)          '6.5.1.1 : Cal
      culation of the risk offset variable for the DCCE risk class.'
 715    RiskOffsetCalculation_DCECE(ca,dt,isl,resC,riskC)         '6.5.1.3 : Cal
      culation of the risk offset variable for the DCECE risk class.'
 716    HVDCRecCalculation(ca,dt,isl)                             '6.5.1.4 : Cal
      culation of the net received HVDC MW flow into an island.'
 717    HVDCIslandRiskCalculation(ca,dt,isl,resC,riskC)           '6.5.1.5 : Cal
      culation of the island risk for a DCCE and DCECE.'
 718   
 719    GenIslandRiskCalculation(ca,dt,isl,o,resC,riskC)          '6.5.1.6 : Cal
      culation of the island risk for risk setting generators.'
 720    GenIslandRiskCalculation_1(ca,dt,isl,o,resC,riskC)        '6.5.1.6 : Cal
      culation of the island risk for risk setting generators.'
 721    ManualIslandRiskCalculation(ca,dt,isl,resC,riskC)         '6.5.1.7 : Cal
      culation of the island risk based on manual specifications.'
 722    HVDCSendMustZeroBinaryDefinition(ca,dt,isl)               '6.5.1.8: Defi
      ne a flag to show if HVDC sending zero MW flow from an island '
 723   
 724    HVDCIslandSecRiskCalculation_GEN(ca,dt,isl,o,resC,riskC)     '6.5.1.9 : 
      Calculation of the island risk for an HVDC secondary risk to an AC risk.'
 725    HVDCIslandSecRiskCalculation_GEN_1(ca,dt,isl,o,resC,riskC)   '6.5.1.9 : 
      Calculation of the island risk for an HVDC secondary risk to an AC risk.'
 726    HVDCIslandSecRiskCalculation_Manual(ca,dt,isl,resC,riskC)    '6.5.1.10: 
      Calculation of the island risk for an HVDC secondary risk to a manual risk
      .'
 727    HVDCIslandSecRiskCalculation_Manu_1(ca,dt,isl,resC,riskC)    '6.5.1.10: 
      Calculation of the island risk for an HVDC secondary risk to a manual risk
      .'
 728    GenIslandRiskGroupCalculation(ca,dt,isl,rg,resC,riskC)       '6.5.1.11: 
      Calculation of the island risk of risk group.'
 729    GenIslandRiskGroupCalculation_1(ca,dt,isl,rg,resC,riskC)     '6.5.1.11: 
      Calculation of the risk of risk group.'
 730   
 731  * General NMIR equations
 732    EffectiveReserveShareCalculation(ca,dt,isl,resC,riskC)                  
               '6.5.2.1 : Calculation of effective shared reserve'
 733    SharedReserveLimitByClearedReserve(ca,dt,isl,resC)                      
               '6.5.2.2 : Shared offered reserve is limited by cleared reserved'
 734    BothClearedAndFreeReserveCanBeShared(ca,dt,isl,resC,rd)                 
               '6.5.2.4 : Shared reserve is covered by cleared reserved and shar
      eable free reserve'
 735    ReserveShareSentLimitByHVDCControlBand(ca,dt,isl,resC,rd)               
               '6.5.2.5 : Reserve share sent from an island is limited by HVDC c
      ontrol band'
 736    FwdReserveShareSentLimitByHVDCCapacity(ca,dt,isl,resC,rd)               
               '6.5.2.6 : Forward reserve share sent from an island is limited b
      y HVDC capacity'
 737    ReverseReserveOnlyToEnergySendingIsland(ca,dt,isl,resC,rd)              
               '6.5.2.7 : Shared reserve sent in reverse direction is possible o
      nly if the island is not sending energy through HVDC'
 738    ReverseReserveShareLimitByHVDCControlBand(ca,dt,isl,resC,rd)            
               '6.5.2.8 : Reverse reserve share recieved at an island is limited
       by HVDC control band'
 739    ForwardReserveOnlyToEnergyReceivingIsland(ca,dt,isl,resC,rd)            
               '6.5.2.9 : Forward received reserve is possible if in the same di
      rection of HVDC '
 740    ReverseReserveLimitInReserveZone(ca,dt,isl,resC,rd,z)                   
               '6.5.2.10: Reverse reserve constraint if HVDC sent flow in revers
      e zone'
 741    ZeroReserveInNoReserveZone(ca,dt,isl,resC,z)                            
               '6.5.2.11 & 6.5.2.18: No reverse reserve if HVDC sent flow in no 
      reverse zone and no forward reserve if round power disabled'
 742    OnlyOneActiveHVDCZoneForEachReserveClass(ca,dt,resC)                    
               '6.5.2.12: Across both island, one and only one zone is active fo
      r each reserve class'
 743    ZeroSentHVDCFlowForNonSendingIsland(ca,dt,isl)                          
               '6.5.2.13: Directed HVDC sent from an island, if non-zero, must f
      all in a zone for each reserve class'
 744    RoundPowerZoneSentHVDCUpperLimit(ca,dt,isl,resC,z)                      
               '6.5.2.14: Directed HVDC sent from an island <= RoundPowerZoneExi
      t level if in round power zone of that island'
 745    HVDCSendingIslandDefinition(ca,dt,isl,resC)                             
               '6.5.2.15: An island is HVDC sending island if HVDC flow sent is 
      in one of the three zones for each reserve class '
 746    OnlyOneSendingIslandExists(ca,dt)                                       
               '6.5.2.19: One and only one island is HVDC sending island'
 747    HVDCSentCalculation(ca,dt,isl)                                          
               '6.5.2.20: Total HVDC sent from each island'
 748   
 749  * Lamda loss model
 750    HVDCFlowAccountedForForwardReserve(ca,dt,isl,resC,rd)                   
               '6.5.2.21: HVDC flow sent from an island taking into account forw
      ard sent reserve'
 751    ForwardReserveReceivedAtHVDCReceivingIsland(ca,dt,isl,resC,rd)          
               '6.5.2.22: Forward reserve RECEIVED at an HVDC receiving island'
 752    HVDCFlowAccountedForReverseReserve(ca,dt,isl,resC,rd)                   
               '6.5.2.23: HVDC flow sent from an island taking into account reve
      rse received reserve'
 753    ReverseReserveReceivedAtHVDCSendingIsland(ca,dt,isl,resC,rd)            
               '6.5.2.24: Reverse reserve RECEIVED at an HVDC sending island'
 754    HVDCSentEnergyLambdaDefinition(ca,dt,isl)                               
               '6.5.2.25: Definition of weight factor for total HVDC energy sent
       from an island'
 755    HVDCSentEnergyFlowDefinition(ca,dt,isl)                                 
               '6.5.2.26: Lambda definition of total HVDC energy flow sent from 
      an island'
 756    HVDCSentEnergyLossesDefinition(ca,dt,isl)                               
               '6.5.2.27: Lambda definition of total loss of HVDC energy sent fr
      om an island'
 757    HVDCSentReserveLambdaDefinition(ca,dt,isl,resC,rd)                      
               '6.5.2.28: Definition of weight factor for total HVDC+reserve sen
      t from an island'
 758    HVDCSentReserveFlowDefinition(ca,dt,isl,resC,rd)                        
               '6.5.2.29: Lambda definition of Reserse + Energy flow on HVDC sen
      t from an island'
 759    HVDCSentReserveLossesDefinition(ca,dt,isl,resC,rd)                      
               '6.5.2.30: Lambda definition of Reserse + Energy loss on HVDC sen
      t from an island'
 760   
 761  * Reserve share penalty
 762  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation
 763    ReserveShareEffective_CE_Calculation(ca,dt,isl,resC,riskC)              
               '6.5.2.31: Calculate max effective shared reserve for CE risk rec
      eived at island'
 764    ReserveShareEffective_ECE_Calculation(ca,dt,isl,resC,riskC)             
               '6.5.2.31: Calculate max effective shared reserve for ECE risk re
      ceived at island'
 765    ExcessReserveSharePenalty(ca,dt)                                        
               '6.5.2.31: Constraint to avoid excessive reserve share'
 766   
 767  * Reserve
 768    PLSRReserveProportionMaximum(ca,dt,o,blk,resC,resT)                     
               '6.5.3.1: Maximum PLSR as a proportion of the block MW'
 769    ReserveInterruptibleOfferLimit(ca,dt,o,bd,resC,resT)                    
               '6.5.3.3: Cleared IL reserve is constrained by cleared dispatchab
      le demand'
 770    ReserveOfferDefinition(ca,dt,o,resC,resT)                               
               '6.5.3.4: Definition of the reserve offers of different classes a
      nd types'
 771    EnergyAndReserveMaximum(ca,dt,o,resC)                                   
               '6.5.3.5: Definition of maximum energy and reserves from each gen
      erator'
 772   
 773  * Reserve scarcity/shortfall
 774    HVDCRiskReserveShortFallCalculation(ca,dt,isl,resC,RiskC)               
               '6.5.4.2: Total Reserve Shortfall for DCCE risk'
 775    ManualRiskReserveShortFallCalculation(ca,dt,isl,resC,RiskC)             
               '6.5.4.2: Total Reserve Shortfall for Manual risk'
 776    GenRiskReserveShortFallCalculation(ca,dt,isl,o,resC,RiskC)              
               '6.5.4.2: Total Reserve Shortfall for generation risk unit'
 777    HVDCsecRiskReserveShortFallCalculation(ca,dt,isl,o,resC,RiskC)          
               '6.5.4.2: Total Reserve Shortfall for generation unit + HVDC risk
      '
 778    HVDCsecManualRiskReserveShortFallCalculation(ca,dt,isl,resC,RiskC)      
                '6.5.4.2: Total Reserve Shortfall for Manual risk + HVDC risk'
 779    RiskGroupReserveShortFallCalculation(ca,dt,isl,rg,resC,RiskC)           
                '6.5.4.2: Total Reserve Shortfall for Risk Group'
 780   
 781  * Matching of reserve requirement and availability
 782    IslandReserveCalculation(ca,dt,isl,resC)                                
               '6.5.5.1: Calculate total island cleared reserve'
 783    SupplyDemandReserveRequirement(ca,dt,isl,resC,riskC)                    
               '6.5.5.2&3: Matching of reserve supply and demand'
 784   
 785  * Branch security constraints
 786    BranchSecurityConstraintLE(ca,dt,brCstr)                                
               '6.6.1.5: Branch security constraint with LE sense'
 787    BranchSecurityConstraintGE(ca,dt,brCstr)                                
               '6.6.1.5: Branch security constraint with GE sense'
 788    BranchSecurityConstraintEQ(ca,dt,brCstr)                                
               '6.6.1.5: Branch security constraint with EQ sense'
 789   
 790  * Market node security constraints
 791    MNodeSecurityConstraintLE(ca,dt,MnodeCstr)                              
               '6.6.1.7: Market node security constraint with LE sense'
 792    MNodeSecurityConstraintGE(ca,dt,MnodeCstr)                              
               '6.6.1.7: Market node security constraint with GE sense'
 793    MNodeSecurityConstraintEQ(ca,dt,MnodeCstr)                              
               '6.6.1.7: Market node security constraint with EQ sense'
 794   
 795    ;
 796   
 797  * OBJECTIVE FUNCTION (5.1.1.1)
 798  ObjectiveFunction..
 799    NETBENEFIT
 800  =e=
 801    sum[ t, SYSTEMBENEFIT(t) - SYSTEMCOST(t) - SCARCITYCOST(t)
 802          - SYSTEMPENALTYCOST(t) - RESERVESHAREPENALTY(t) ]
 803    + sum[(t,n,blk), ScarcityEnrgLimit(t,n,blk) * ScarcityEnrgPrice(t,n,blk)
      ]
 804    ;
 805   
 806  * Defined as the net sum of generation cost + reserve cost
 807  SystemCostDefinition(t)..
 808    SYSTEMCOST(t)
 809  =e=
 810    sum[ genOfrBlk(t,o,blk)
 811       , GENERATIONBLOCK(genOfrBlk)
 812       * EnrgOfrPrice(genOfrBlk) ]
 813  + sum[ resOfrBlk(t,o,blk,resC,resT)
 814       , RESERVEBLOCK(resOfrBlk)
 815       * ResOfrPrice(resOfrBlk) ]
 816    ;
 817   
 818  * Defined as the net sum of dispatchable load benefit
 819  SystemBenefitDefinition(t)..
 820    SYSTEMBENEFIT(t)
 821  =e=
 822    sum[ demBidBlk(t,bd,blk)
 823       , PURCHASEBLOCK(demBidBlk)
 824       * DemBidPrice(demBidBlk) ]
 825    ;
 826   
 827  * Defined as the sum of the individual violation costs
 828  SystemPenaltyCostDefinition(t)..
 829    SYSTEMPENALTYCOST(t)
 830  =e=
 831    sum[ bus(t,b), deficitBusGenerationPenalty * DEFICITBUSGENERATION(bus)
 832                      + surplusBusGenerationPenalty * SURPLUSBUSGENERATION(b
      us) ]
 833   
 834  + sum[ branch(t,br), surplusBranchFlowPenalty * SURPLUSBRANCHFLOW(branch) 
      ]
 835   
 836  + sum[ offer(t,o), deficitRampRatePenalty * DEFICITRAMPRATE(offer)
 837                        + surplusRampRatePenalty * SURPLUSRAMPRATE(Offer) ]
 838   
 839  + sum[ BranchConstraint(t,brCstr)
 840       , deficitBrCstrPenalty * DEFICITBRANCHSECURITYCONSTRAINT(t,brCstr)
 841       + surplusBrCstrPenalty * SURPLUSBRANCHSECURITYCONSTRAINT(t,brCstr) ]
 842   
 843  + sum[ MNodeConstraint(t,MnodeCstr)
 844       , deficitMnodeCstrPenalty * DEFICITMNODECONSTRAINT(MNodeConstraint)
 845       + surplusMnodeCstrPenalty * SURPLUSMNODECONSTRAINT(MNodeConstraint) ]
 846   
 847  + sum[ (isl,resC)
 848         , [DeficitReservePenalty_CE  * DEFICITRESERVE_CE(t,isl,resC) ]
 849         + [DeficitReservePenalty_ECE * DEFICITRESERVE_ECE(t,isl,resC)]
 850       ]
 851   
 852  + sum[ o $ { (StudyMode(t) = 101) or (StudyMode(t) = 201) }
 853           , 0.0005 * ( GENERATIONUPDELTA(t,o) + GENERATIONDNDELTA(t,o) )
 854       ]
 855    ;
 856   
 857  * Defined as the sum of the individual violation costs (for reporting)
 858  TotalViolationCostDefinition..
 859    TOTALPENALTYCOST =e= sum[ t, SYSTEMPENALTYCOST(t) ] ;
 860   
 861  * Deined as the sume of scarcity cost
 862  TotalScarcityCostDefinition(t)..
 863    SCARCITYCOST(t)
 864  =e=
 865    sum[ (n,blk), ScarcityEnrgPrice(t,n,blk) * ENERGYSCARCITYBLK(t,n,blk) ]
 866   
 867  + sum[ (isl,resC,riskC,blk) $ HVDCrisk(riskC)
 868       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 869        * RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
 870   
 871  + sum[ (isl,resC,riskC,blk) $ ManualRisk(riskC)
 872       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 873       * RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
 874   
 875  +  sum[ (isl,o,resC,riskC,blk) $ { GenRisk(riskC)
 876                                 and islandRiskGenerator(t,isl,o) }
 877       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 878       * RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
 879   
 880  +  sum[ (isl,o,resC,riskC,blk) $ { HVDCsecRisk(riskC)
 881                                 and islandRiskGenerator(t,isl,o) }
 882       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 883       * RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
 884   
 885  +  sum[ (isl, resC,riskC,blk) $ HVDCsecRisk(riskC)
 886       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 887       * RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
 888   
 889  +  sum[ (isl,rg,resC,riskC,blk) $ GenRisk(riskC)
 890       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 891       * RESERVESHORTFALLGROUPBLK(t,isl,rg,resC,riskC,blk) ]
 892  ;
 893   
 894   
 895  *======= GENERATION AND LOAD CONSTRAINTS =================================
      ======
 896   
 897  * Calculate the MW of generation increase/decrease for RTD and RTDP (6.1.1
      .2)'
 898  GenerationChangeUpDown(t,o) $ { (StudyMode(t) = 101) or (StudyMode(t) = 20
      1) }..
 899    GENERATIONUPDELTA(t,o) - GENERATIONDNDELTA(t,o)
 900  =e=
 901    GENERATION(t,o) - generationStart(t,o);
 902   
 903  * Definition of generation provided by an offer (6.1.1.3)
 904  GenerationOfferDefintion(offer(t,o))..
 905    GENERATION(offer)
 906  =e=
 907    sum[ genOfrBlk(offer,blk), GENERATIONBLOCK(offer,blk) ]
 908    ;
 909   
 910  * Definition of discrete purchase mode (6.1.1.7)
 911  DemBidDiscrete(bid(t,bd),blk) $ { bidParameter(bid,'discrete') = 1 }..
 912    PURCHASEBLOCK(bid,blk)
 913  =e=
 914    PURCHASEBLOCKBINARY(bid,blk) * DemBidMW(bid,blk)
 915    ;
 916   
 917  * Definition of purchase provided by a bid (6.1.1.8)
 918  DemBidDefintion(bid(t,bd))..
 919    PURCHASE(bid)
 920  =e=
 921    sum[ demBidBlk(bid,blk), PURCHASEBLOCK(bid,blk) ]
 922    ;
 923   
 924  * Definition of bus energy scarcity (6.1.1.10)
 925  EnergyScarcityDefinition(t,n)..
 926    ENERGYSCARCITYNODE(t,n)
 927  =e=
 928    sum[ blk, ENERGYSCARCITYBLK(t,n,blk) ]
 929    ;
 930   
 931  *======= GENERATION AND LOAD CONSTRAINTS END =============================
      ======
 932   
 933   
 934   
 935  *======= RAMPING CONSTRAINTS =============================================
      ======
 936  * Note: The CoefficientForRampRate in SPD formulation  = intervalDuration 
      / 60
 937   
 938  * Maximum movement of the generator downwards due to up ramp rate (6.2.1.1
      )
 939  GenerationRampUp(t,o) $ { posEnrgOfr(t,o) and PrimaryOffer(t,o) }..
 940    sum[ o1 $ PrimarySecondaryOffer(t,o,o1), GENERATION(t,o1) ]
 941  + GENERATION(t,o) - DEFICITRAMPRATE(t,o)
 942  =l=
 943    generationStart(t,o) + (RampRateUp(t,o) * intervalDuration(t) / 60)
 944    ;
 945   
 946  * Maximum movement of the generator downwards due to down ramp rate (6.2.1
      .2)
 947  GenerationRampDown(t,o) $ { posEnrgOfr(t,o) and PrimaryOffer(t,o) }..
 948    sum[ o1 $ PrimarySecondaryOffer(t,o,o1), GENERATION(t,o1) ]
 949  + GENERATION(t,o) + SURPLUSRAMPRATE(t,o)
 950  =g=
 951    generationStart(t,o) - (RampRateDn(t,o) * intervalDuration(t) / 60)
 952    ;
 953   
 954  *======= RAMPING CONSTRAINTS END==========================================
      ======
 955   
 956   
 957  *======= HVDC TRANSMISSION EQUATIONS =====================================
      ======
 958   
 959  * Maximum flow on each HVDC link (6.3.1.1)
 960  HVDClinkMaximumFlow(HVDClink(t,br)) $ useHVDCbranchLimits ..
 961    HVDCLINKFLOW(HVDClink)
 962  =l=
 963    sum[ fd $ ( ord(fd)=1 ), branchCapacity(HVDClink,fd) ]
 964    ;
 965   
 966  * Definition of losses on the HVDC link (6.3.1.2)
 967  HVDClinkLossDefinition(HVDClink(t,br))..
 968    HVDCLINKLOSSES(HVDClink)
 969  =e=
 970    sum[ validLossSegment(HVDClink,bp,fd)
 971       , HVDCBreakPointMWLoss(HVDClink,bp,fd) * LAMBDA(HVDClink,bp) ]
 972    ;
 973   
 974  * Definition of MW flow on the HVDC link (6.3.1.3)
 975  HVDClinkFlowDefinition(HVDClink(t,br))..
 976    HVDCLINKFLOW(HVDClink)
 977  =e=
 978    sum[ validLossSegment(HVDClink,bp,fd)
 979    , HVDCBreakPointMWFlow(HVDClink,bp,fd) * LAMBDA(HVDClink,bp) ]
 980    ;
 981   
 982  * Definition of weighting factor (6.3.1.4)
 983  LambdaDefinition(HVDClink(t,br))..
 984    sum(validLossSegment(HVDClink,bp,fd), LAMBDA(HVDClink,bp))
 985  =e=
 986    1
 987    ;
 988   
 989   
 990  *======= HVDC TRANSMISSION EQUATIONS END =================================
      ======
 991   
 992   
 993   
 994  *======= HVDC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES ==================
      ======
 995  * HVDC transmission constraints to resolve non-physical loss and circular 
      flow
 996  * These constraints are not explicitly formulated in SPD formulation
 997  * But you can find the description in "Post-Solve Checks
 998   
 999  * Definition 1 of the integer HVDC link flow variable
1000  * HVDC_North_Flow + HVDC_South_Flow
1001  * = BEN_HAY_1_Flow + BEN_HAY_2_Flow + HAY_BEN_1_Flow + HAY_BEN_2_Flow
1002  HVDClinkFlowIntegerDefinition1(t) $ { UseBranchFlowMIP(t) and
1003                                        resolveCircularBranchFlows }..
1004    sum[ fd, HVDCLINKFLOWDIRECTED_INTEGER(t,fd) ]
1005  =e=
1006    sum[ HVDCpoleDirection(HVDClink(t,br),fd), HVDCLINKFLOW(HVDClink) ]
1007    ;
1008   
1009  * Definition 2 of the integer HVDC link flow variable
1010  * HVDC_North_Flow = BEN_HAY_1_Flow + BEN_HAY_2_Flow
1011  * HVDC_South_Flow = HAY_BEN_1_Flow + HAY_BEN_2_Flow
1012  HVDClinkFlowIntegerDefinition2(t,fd) $ { UseBranchFlowMIP(t) and
1013                                           resolveCircularBranchFlows }..
1014    HVDCLINKFLOWDIRECTED_INTEGER(t,fd)
1015  =e=
1016    sum[ HVDCpoleDirection(HVDClink(t,br),fd), HVDCLINKFLOW(HVDClink) ]
1017    ;
1018   
1019  * Definition of the integer HVDC pole flow variable for intra-pole circula
      ting branch flows
1020  * Pole1_North_Flow + Pole1_South_Flow = BEN_HAY_1_Flow + HAY_BEN_1_Flow
1021  * Pole2_North_Flow + Pole2_South_Flow = BEN_HAY_2_Flow + HAY_BEN_2_Flow
1022  HVDClinkFlowIntegerDefinition3(t,pole) $ { UseBranchFlowMIP(t) and
1023                                             resolveCircularBranchFlows }..
1024    sum[ br $ { HVDClink(t,br)
1025            and HVDCpoleBranchMap(pole,br) } , HVDCLINKFLOW(t,br) ]
1026  =e=
1027    sum[ fd, HVDCPOLEFLOW_INTEGER(t,pole,fd) ]
1028    ;
1029   
1030  * Definition of the integer HVDC pole flow variable for intra-pole circula
      ting branch flows
1031  * Pole1_North_Flow = BEN_HAY_1_Flow + HAY_BEN_1_Flow
1032  * Pole1_South_Flow = BEN_HAY_1_Flow + HAY_BEN_1_Flow
1033  * Pole2_North_Flow = BEN_HAY_2_Flow + HAY_BEN_2_Flow
1034  * Pole2_South_Flow = BEN_HAY_2_Flow + HAY_BEN_2_Flow
1035   
1036  HVDClinkFlowIntegerDefinition4(t,pole,fd) $ { UseBranchFlowMIP(t) and
1037                                                resolveCircularBranchFlows }
      ..
1038    sum[ HVDCpoleDirection(HVDClink(t,br),fd) $ HVDCpoleBranchMap(pole,br)
1039       , HVDCLINKFLOW(HVDClink) ]
1040  =e=
1041    HVDCPOLEFLOW_INTEGER(t,pole,fd)
1042    ;
1043   
1044  *======= HVDC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES END ==============
      ======
1045   
1046   
1047  *======= HVDC TRANSMISSION EQUATIONS FOR SOS2 VARIABLES ==================
      ======
1048  * Definition 1 of weighting factor when branch integer constraints are nee
      ded
1049  LambdaIntegerDefinition1(HVDClink(t,br)) $ { UseBranchFlowMIP(t) and
1050                                               resolveHVDCnonPhysicalLosses 
      }..
1051    sum[ validLossSegment(HVDClink,bp,fd), LAMBDAINTEGER(HVDClink,bp) ]
1052  =e=
1053    1
1054    ;
1055   
1056  * Definition 2 of weighting factor when branch integer constraints are nee
      ded
1057  LambdaIntegerDefinition2(HVDClink(t,br),bp)
1058    $ { UseBranchFlowMIP(t) and resolveHVDCnonPhysicalLosses
1059    and sum[ fd $ validLossSegment(HVDClink,bp,fd), 1] }..
1060    LAMBDAINTEGER(HVDClink,bp)
1061  =e=
1062    LAMBDA(HVDClink,bp)
1063    ;
1064   
1065  *======= HVDC TRANSMISSION EQUATIONS END =================================
      ======
1066   
1067   
1068   
1069   
1070  *======= AC TRANSMISSION EQUATIONS =======================================
      ======
1071   
1072  * 1st definition of the net injection at buses corresponding to AC nodes (
      6.4.1.1)
1073  ACnodeNetInjectionDefinition1(bus(t,b))..
1074    ACNODENETINJECTION(t,b)
1075  =e=
1076    sum[ ACBranchSendingBus(ACBranch(t,br),b,fd)
1077       , ACBRANCHFLOWDIRECTED(ACBranch,fd)
1078       ]
1079  - sum[ ACBranchReceivingBus(ACBranch(t,br),b,fd)
1080       , ACBRANCHFLOWDIRECTED(ACBranch,fd)
1081       ]
1082    ;
1083   
1084  * 2nd definition of the net injection at buses corresponding to AC nodes (
      6.4.1.2)
1085  ACnodeNetInjectionDefinition2(bus(t,b))..
1086    ACNODENETINJECTION(t,b)
1087  =e=
1088    sum[ offerNode(t,o,n) $ NodeBus(t,n,b)
1089       , nodeBusAllocationFactor(t,n,b) * GENERATION(t,o) ]
1090  - sum[ BidNode(t,bd,n) $ NodeBus(t,n,b)
1091       , NodeBusAllocationFactor(t,n,b) * PURCHASE(t,bd) ]
1092  - sum[ NodeBus(t,n,b)
1093       , NodeBusAllocationFactor(t,n,b) * RequiredLoad(t,n) ]
1094  + sum[ HVDClinkReceivingBus(HVDClink(t,br),b), HVDCLINKFLOW(HVDClink)   ]
1095  - sum[ HVDClinkReceivingBus(HVDClink(t,br),b), HVDCLINKLOSSES(HVDClink) ]
1096  - sum[ HVDClinkSendingBus(HVDClink(t,br),b)  , HVDCLINKFLOW(HVDClink)   ]
1097  - sum[ HVDClinkBus(HVDClink(t,br),b),   0.5 * branchFixedLoss(HVDClink) ]
1098  - sum[ ACBranchReceivingBus(ACBranch(t,br),b,fd)
1099       , branchReceivingEndLossProportion
1100       * ACBRANCHLOSSESDIRECTED(ACBranch,fd) ]
1101  - sum[ ACBranchSendingBus(ACBranch(t,br),b,fd)
1102       , (1 - branchReceivingEndLossProportion)
1103       * ACBRANCHLOSSESDIRECTED(ACBranch,fd) ]
1104  - sum[ BranchBusConnect(ACBranch(t,br),b), 0.5*branchFixedLoss(ACBranch) ]
1105  + DEFICITBUSGENERATION(t,b) - SURPLUSBUSGENERATION(t,b)
1106  * Note that we model energy scarcity as penalty instead of benefit like SP
      D
1107  * The reason for this is to avoid numerical issues.
1108  + sum[ NodeBus(t,n,b)
1109       , NodeBusAllocationFactor(t,n,b) * ENERGYSCARCITYNODE(t,n)]
1110    ;
1111   
1112  * Maximum flow on the AC branch (6.4.1.3)
1113  ACBranchMaximumFlow(ACbranch(t,br),fd) $ useACbranchLimits..
1114    ACBRANCHFLOWDIRECTED(ACBranch,fd) - SURPLUSBRANCHFLOW(ACBranch)
1115  =l=
1116    branchCapacity(ACBranch,fd)
1117    ;
1118   
1119  * Relationship between directed and undirected branch flow variables (6.4.
      1.4)
1120  ACBranchFlowDefinition(ACBranch(t,br))..
1121    ACBRANCHFLOW(ACBranch)
1122  =e=
1123    sum[ fd $ (ord(fd) = 1), ACBRANCHFLOWDIRECTED(ACBranch,fd) ]
1124  - sum[ fd $ (ord(fd) = 2), ACBRANCHFLOWDIRECTED(ACBranch,fd) ]
1125    ;
1126   
1127  * Equation that describes the linear load flow (6.4.1.5)
1128  LinearLoadFlow(ACBranch(t,br))..
1129    ACBRANCHFLOW(ACBranch)
1130  =e=
1131    branchSusceptance(ACBranch)
1132    * sum[ BranchBusDefn(ACBranch,frB,toB)
1133         , ACNODEANGLE(t,frB) - ACNODEANGLE(t,toB) ]
1134    ;
1135   
1136  * Limit on each AC branch flow block (6.4.1.6)
1137  ACBranchBlockLimit(validLossSegment(ACBranch(t,br),los,fd))..
1138    ACBRANCHFLOWBLOCKDIRECTED(ACBranch,los,fd)
1139  =l=
1140    ACBranchLossMW(ACBranch,los,fd)
1141    ;
1142   
1143  * Composition of the directed branch flow from the block branch flow (6.4.
      1.7)
1144  ACDirectedBranchFlowDefinition(ACBranch(t,br),fd)..
1145    ACBRANCHFLOWDIRECTED(ACBranch,fd)
1146  =e=
1147    sum[ validLossSegment(ACBranch,los,fd)
1148       , ACBRANCHFLOWBLOCKDIRECTED(ACBranch,los,fd) ]
1149    ;
1150   
1151  * Calculation of the losses in each loss segment (6.4.1.8) - Modified for 
      BranchcReverseRatings
1152  ACBranchLossCalculation(validLossSegment(ACBranch(t,br),los,fd))..
1153    ACBRANCHLOSSESBLOCKDIRECTED(ACBranch,los,fd)
1154  =e=
1155    ACBRANCHFLOWBLOCKDIRECTED(ACBranch,los,fd)
1156    * ACBranchLossFactor(ACBranch,los,fd)
1157    ;
1158   
1159  * Composition of the directed branch losses from the block branch losses (
      6.4.1.9)
1160  ACDirectedBranchLossDefinition(ACBranch(t,br),fd)..
1161    ACBRANCHLOSSESDIRECTED(ACBranch,fd)
1162  =e=
1163    sum[ validLossSegment(ACBranch,los,fd)
1164       , ACBRANCHLOSSESBLOCKDIRECTED(ACBranch,los,fd) ]
1165    ;
1166   
1167  *======= AC TRANSMISSION EQUATIONS END ===================================
      ======
1168   
1169   
1170   
1171  *======= AC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES ====================
      ======
1172  * AC transmission constraints to resolve circular flow
1173  * These constraints are not explicitly formulated in SPD formulation
1174  * But you can find the description in "Post-Solve Checks"
1175   
1176  * Integer constraint to enforce a flow direction on loss AC branches in th
      e
1177  * presence of circular branch flows or non-physical losses
1178  ACDirectedBranchFlowIntegerDefinition1(ACBranch(lossBranch(t,br)))
1179    $ { UseBranchFlowMIP(t) and resolveCircularBranchFlows }..
1180    sum[ fd, ACBRANCHFLOWDIRECTED_INTEGER(ACBranch,fd) ]
1181  =e=
1182    sum[ fd, ACBRANCHFLOWDIRECTED(ACBranch,fd) ]
1183    ;
1184   
1185  * Integer constraint to enforce a flow direction on loss AC branches in th
      e
1186  * presence of circular branch flows or non-physical losses
1187  ACDirectedBranchFlowIntegerDefinition2(ACBranch(lossBranch(t,br)),fd)
1188    $ { UseBranchFlowMIP(t) and resolveCircularBranchFlows }..
1189    ACBRANCHFLOWDIRECTED_INTEGER(ACBranch,fd)
1190  =e=
1191    ACBRANCHFLOWDIRECTED(ACBranch,fd)
1192    ;
1193   
1194  *======= AC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES END ================
      ======
1195   
1196   
1197   
1198  *======= RISK EQUATIONS ==================================================
      ======
1199   
1200  * 6.5.1.1 : Calculation of the risk offset variable for the DCCE risk clas
      s.
1201  RiskOffsetCalculation_DCCE(t,isl,resC,riskC)
1202    $ { HVDCrisk(riskC) and ContingentEvents(riskC)  }..
1203    RISKOFFSET(t,isl,resC,riskC)
1204  =e=
1205    FreeReserve(t,isl,resC,riskC) + HVDCPoleRampUp(t,isl,resC,riskC)
1206    ;
1207   
1208  * 6.5.1.3 : Calculation of the risk offset variable for the DCECE risk cla
      ss.
1209  RiskOffsetCalculation_DCECE(t,isl,resC,riskC)
1210    $ { HVDCrisk(riskC) and ExtendedContingentEvent(riskC) }..
1211    RISKOFFSET(t,isl,resC,riskC)
1212  =e=
1213    FreeReserve(t,isl,resC,riskC)
1214    ;
1215   
1216  * 6.5.1.4 : Calculation of the net received HVDC MW flow into an island.
1217  HVDCRecCalculation(t,isl)..
1218    HVDCREC(t,isl)
1219  =e=
1220    sum[ (b,br) $ { BusIsland(t,b,isl)
1221                and HVDClinkSendingBus(t,br,b)
1222                and HVDCLink(t,br)
1223                  }, -HVDCLINKFLOW(t,br)
1224       ]
1225  + sum[ (b,br) $ { BusIsland(t,b,isl)
1226                and HVDClinkReceivingBus(t,br,b)
1227                and HVDCLink(t,br)
1228                  }, HVDCLINKFLOW(t,br) - HVDCLINKLOSSES(t,br)
1229       ]
1230    ;
1231   
1232  * 6.5.1.5 : Calculation of the island risk for a DCCE and DCECE.
1233  HVDCIslandRiskCalculation(t,isl,resC,HVDCrisk)..
1234    ISLANDRISK(t,isl,resC,HVDCrisk)
1235  =e=
1236    IslandRiskAdjustmentFactor(t,isl,resC,HVDCrisk)
1237    * [ HVDCREC(t,isl)
1238      - RISKOFFSET(t,isl,resC,HVDCrisk)
1239      + modulationRiskClass(t,HVDCrisk)
1240      ]
1241  * Scarcity reserve (only applied for CE risk)
1242    - RESERVESHORTFALL(t,isl,resC,HVDCrisk) $ ContingentEvents(HVDCrisk)
1243    ;
1244   
1245  * 6.5.1.6 : Calculation of the risk of risk setting generators
1246  GenIslandRiskCalculation_1(t,isl,o,resC,GenRisk)
1247    $ islandRiskGenerator(t,isl,o) ..
1248    GENISLANDRISK(t,isl,o,resC,GenRisk)
1249  =e=
1250    IslandRiskAdjustmentFactor(t,isl,resC,GenRisk)
1251    * [ GENERATION(t,o)
1252      - FreeReserve(t,isl,resC,GenRisk)
1253      + FKBand(t,o)
1254      + sum[ resT, RESERVE(t,o,resC,resT) ]
1255      + sum[ o1 $ PrimarySecondaryOffer(t,o,o1)
1256           , sum[ resT, RESERVE(t,o1,resC,resT) ] + GENERATION(t,o1) ]
1257      ]
1258  * NMIR update
1259  - RESERVESHAREEFFECTIVE(t,isl,resC,GenRisk)$reserveShareEnabled(t,resC)
1260  * Scarcity reserve (only applied for CE risk)
1261  - RESERVESHORTFALLUNIT(t,isl,o,resC,GenRisk) $ ContingentEvents(GenRisk)
1262    ;
1263   
1264  * 6.5.1.6 : Calculation of the island risk for risk setting generators
1265  GenIslandRiskCalculation(t,isl,o,resC,GenRisk)
1266    $ islandRiskGenerator(t,isl,o) ..
1267    ISLANDRISK(t,isl,resC,GenRisk)
1268  =g=
1269    GENISLANDRISK(t,isl,o,resC,GenRisk) ;
1270   
1271  * 6.5.1.7 : Calculation of the island risk based on manual specifications
1272  ManualIslandRiskCalculation(t,isl,resC,ManualRisk)..
1273    ISLANDRISK(t,isl,resC,ManualRisk)
1274  =e=
1275    IslandRiskAdjustmentFactor(t,isl,resC,ManualRisk)
1276    * [ IslandMinimumRisk(t,isl,resC,ManualRisk)
1277      - FreeReserve(t,isl,resC,ManualRisk)
1278      ]
1279  * NMIR update
1280  - RESERVESHAREEFFECTIVE(t,isl,resC,ManualRisk)$reserveShareEnabled(t,resC)
1281  * Scarcity reserve (only applied for CE risk)
1282  - RESERVESHORTFALL(t,isl,resC,ManualRisk) $ ContingentEvents(ManualRisk)
1283    ;
1284   
1285  * 6.5.1.8: Define a flag to show if HVDC sending zero MW flow from an isla
      nd
1286  HVDCSendMustZeroBinaryDefinition(t,isl).. HVDCSENT(t,isl) =l= BigM * [ 1 -
       HVDCSENDZERO(t,isl) ] ;
1287   
1288   
1289  * 6.5.1.9 : Calculation of the island risk for an HVDC secondary generatio
      n risk
1290  * HVDC secondary risk includes HVDC risk and Generation of both primary an
      d secondary generation unit + cleared reserve + the FKBand for generator p
      rimary risk
1291  HVDCIslandSecRiskCalculation_GEN_1(t,isl,o,resC,HVDCSecRisk)
1292    $ { islandRiskGenerator(t,isl,o)  and
1293        HVDCSecRiskEnabled(t,isl,HVDCSecRisk) }..
1294    HVDCGENISLANDRISK(t,isl,o,resC,HVDCSecRisk)
1295  =e=
1296    IslandRiskAdjustmentFactor(t,isl,resC,HVDCSecRisk)
1297    * [ GENERATION(t,o)
1298      - FreeReserve(t,isl,resC,HVDCSecRisk)
1299      + HVDCREC(t,isl)
1300      - HVDCSecRiskSubtractor(t,isl)
1301      + FKBand(t,o)
1302      + sum[ resT, RESERVE(t,o,resC,resT) ]
1303      + sum[ o1 $ PrimarySecondaryOffer(t,o,o1)
1304           , sum[ resT, RESERVE(t,o1,resC,resT) ] + GENERATION(t,o1) ]
1305      + modulationRiskClass(t,HVDCSecRisk)
1306      ]
1307  * Scarcity reserve (only applied for CE risk)
1308    - RESERVESHORTFALLUNIT(t,isl,o,resC,HVDCSecRisk) $ ContingentEvents(HVDC
      SecRisk)
1309  * HVDC secondary risk not applied if HVDC sent is zero
1310    - BigM * sum[ isl1 $ (not sameas(isl1,isl)), HVDCSENDZERO(t,isl) ]
1311    ;
1312   
1313  * 6.5.1.9 : Calculation of the island risk for an HVDC secondary generatio
      n risk
1314  HVDCIslandSecRiskCalculation_GEN(t,isl,o,resC,HVDCSecRisk)
1315    $ { islandRiskGenerator(t,isl,o)  and
1316        HVDCSecRiskEnabled(t,isl,HVDCSecRisk) }..
1317    ISLANDRISK(t,isl,resC,HVDCSecRisk)
1318  =g=
1319    HVDCGENISLANDRISK(t,isl,o,resC,HVDCSecRisk)
1320    ;
1321   
1322  * 6.5.1.10: Calculation of the island risk for an HVDC secondary manual ri
      sk
1323  HVDCIslandSecRiskCalculation_Manu_1(t,isl,resC,HVDCSecRisk)
1324    $ HVDCSecRiskEnabled(t,isl,HVDCSecRisk)..
1325    HVDCMANISLANDRISK(t,isl,resC,HVDCSecRisk)
1326  =e=
1327    IslandRiskAdjustmentFactor(t,isl,resC,HVDCSecRisk)
1328    * [ IslandMinimumRisk(t,isl,resC,HVDCSecRisk)
1329      - FreeReserve(t,isl,resC,HVDCSecRisk)
1330      + HVDCREC(t,isl)
1331      - HVDCSecRiskSubtractor(t,isl)
1332      + modulationRiskClass(t,HVDCSecRisk)
1333      ]
1334  * Scarcity reserve (only applied for CE risk)
1335    - RESERVESHORTFALL(t,isl,resC,HVDCSecRisk) $ ContingentEvents(HVDCSecRis
      k)
1336  * HVDC secondary risk not applied if HVDC sent is zero
1337    - BigM * sum[ isl1 $ (not sameas(isl1,isl)), HVDCSENDZERO(t,isl) ]
1338    ;
1339   
1340  * 6.5.1.10: Calculation of the island risk for an HVDC secondary manual ri
      sk
1341  HVDCIslandSecRiskCalculation_Manual(t,isl,resC,HVDCSecRisk)
1342    $ HVDCSecRiskEnabled(t,isl,HVDCSecRisk)..
1343    ISLANDRISK(t,isl,resC,HVDCSecRisk)
1344  =g=
1345    HVDCMANISLANDRISK(t,isl,resC,HVDCSecRisk)
1346    ;
1347   
1348  * 6.5.1.11: Calculation of the risk of risk group
1349  GenIslandRiskGroupCalculation_1(t,isl,rg,resC,GenRisk)
1350    $ islandRiskGroup(t,isl,rg,GenRisk)..
1351    GENISLANDRISKGROUP(t,isl,rg,resC,GenRisk)
1352  =e=
1353    IslandRiskAdjustmentFactor(t,isl,resC,GenRisk)
1354    * [ sum[ o $ { offerIsland(t,o,isl)
1355               and riskGroupOffer(t,rg,o,GenRisk)
1356                 } , GENERATION(t,o) + FKBand(t,o)
1357                   + sum[ resT, RESERVE(t,o,resC,resT) ]
1358           ]
1359      - FreeReserve(t,isl,resC,GenRisk)
1360      ]
1361  * NMIR update
1362  - RESERVESHAREEFFECTIVE(t,isl,resC,GenRisk)$reserveShareEnabled(t,resC)
1363  * Scarcity reserve (only applied for CE risk)
1364  - RESERVESHORTFALLGROUP(t,isl,rg,resC,GenRisk) $ ContingentEvents(GenRisk)
1365    ;
1366   
1367  * 6.5.1.11: Calculation of the island risk for risk group
1368  GenIslandRiskGroupCalculation(t,isl,rg,resC,GenRisk)
1369    $ islandRiskGroup(t,isl,rg,GenRisk)..
1370    ISLANDRISK(t,isl,resC,GenRisk)
1371  =g=
1372    GENISLANDRISKGROUP(t,isl,rg,resC,GenRisk)
1373    ;
1374   
1375  *======= RISK EQUATIONS END ==============================================
      ======
1376   
1377   
1378  *======= NMIR - RESERVE SHARING EQUATIONS ================================
      ======
1379   
1380  * General NMIR equations start -------------------------------------------
      ------
1381   
1382  * Calculation of effective shared reserve - (6.5.2.1)
1383  EffectiveReserveShareCalculation(t,isl,resC,riskC)
1384    $ { reserveShareEnabled(t,resC)
1385    and ( GenRisk(riskC) or ManualRisk(riskC) ) }..
1386    RESERVESHAREEFFECTIVE(t,isl,resC,riskC)
1387  =l=
1388    Sum[ rd , RESERVESHARERECEIVED(t,isl,resC,rd)
1389            * effectiveFactor(t,isl,resC,riskC) ]
1390    ;
1391   
1392  * Shared offered reserve is limited by cleared reserved - (6.5.2.2)
1393  SharedReserveLimitByClearedReserve(t,isl,resC)
1394    $ reserveShareEnabled(t,resC)..
1395    SHAREDRESERVE(t,isl,resC)
1396  =l=
1397    ISLANDRESERVE(t,isl,resC)
1398    ;
1399   
1400  * Both cleared reserved and shareable free reserve can be shared - (6.5.2.
      4)
1401  BothClearedAndFreeReserveCanBeShared(t,isl,resC,rd)
1402    $ reserveShareEnabled(t,resC)..
1403    RESERVESHARESENT(t,isl,resC,rd)
1404  =l=
1405    SHAREDRESERVE(t,isl,resC) + SHAREDNFR(t,isl)$(ord(resC)=1)
1406    ;
1407   
1408  * Reserve share sent is limited by HVDC control band - (6.5.2.5)
1409  ReserveShareSentLimitByHVDCControlBand(t,isl,resC,rd)
1410    $ reserveShareEnabled(t,resC)..
1411    RESERVESHARESENT(t,isl,resC,rd)
1412  =l=
1413    [ HVDCControlBand(t,rd) - modulationRisk(t)
1414    ] $ (HVDCControlBand(t,rd) > modulationRisk(t))
1415    ;
1416   
1417  * Forward reserve share sent is limited by HVDC capacity - (6.5.2.6)
1418  FwdReserveShareSentLimitByHVDCCapacity(t,isl,resC,rd)
1419    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1420    RESERVESHARESENT(t,isl,resC,rd)
1421  + HVDCSENT(t,isl)
1422  =l=
1423    [ HVDCMax(t,isl) - modulationRisk(t) ] $ (HVDCMax(t,isl) > modulationRis
      k(t))
1424  ;
1425   
1426  * Reverse shared reserve is only possible for receiving island - (6.5.2.7)
1427  ReverseReserveOnlyToEnergySendingIsland(t,isl,resC,rd)
1428    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1429    RESERVESHARESENT(t,isl,resC,rd)
1430  =l=
1431    BigM * [ 1 - HVDCSENDING(t,isl) ]
1432    ;
1433   
1434  * Reverse shared reserve recieved at an island is limited by HVDC control 
      band - (6.5.2.8)
1435  ReverseReserveShareLimitByHVDCControlBand(t,isl,resC,rd)
1436    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1437    RESERVESHARERECEIVED(t,isl,resC,rd)
1438  =l=
1439    HVDCSENDING(t,isl) * [ HVDCControlBand(t,rd) - modulationRisk(t)
1440                         ] $ ( HVDCControlBand(t,rd) > modulationRisk(t) )
1441    ;
1442   
1443  * Forward received shared reserve only possible for receiving island - (3.
      4.2.9)
1444  ForwardReserveOnlyToEnergyReceivingIsland(t,isl,resC,rd)
1445    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1446    RESERVESHARERECEIVED(t,isl,resC,rd)
1447  =l=
1448    BigM * [ 1 - HVDCSENDING(t,isl) ]
1449    ;
1450   
1451  * Reverse shared reserve limit if HVDC sent flow in reverse zone - (6.5.2.
      10)
1452  ReverseReserveLimitInReserveZone(t,isl,resC,rd,z)
1453    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) and (ord(z) = 3) }..
1454    RESERVESHARERECEIVED(t,isl,resC,rd)
1455  =l=
1456    HVDCSENT(t,isl)
1457  - (MonopoleMinimum(t) + modulationRisk(t))
1458  + BigM * [ 1 - INZONE(t,isl,resC,z) ]
1459    ;
1460   
1461  * No reverse shared reserve if HVDC sent flow in no reverse zone &
1462  * No forward reserve if HVDC sent flow in no reverse zone and RP disabled
1463  * (6.5.2.11) & (6.5.2.18)
1464  ZeroReserveInNoReserveZone(t,isl,resC,z)
1465    $ { reserveShareEnabled(t,resC) and (ord(z) = 2) }..
1466    Sum[ rd $ (ord(rd) = 2), RESERVESHARERECEIVED(t,isl,resC,rd) ]
1467  + Sum[ rd $ (ord(rd) = 1), RESERVESHARESENT(t,isl,resC,rd)
1468       ] $ {reserveRoundPower(t,resC) = 0}
1469  =l=
1470    BigM * [ 1 - INZONE(t,isl,resC,z) ]
1471    ;
1472   
1473  * Across both island, only one zone is active for each reserve class -(6.5
      .2.12)
1474  OnlyOneActiveHVDCZoneForEachReserveClass(t,resC) $ reserveShareEnabled(t,r
      esC)..
1475    Sum[ (isl,z), INZONE(t,isl,resC,z) ] =e= 1 ;
1476   
1477  * HVDC sent from sending island only - (6.5.2.13)
1478  ZeroSentHVDCFlowForNonSendingIsland(t,isl) $ reserveShareEnabledOverall(t)
      ..
1479    HVDCSENT(t,isl) =l= BigM * HVDCSENDING(t,isl) ;
1480   
1481  * HVDC sent from an island <= RoundPowerZoneExit level if in round power z
      one
1482  * of that island - (6.5.2.14)
1483  RoundPowerZoneSentHVDCUpperLimit(t,isl,resC,z)
1484    $ { reserveShareEnabled(t,resC) and (ord(z) = 1) }..
1485    HVDCSENT(t,isl)
1486  =l=
1487    roPwrZoneExit(t,resC) + BigM * [ 1 - INZONE(t,isl,resC,z) ]
1488  ;
1489   
1490  * An island is HVDC sending island if HVDC flow sent is in one of the thre
      e
1491  * zones for each reserve class - (6.5.2.15)
1492  HVDCSendingIslandDefinition(t,isl,resC) $ reserveShareEnabled(t,resC)..
1493    HVDCSENDING(t,isl) =e= Sum[ z, INZONE(t,isl,resC,z) ] ;
1494   
1495  * One and only one island is HVDC sending island - (6.5.2.19)
1496  OnlyOneSendingIslandExists(t) $ reserveShareEnabledOverall(t)..
1497   Sum[ isl, HVDCSENDING(t,isl) ] =e= 1 ;
1498   
1499  * Total HVDC sent from each island - (6.5.2.20)
1500  HVDCSentCalculation(t,isl) $ reserveShareEnabledOverall(t)..
1501    HVDCSENT(t,isl)
1502  =e=
1503    Sum[ (b,br) $ { BusIsland(t,b,isl)
1504                and HVDClinkSendingBus(t,br,b)
1505                and HVDClink(t,br)
1506                  }, HVDCLINKFLOW(t,br)
1507       ]
1508  ;
1509   
1510  * General NMIR equations end ---------------------------------------------
      ------
1511   
1512   
1513  * Lamda loss model -------------------------------------------------------
      ------
1514   
1515  * HVDC flow + forward reserve sent from an island - (6.5.2.21)
1516  HVDCFlowAccountedForForwardReserve(t,isl,resC,rd)
1517    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1518    HVDCRESERVESENT(t,isl,resC,rd)
1519  =e=
1520    RESERVESHARESENT(t,isl,resC,rd) + HVDCSENT(t,isl)
1521    ;
1522   
1523  * Received forward shared reserve at an HVDC receiving island - (6.5.2.22)
1524  ForwardReserveReceivedAtHVDCReceivingIsland(t,isl,resC,rd)
1525    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1526    RESERVESHARERECEIVED(t,isl,resC,rd)
1527  =e=
1528    Sum[ isl1 $ (not sameas(isl1,isl))
1529        , RESERVESHARESENT(t,isl1,resC,rd)
1530        - HVDCRESERVELOSS(t,isl1,resC,rd)
1531        + HVDCSENTLOSS(t,isl1) ]
1532    ;
1533   
1534  * HVDC flow - received reverse reserve sent from an island - (6.5.2.23)
1535  HVDCFlowAccountedForReverseReserve(t,isl,resC,rd)
1536    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1537    HVDCRESERVESENT(t,isl,resC,rd)
1538  =e=
1539    HVDCSENT(t,isl) - RESERVESHARERECEIVED(t,isl,resC,rd)
1540    ;
1541   
1542  * Reverse reserve RECEIVED at an HVDC sending island - (6.5.2.24)
1543  ReverseReserveReceivedAtHVDCSendingIsland(t,isl,resC,rd)
1544    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1545    RESERVESHARERECEIVED(t,isl,resC,rd)
1546  =e=
1547    Sum[ isl1 $ (not sameas(isl1,isl)), RESERVESHARESENT(t,isl1,resC,rd) ]
1548  - HVDCRESERVELOSS(t,isl,resC,rd)
1549  + HVDCSENTLOSS(t,isl)
1550    ;
1551   
1552  * Total weight factor = 1 for HVDC energy sent from an island - (6.5.2.25)
1553  HVDCSentEnergyLambdaDefinition(t,isl) $ reserveShareEnabledOverall(t)..
1554    Sum[ bp $ (ord(bp) <= 7),LAMBDAHVDCENERGY(t,isl,bp) ] =e= 1 ;
1555   
1556  * Lambda definition of total HVDC energy flow sent from an island
1557  * (6.5.2.26) - SPD version 11.0
1558  HVDCSentEnergyFlowDefinition(t,isl) $ reserveShareEnabledOverall(t)..
1559    HVDCSENT(t,isl)
1560  =e=
1561    Sum[ bp $ (ord(bp) <= 7), HVDCSentBreakPointMWFlow(t,isl,bp)
1562                            * LAMBDAHVDCENERGY(t,isl,bp) ]
1563    ;
1564   
1565  * Lambda definition of total loss of HVDC energy sent from an island
1566  * (6.5.2.27) - SPD version 11.0
1567  HVDCSentEnergyLossesDefinition(t,isl) $ reserveShareEnabledOverall(t)..
1568    HVDCSENTLOSS(t,isl)
1569  =e=
1570    Sum[ bp $ (ord(bp) <= 7), HVDCSentBreakPointMWLoss(t,isl,bp)
1571                            * LAMBDAHVDCENERGY(t,isl,bp) ]
1572    ;
1573   
1574  * Total weight factor = 1 for HVDC+reserve sent from an island -(6.5.2.28)
1575  HVDCSentReserveLambdaDefinition(t,isl,resC,rd) $ reserveShareEnabled(t,res
      C)..
1576    Sum[ rsbp, LAMBDAHVDCRESERVE(t,isl,resC,rd,rsbp) ] =e= 1 ;
1577   
1578  * Lambda definition of Reserse + Energy flow on HVDC sent from an island
1579  * (3.4.2.29) - SPD version 11.0
1580  HVDCSentReserveFlowDefinition(t,isl,resC,rd)
1581    $ reserveShareEnabled(t,resC)..
1582    HVDCRESERVESENT(t,isl,resC,rd)
1583  =e=
1584    Sum[ rsbp, HVDCReserveBreakPointMWFlow(t,isl,rsbp)
1585             * LAMBDAHVDCRESERVE(t,isl,resC,rd,rsbp) ]
1586    ;
1587   
1588  * Lambda definition of Reserse + Energy Loss on HVDC sent from an island
1589  * (3.4.2.30) - SPD version 11.0
1590  HVDCSentReserveLossesDefinition(t,isl,resC,rd)
1591    $ reserveShareEnabled(t,resC)..
1592    HVDCRESERVELOSS(t,isl,resC,rd)
1593  =e=
1594    Sum[ rsbp, HVDCReserveBreakPointMWLoss(t,isl,rsbp)
1595             * LAMBDAHVDCRESERVE(t,isl,resC,rd,rsbp) ]
1596    ;
1597   
1598  * Lamda loss model end ---------------------------------------------------
      ------
1599   
1600   
1601  * Calculate Reserve sharing excess penalty -------------------------------
      ------
1602   
1603  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation
1604  * Calculate max effective shared reserve for CE risk received at island (6
      .5.2.31)
1605  ReserveShareEffective_CE_Calculation(t,isl,resC,riskC)
1606    $ { reserveShareEnabled(t,resC) and ContingentEvents(riskC)
1607    and ( GenRisk(riskC) or ManualRisk(riskC) ) }..
1608    RESERVESHAREEFFECTIVE_CE(t,isl,resC)
1609  =g=
1610    RESERVESHAREEFFECTIVE(t,isl,resC,riskC)
1611    ;
1612   
1613  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation
1614  * Calculate max effective shared reserve for CE risk received at island (6
      .5.2.31)
1615  ReserveShareEffective_ECE_Calculation(t,isl,resC,riskC)
1616    $ { reserveShareEnabled(t,resC) and ExtendedContingentEvent(riskC)
1617    and ( GenRisk(riskC) or ManualRisk(riskC) ) }..
1618    RESERVESHAREEFFECTIVE_ECE(t,isl,resC)
1619  =g=
1620    RESERVESHAREEFFECTIVE(t,isl,resC,riskC)
1621    ;
1622   
1623  * Constraint to avoid excessive reserve share (6.5.2.31)
1624  ExcessReserveSharePenalty(t) $ reserveShareEnabledOverall(t)..
1625    RESERVESHAREPENALTY(t)
1626  =e=
1627    sum[ isl, 1e-5 * SHAREDNFR(t,isl) ]
1628  + sum[ (isl,resC), 2e-5 * SHAREDRESERVE(t,isl,resC) ]
1629  * Tuong Nguyen modified on 24 Feb 2021 to correct the calculation
1630  *+ sum[ (isl,resC,riskC), 3e-5 * RESERVESHAREEFFECTIVE(t,isl,resC,riskC)]
1631  + sum[ (isl,resC), 3e-5 * RESERVESHAREEFFECTIVE_CE(t,isl,resC)]
1632  + sum[ (isl,resC), 3e-5 * RESERVESHAREEFFECTIVE_ECE(t,isl,resC)]
1633  ;
1634  * Calculate Reserve sharing excess penalty end ---------------------------
      ------
1635   
1636  *======= NMIR - RESERVE SHARING EQUATIONS END ============================
      ======
1637   
1638   
1639   
1640  *======= RESERVE EQUATIONS ===============================================
      ======
1641  * 6.5.3.1: Maximum PLSR as a proportion of the block MW
1642  PLSRReserveProportionMaximum(offer(t,o),blk,resC,PLRO)
1643    $ resOfrBlk(offer,blk,resC,PLRO)..
1644    RESERVEBLOCK(Offer,blk,resC,PLRO)
1645  =l=
1646    ResOfrPct(Offer,blk,resC) * GENERATION(Offer)
1647    ;
1648   
1649  * 6.5.3.3: Cleared IL reserve is constrained by cleared dispatchable deman
      d'
1650  ReserveInterruptibleOfferLimit(t,o,bd,resC,ILRO(resT))
1651    $ { sameas(o,bd) and offer(t,o) and bid(t,bd) and (sum[blk,DemBidMW(t,bd
      ,blk)] >= 0) } ..
1652    RESERVE(t,o,resC,resT)
1653  =l=
1654    PURCHASE(t,bd);
1655   
1656   
1657  * 6.5.3.4 Definition of the reserve offers of different classes and types
1658  ReserveOfferDefinition(offer(t,o),resC,resT)..
1659    RESERVE(offer,resC,resT)
1660  =e=
1661    sum[ blk, RESERVEBLOCK(offer,blk,resC,resT) ]
1662    ;
1663   
1664  * 6.5.3.5 Definition of maximum energy and reserves from each generator
1665  EnergyAndReserveMaximum(offer(t,o),resC)..
1666    GENERATION(offer)
1667  + reserveMaximumFactor(offer,resC)
1668    * sum[ resT $ (not ILRO(resT)), RESERVE(offer,resC,resT) ]
1669  =l=
1670    ReserveGenerationMaximum(offer)
1671    ;
1672   
1673  *======= RESERVE EQUATIONS END ===========================================
      ======
1674   
1675   
1676   
1677  *======= RESERVE SCARCITY ================================================
      ======
1678  * 6.5.4.2: Total Reserve Shortfall for DCCE risk
1679  HVDCRiskReserveShortFallCalculation(t,isl,resC,HVDCrisk(RiskC))
1680    $ ContingentEvents(riskC)..
1681    RESERVESHORTFALL(t,isl,resC,riskC)
1682  =e=
1683    sum[ blk, RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
1684    ;
1685   
1686  * 6.5.4.2: Total Reserve Shortfall for Manual risk
1687  ManualRiskReserveShortFallCalculation(t,isl,resC,ManualRisk(RiskC))
1688    $ ContingentEvents(riskC)..
1689    RESERVESHORTFALL(t,isl,resC,riskC)
1690  =e=
1691    sum[ blk, RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
1692    ;
1693   
1694  * 6.5.4.2: Total Reserve Shortfall for generation risk unit
1695  GenRiskReserveShortFallCalculation(t,isl,o,resC,GenRisk(RiskC))
1696    $ { ContingentEvents(riskC) and  islandRiskGenerator(t,isl,o)  }..
1697    RESERVESHORTFALLUNIT(t,isl,o,resC,riskC)
1698  =e=
1699    sum[ blk, RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
1700    ;
1701   
1702  * 6.5.4.2: Total Reserve Shortfall for generation unit + HVDC risk
1703  HVDCsecRiskReserveShortFallCalculation(t,isl,o,resC,HVDCsecRisk(RiskC))
1704    $ { ContingentEvents(riskC) and  islandRiskGenerator(t,isl,o)  }..
1705    RESERVESHORTFALLUNIT(t,isl,o,resC,riskC)
1706  =e=
1707    sum[ blk, RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
1708    ;
1709   
1710  * 6.5.4.2: Total Reserve Shortfall for Manual risk + HVDC risk
1711  HVDCsecManualRiskReserveShortFallCalculation(t,isl,resC,HVDCsecRisk(RiskC)
      )
1712    $ ContingentEvents(riskC)..
1713    RESERVESHORTFALL(t,isl,resC,riskC)
1714  =e=
1715    sum[ blk, RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
1716    ;
1717   
1718  * 6.5.4.2: Total Reserve Shortfall for risk group
1719  RiskGroupReserveShortFallCalculation(t,isl,rg,resC,GenRisk(RiskC))
1720    $ { ContingentEvents(riskC) and islandRiskGroup(t,isl,rg,RiskC)}..
1721    RESERVESHORTFALLGROUP(t,isl,rg,resC,riskC)
1722  =e=
1723    sum[ blk, RESERVESHORTFALLGROUPBLK(t,isl,rg,resC,riskC,blk) ]
1724    ;
1725   
1726  *======= RESERVE SCARCITY END ============================================
      ======
1727   
1728   
1729   
1730  *======= RISK AND RESERVE BALANCE EQUATIONS ==============================
      ======
1731   
1732  * 6.5.5.1: Calculate total island cleared reserve
1733  IslandReserveCalculation(t,isl,resC)..
1734    ISLANDRESERVE(t,isl,resC)
1735  =l=
1736    Sum[ (o,resT) $ { offer(t,o) and offerIsland(t,o,isl) }
1737                  , RESERVE(t,o,resC,resT)
1738       ]
1739    ;
1740   
1741  * 6.5.5.2 & 6.5.5.3: Matching of reserve supply and demand
1742  SupplyDemandReserveRequirement(t,isl,resC,riskC) $ useReserveModel..
1743    ISLANDRISK(t,isl,resC,riskC)
1744  - DEFICITRESERVE_CE(t,isl,resC)   $ ContingentEvents(riskC)
1745  - DEFICITRESERVE_ECE(t,isl,resC)  $ ExtendedContingentEvent(riskC)
1746  =l=
1747    ISLANDRESERVE(t,isl,resC)
1748    ;
1749   
1750  *======= RISK AND RESERVE BALANCE EQUATIONS END ==========================
      ======
1751   
1752   
1753   
1754  *======= SECURITY EQUATIONS ==============================================
      ======
1755   
1756  * 6.6.1.5 Branch security constraint with LE sense
1757  BranchSecurityConstraintLE(t,brCstr)
1758    $ (BranchConstraintSense(t,brCstr) = -1)..
1759    sum[ br $ ACbranch(t,br)
1760       , branchCstrFactors(t,brCstr,br) * ACBRANCHFLOW(t,br) ]
1761  + sum[ br $ HVDClink(t,br)
1762       , branchCstrFactors(t,brCstr,br) * HVDCLINKFLOW(t,br) ]
1763  - SURPLUSBRANCHSECURITYCONSTRAINT(t,brCstr)
1764  =l=
1765    BranchConstraintLimit(t,brCstr)
1766    ;
1767   
1768  * 6.6.1.5 Branch security constraint with GE sense
1769  BranchSecurityConstraintGE(t,brCstr)
1770    $ (BranchConstraintSense(t,brCstr) = 1)..
1771    sum[ br $ ACbranch(t,br)
1772       , branchCstrFactors(t,brCstr,br) * ACBRANCHFLOW(t,br) ]
1773  + sum[ br $ HVDClink(t,br)
1774       , branchCstrFactors(t,brCstr,br) * HVDCLINKFLOW(t,br) ]
1775  + DEFICITBRANCHSECURITYCONSTRAINT(t,brCstr)
1776  =g=
1777    BranchConstraintLimit(t,brCstr)
1778    ;
1779   
1780  * 6.6.1.5 Branch security constraint with EQ sense
1781  BranchSecurityConstraintEQ(t,brCstr)
1782    $ (BranchConstraintSense(t,brCstr) = 0)..
1783    sum[ br $ ACbranch(t,br)
1784       , branchCstrFactors(t,brCstr,br) * ACBRANCHFLOW(t,br) ]
1785  + sum[ br $ HVDClink(t,br)
1786       , branchCstrFactors(t,brCstr,br) * HVDCLINKFLOW(t,br) ]
1787  + DEFICITBRANCHSECURITYCONSTRAINT(t,brCstr)
1788  - SURPLUSBRANCHSECURITYCONSTRAINT(t,brCstr)
1789  =e=
1790    BranchConstraintLimit(t,brCstr)
1791    ;
1792   
1793   
1794   
1795  * Market node security constraint with LE sense (3.5.1.7a)
1796  MNodeSecurityConstraintLE(t,MnodeCstr)
1797    $ (MNodeConstraintSense(t,MnodeCstr) = -1)..
1798    sum[ o $ posEnrgOfr(t,o)
1799         , MNCstrEnrgFactors(t,MnodeCstr,o)
1800         * GENERATION(t,o)
1801       ]
1802  + sum[ (o,resC,resT) $ offer(t,o)
1803         , MNCnstrResrvFactors(t,MnodeCstr,o,resC,resT)
1804         * RESERVE(t,o,resC,resT)
1805       ]
1806  + sum[ bd $ Bid(t,bd)
1807         , mnCnstrEnrgBidFactors(t,MnodeCstr,bd)
1808         * PURCHASE(t,bd)
1809       ]
1810  - SURPLUSMNODECONSTRAINT(t,MnodeCstr)
1811  =l=
1812    MNodeConstraintLimit(t,MnodeCstr)
1813    ;
1814   
1815  * Market node security constraint with GE sense (3.5.1.7b)
1816  MNodeSecurityConstraintGE(t,MnodeCstr)
1817    $ (MNodeConstraintSense(t,MnodeCstr) = 1)..
1818    sum[ o $ posEnrgOfr(t,o)
1819         , MNCstrEnrgFactors(t,MnodeCstr,o)
1820         * GENERATION(t,o)
1821       ]
1822  + sum[ (o,resC,resT) $ offer(t,o)
1823         , MNCnstrResrvFactors(t,MnodeCstr,o,resC,resT)
1824         * RESERVE(t,o,resC,resT)
1825       ]
1826  + sum[ bd $ Bid(t,bd)
1827         , mnCnstrEnrgBidFactors(t,MnodeCstr,bd)
1828         * PURCHASE(t,bd)
1829       ]
1830  + DEFICITMNODECONSTRAINT(t,MnodeCstr)
1831  =g=
1832    MNodeConstraintLimit(t,MnodeCstr)
1833    ;
1834   
1835  * Market node security constraint with EQ sense (3.5.1.7c)
1836  MNodeSecurityConstraintEQ(t,MnodeCstr)
1837    $ (MNodeConstraintSense(t,MnodeCstr) = 0)..
1838    sum[ o $ posEnrgOfr(t,o)
1839         , MNCstrEnrgFactors(t,MnodeCstr,o)
1840         * GENERATION(t,o)
1841       ]
1842  + sum[ (o,resC,resT) $ offer(t,o)
1843         , MNCnstrResrvFactors(t,MnodeCstr,o,resC,resT)
1844         * RESERVE(t,o,resC,resT)
1845       ]
1846  + sum[ bd $ Bid(t,bd)
1847         , mnCnstrEnrgBidFactors(t,MnodeCstr,bd)
1848         * PURCHASE(t,bd)
1849       ]
1850  + DEFICITMNODECONSTRAINT(t,MnodeCstr)
1851  - SURPLUSMNODECONSTRAINT(t,MnodeCstr)
1852  =e=
1853    MNodeConstraintLimit(t,MnodeCstr)
1854    ;
1855   
1856  *======= SECURITY EQUATIONS END ==========================================
      ======
1857   
1858   
1859  * Model declarations
1860  Model vSPD /
1861  * Objective function
1862    ObjectiveFunction
1863  * Offer and purchase definitions
1864    GenerationOfferDefintion, DemBidDefintion
1865    EnergyScarcityDefinition,
1866    GenerationRampUp, GenerationRampDown
1867  * Network
1868    HVDClinkMaximumFlow, HVDClinkLossDefinition
1869    HVDClinkFlowDefinition, LambdaDefinition
1870    ACnodeNetInjectionDefinition1
1871    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
1872    ACBranchFlowDefinition, LinearLoadFlow
1873    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
1874    ACBranchLossCalculation, ACDirectedBranchLossDefinition
1875  * Risk
1876    HVDCIslandRiskCalculation, HVDCRecCalculation
1877    GenIslandRiskCalculation, GenIslandRiskCalculation_1
1878    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
1879    ManualIslandRiskCalculation
1880  * Reserve
1881    PLSRReserveProportionMaximum, ReserveOfferDefinition
1882    EnergyAndReserveMaximum
1883  * Reserve scarcity/shortfall
1884    HVDCRiskReserveShortFallCalculation
1885    ManualRiskReserveShortFallCalculation
1886    GenRiskReserveShortFallCalculation
1887    HVDCsecRiskReserveShortFallCalculation
1888    HVDCsecManualRiskReserveShortFallCalculation
1889    RiskGroupReserveShortFallCalculation
1890  * Matching of reserve requirement and availability
1891    SupplyDemandReserveRequirement, IslandReserveCalculation
1892  * Risk Offset calculation
1893    RiskOffsetCalculation_DCCE
1894    RiskOffsetCalculation_DCECE
1895  * Island risk definitions
1896  * Include HVDC secondary risk constraints
1897    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
1898    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
1899  * Branch security constraints
1900    BranchSecurityConstraintLE
1901    BranchSecurityConstraintGE
1902    BranchSecurityConstraintEQ
1903  * Market node security constraints
1904    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE
1905    MNodeSecurityConstraintEQ
1906  * ViolationCost
1907    SystemCostDefinition, SystemBenefitDefinition
1908    SystemPenaltyCostDefinition, TotalViolationCostDefinition
1909    TotalScarcityCostDefinition
1910    / ;
1911   
1912  Model vSPD_NMIR /
1913  * Objective function
1914    ObjectiveFunction
1915  * Offer and purchase definitions
1916    GenerationOfferDefintion, DemBidDiscrete,
1917    DemBidDefintion, EnergyScarcityDefinition,
1918    GenerationRampUp, GenerationRampDown, GenerationChangeUpDown
1919  * Network
1920    HVDClinkMaximumFlow, HVDClinkLossDefinition
1921    HVDClinkFlowDefinition, LambdaDefinition
1922    ACnodeNetInjectionDefinition1
1923    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
1924    ACBranchFlowDefinition, LinearLoadFlow
1925    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
1926    ACBranchLossCalculation, ACDirectedBranchLossDefinition
1927  * Risk
1928    RiskOffsetCalculation_DCCE, RiskOffsetCalculation_DCECE
1929    HVDCIslandRiskCalculation, HVDCRecCalculation, ManualIslandRiskCalculati
      on
1930    GenIslandRiskCalculation, GenIslandRiskCalculation_1
1931    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
1932    HVDCSendMustZeroBinaryDefinition
1933    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
1934    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
1935  * Reserve
1936    PLSRReserveProportionMaximum, ReserveInterruptibleOfferLimit
1937    ReserveOfferDefinition, EnergyAndReserveMaximum
1938  * Reserve scarcity/shortfall
1939    HVDCRiskReserveShortFallCalculation
1940    ManualRiskReserveShortFallCalculation
1941    GenRiskReserveShortFallCalculation
1942    HVDCsecRiskReserveShortFallCalculation
1943    HVDCsecManualRiskReserveShortFallCalculation
1944    RiskGroupReserveShortFallCalculation
1945  * Matching of reserve requirement and availability
1946    SupplyDemandReserveRequirement, IslandReserveCalculation
1947  * Branch security constraints
1948    BranchSecurityConstraintLE
1949    BranchSecurityConstraintGE
1950    BranchSecurityConstraintEQ
1951  * Market node security constraints
1952    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE, MNodeSecurityConst
      raintEQ
1953  * ViolationCost
1954    SystemCostDefinition, SystemBenefitDefinition
1955    SystemPenaltyCostDefinition, TotalViolationCostDefinition
1956    TotalScarcityCostDefinition
1957  * General NMIR equations
1958    EffectiveReserveShareCalculation
1959    SharedReserveLimitByClearedReserve
1960    BothClearedAndFreeReserveCanBeShared
1961    ReverseReserveShareLimitByHVDCControlBand
1962    ReserveShareSentLimitByHVDCControlBand
1963    FwdReserveShareSentLimitByHVDCCapacity
1964    ReverseReserveOnlyToEnergySendingIsland
1965    ForwardReserveOnlyToEnergyReceivingIsland
1966    ReverseReserveLimitInReserveZone
1967    ZeroReserveInNoReserveZone
1968    OnlyOneActiveHVDCZoneForEachReserveClass
1969    ZeroSentHVDCFlowForNonSendingIsland
1970    RoundPowerZoneSentHVDCUpperLimit
1971    HVDCSendingIslandDefinition
1972    OnlyOneSendingIslandExists
1973    HVDCSentCalculation
1974    ExcessReserveSharePenalty
1975    ReserveShareEffective_CE_Calculation
1976    ReserveShareEffective_ECE_Calculation
1977  * Lamda loss model NMIR
1978    HVDCFlowAccountedForForwardReserve
1979    ForwardReserveReceivedAtHVDCReceivingIsland
1980    HVDCFlowAccountedForReverseReserve
1981    ReverseReserveReceivedAtHVDCSendingIsland
1982    HVDCSentEnergyLambdaDefinition
1983    HVDCSentEnergyFlowDefinition
1984    HVDCSentEnergyLossesDefinition
1985    HVDCSentReserveLambdaDefinition
1986    HVDCSentReserveFlowDefinition
1987    HVDCSentReserveLossesDefinition
1988    / ;
1989   
1990  Model vSPD_MIP /
1991  * Objective function
1992    ObjectiveFunction
1993  * Offer and purchase definitions
1994    GenerationOfferDefintion, DemBidDiscrete, DemBidDefintion
1995    EnergyScarcityDefinition,
1996    GenerationRampUp, GenerationRampDown, GenerationChangeUpDown
1997  * Network
1998    HVDClinkMaximumFlow, HVDClinkLossDefinition
1999    HVDClinkFlowDefinition, LambdaDefinition
2000    ACnodeNetInjectionDefinition1
2001    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
2002    ACBranchFlowDefinition, LinearLoadFlow
2003    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
2004    ACBranchLossCalculation, ACDirectedBranchLossDefinition
2005    ACDirectedBranchFlowIntegerDefinition1, ACDirectedBranchFlowIntegerDefin
      ition2
2006    LambdaIntegerDefinition1, LambdaIntegerDefinition2
2007  * Risk
2008    RiskOffsetCalculation_DCCE, RiskOffsetCalculation_DCECE
2009    HVDCIslandRiskCalculation, HVDCRecCalculation, ManualIslandRiskCalculati
      on
2010    GenIslandRiskCalculation, GenIslandRiskCalculation_1
2011    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
2012    HVDCSendMustZeroBinaryDefinition
2013    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
2014    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
2015  * Reserve
2016    PLSRReserveProportionMaximum, ReserveInterruptibleOfferLimit
2017    ReserveOfferDefinition, EnergyAndReserveMaximum
2018  * Reserve scarcity/shortfall
2019    HVDCRiskReserveShortFallCalculation
2020    ManualRiskReserveShortFallCalculation
2021    GenRiskReserveShortFallCalculation
2022    HVDCsecRiskReserveShortFallCalculation
2023    HVDCsecManualRiskReserveShortFallCalculation
2024    RiskGroupReserveShortFallCalculation
2025  * Matching of reserve requirement and availability
2026    SupplyDemandReserveRequirement, IslandReserveCalculation
2027  * Branch security constraints
2028    BranchSecurityConstraintLE
2029    BranchSecurityConstraintGE
2030    BranchSecurityConstraintEQ
2031  * Market node security constraints
2032    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE, MNodeSecurityConst
      raintEQ
2033  * ViolationCost
2034    SystemCostDefinition, SystemBenefitDefinition
2035    SystemPenaltyCostDefinition, TotalViolationCostDefinition
2036    TotalScarcityCostDefinition
2037  * Set of integer constraints on the HVDC link to incorporate the allowance
       of HVDC roundpower
2038    HVDClinkFlowIntegerDefinition1, HVDClinkFlowIntegerDefinition2
2039    HVDClinkFlowIntegerDefinition3, HVDClinkFlowIntegerDefinition4
2040  * General NMIR equations
2041    EffectiveReserveShareCalculation
2042    SharedReserveLimitByClearedReserve
2043    BothClearedAndFreeReserveCanBeShared
2044    ReverseReserveShareLimitByHVDCControlBand
2045    ReserveShareSentLimitByHVDCControlBand
2046    FwdReserveShareSentLimitByHVDCCapacity
2047    ReverseReserveOnlyToEnergySendingIsland
2048    ForwardReserveOnlyToEnergyReceivingIsland
2049    ReverseReserveLimitInReserveZone
2050    ZeroReserveInNoReserveZone
2051    OnlyOneActiveHVDCZoneForEachReserveClass
2052    ZeroSentHVDCFlowForNonSendingIsland
2053    RoundPowerZoneSentHVDCUpperLimit
2054    HVDCSendingIslandDefinition
2055    OnlyOneSendingIslandExists
2056    HVDCSentCalculation
2057    ExcessReserveSharePenalty
2058    ReserveShareEffective_CE_Calculation
2059    ReserveShareEffective_ECE_Calculation
2060  * Lamda loss model NMIR
2061    HVDCFlowAccountedForForwardReserve
2062    ForwardReserveReceivedAtHVDCReceivingIsland
2063    HVDCFlowAccountedForReverseReserve
2064    ReverseReserveReceivedAtHVDCSendingIsland
2065    HVDCSentEnergyLambdaDefinition
2066    HVDCSentEnergyFlowDefinition
2067    HVDCSentEnergyLossesDefinition
2068    HVDCSentReserveLambdaDefinition
2069    HVDCSentReserveFlowDefinition
2070    HVDCSentReserveLossesDefinition
2071    / ;
2072   
2073  Model vSPD_BranchFlowMIP /
2074  * Objective function
2075    ObjectiveFunction
2076  * Offer and purchase definitions
2077    GenerationOfferDefintion, DemBidDefintion
2078    EnergyScarcityDefinition,
2079    GenerationRampUp, GenerationRampDown, GenerationChangeUpDown
2080  * Network
2081    HVDClinkMaximumFlow, HVDClinkLossDefinition
2082    HVDClinkFlowDefinition, LambdaDefinition
2083    ACnodeNetInjectionDefinition1
2084    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
2085    ACBranchFlowDefinition, LinearLoadFlow
2086    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
2087    ACBranchLossCalculation, ACDirectedBranchLossDefinition
2088    ACDirectedBranchFlowIntegerDefinition1, ACDirectedBranchFlowIntegerDefin
      ition2
2089    LambdaIntegerDefinition1, LambdaIntegerDefinition2
2090  * Risk
2091    RiskOffsetCalculation_DCCE, RiskOffsetCalculation_DCECE
2092    HVDCIslandRiskCalculation, HVDCRecCalculation, ManualIslandRiskCalculati
      on
2093    GenIslandRiskCalculation, GenIslandRiskCalculation_1
2094    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
2095    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
2096    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
2097  * Reserve
2098    PLSRReserveProportionMaximum, ReserveOfferDefinition
2099    EnergyAndReserveMaximum
2100  * Reserve scarcity/shortfall
2101    HVDCRiskReserveShortFallCalculation
2102    ManualRiskReserveShortFallCalculation
2103    GenRiskReserveShortFallCalculation
2104    HVDCsecRiskReserveShortFallCalculation
2105    HVDCsecManualRiskReserveShortFallCalculation
2106    RiskGroupReserveShortFallCalculation
2107  * Matching of reserve requirement and availability
2108    SupplyDemandReserveRequirement, IslandReserveCalculation
2109  * Branch security constraints
2110    BranchSecurityConstraintLE
2111    BranchSecurityConstraintGE
2112    BranchSecurityConstraintEQ
2113  * Market node security constraints
2114    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE, MNodeSecurityConst
      raintEQ
2115  * ViolationCost
2116    SystemCostDefinition, SystemBenefitDefinition
2117    SystemPenaltyCostDefinition, TotalViolationCostDefinition
2118    TotalScarcityCostDefinition
2119  * Set of intrger constraints on the HVDC link to incorporate the allowance
       of HVDC roundpower
2120    HVDClinkFlowIntegerDefinition1, HVDClinkFlowIntegerDefinition2
2121    HVDClinkFlowIntegerDefinition3, HVDClinkFlowIntegerDefinition4
2122  * General NMIR equations
2123    EffectiveReserveShareCalculation
2124    SharedReserveLimitByClearedReserve
2125    BothClearedAndFreeReserveCanBeShared
2126    ReverseReserveShareLimitByHVDCControlBand
2127    ReserveShareSentLimitByHVDCControlBand
2128    FwdReserveShareSentLimitByHVDCCapacity
2129    ReverseReserveOnlyToEnergySendingIsland
2130    ForwardReserveOnlyToEnergyReceivingIsland
2131    ReverseReserveLimitInReserveZone
2132    ZeroReserveInNoReserveZone
2133    OnlyOneActiveHVDCZoneForEachReserveClass
2134    ZeroSentHVDCFlowForNonSendingIsland
2135    RoundPowerZoneSentHVDCUpperLimit
2136    HVDCSendingIslandDefinition
2137    OnlyOneSendingIslandExists
2138    HVDCSentCalculation
2139    ExcessReserveSharePenalty
2140    ReserveShareEffective_CE_Calculation
2141    ReserveShareEffective_ECE_Calculation
2142  * Lamda loss model NMIR
2143    HVDCFlowAccountedForForwardReserve
2144    ForwardReserveReceivedAtHVDCReceivingIsland
2145    HVDCFlowAccountedForReverseReserve
2146    ReverseReserveReceivedAtHVDCSendingIsland
2147    HVDCSentEnergyLambdaDefinition
2148    HVDCSentEnergyFlowDefinition
2149    HVDCSentEnergyLossesDefinition
2150    HVDCSentReserveLambdaDefinition
2151    HVDCSentReserveFlowDefinition
2152    HVDCSentReserveLossesDefinition
2153    / ;
2154   
2155  Model vSPD_FTR /
2156  * Objective function
2157    ObjectiveFunction
2158  * Offer and purchase definitions
2159    GenerationOfferDefintion
2160  * Network
2161    HVDClinkMaximumFlow
2162    ACNodeNetInjectionDefinition1, ACNodeNetInjectionDefinition2
2163    ACBranchMaximumFlow, ACBranchFlowDefinition, LinearLoadFlow
2164  * Branch security constraints
2165    BranchSecurityConstraintLE
2166    BranchSecurityConstraintGE
2167    BranchSecurityConstraintEQ
2168  * ViolationCost
2169    SystemCostDefinition, SystemBenefitDefinition
2170    SystemPenaltyCostDefinition, TotalViolationCostDefinition
2171    TotalScarcityCostDefinition
2172    / ;


COMPILATION TIME     =        0.000 SECONDS      3 MB  36.2.0 r433180e WEX-WEI
GAMS 36.2.0  r433180e Released Sep  3, 2021 WEX-WEI x86 64bit/MS Windows - 08/09/23 15:00:26 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


EXECUTION TIME       =        0.031 SECONDS      3 MB  36.2.0 r433180e WEX-WEI


USER: Small MUD-5 User License                       G220916|0002CO-GEN
      Electricity Authority - Te Mana Hiko,                  DC5643-S10


**** FILE SUMMARY

Input      C:\vSPD\vSPD\Programs_new\vSPDmodel.gms
Output     C:\vSPD\vSPD\Programs_new\vSPDmodel.lst
