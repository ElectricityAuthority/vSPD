GAMS 36.2.0  r433180e Released Sep  3, 2021 WEX-WEI x86 64bit/MS Windows - 08/10/23 15:56:29 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  *=========================================================================
      ============
   2  * Name:                 vSPDmodel.gms
   3  * Function:             Mathematical formulation - based on the SPD formul
      ation v9.0
   4  * Developed by:         Electricity Authority, New Zealand
   5  * Source:               https://github.com/ElectricityAuthority/vSPD
   6  *                       http://www.emi.ea.govt.nz/Tools/vSPD
   7  * Contact:              Forum: http://www.emi.ea.govt.nz/forum/
   8  *                       Email: emi@ea.govt.nz
   9  * Modified on:          1 Oct 2019
  10  *                       New feature added: New wind offer arrangements
  11  * Modified on:          11 Dec 2020
  12  *                       Branch Reverse Rating (this feature is suspended u
      ntil further notice)
  13  * Modified on:          24 Feb 2021
  14  *                       Correcting the excess reserve sharing penalty
  15  *                       by adding RESERVESHAREEFFECTIVE_CE and ECE variabl
      es
  16  * Last modified on:     18 March 2022
  17  *                       Rename/remove primary sets to tidy up the code and
  18  *                       Assign value for constant sets such as ils, blk,re
      sC, etc...
  19  *
  20  *=========================================================================
      ============
  21   
      Directory of code sections in vSPDmodel.gms:
        1. Declare sets and parameters for all symbols to be loaded from daily G
      DX files
        2. Declare additional sets and parameters used throughout the model
        3. Declare model variables and constraints, and initialise constraints
       
      Aliases to be aware of:
        dt = dt1                                  tp = tp1,tp2
        isl = isl1, isl2                          b = b1, frB, toB
        n = n1, n2                                o = o1, o2
        bd = bd1, bd2
        br = br1
  35   
  36  * Allow empty data set declaration
  38   
  39  *=========================================================================
      ==========
  40  * 1. Declare sets and parameters for all symbols to be loaded from daily G
      DX files
  41  *=========================================================================
      ==========
  42  * Hard-coded sets.
  43  Sets
  44    isl(*)              'Islands'                                           
            / NI, SI /
  45    blk(*)              'Trade block definitions used for the offer and bids
      '     / t1*t20 /
  46    los(*)              'Loss segments available for loss modelling'        
            / ls1*ls13 /
  47    fd(*)               'Directional flow definition used in the SPD formula
      tion' / forward, backward /
  48    resC(*)             'Definition of fast and sustained instantaneous rese
      rve'  / FIR, SIR /
  49    riskC(*)            'Different risks that could set the reserve requirem
      ents' / genRisk, genRiskECE, DCCE, DCECE, manual, manualECE, HVDCsecRisk, 
      HVDCsecRiskECE /
  50    resT(*)             'Definition of reserve types (PLSR, TWDR, ILR)'     
            / PLRO, TWRO, ILRO /
  51   
  52    casePar(*)          'Different information about a case and datetime' /s
      tudyMode, intervalLength/
  53   
  54    dtPar(*)            'The various parameters applied for datetime'     / 
      usegeninitialMW, enrgShortfallTransfer, priceTransfer, replaceSurplusPrice
      , igIncreaseLimitRTD, useActualLoad, dontScaleNegLoad, maxSolveLoop, short
      fallRemovalMargin, enrgScarcity, resrvScarcity /
  55   
  56    islPar(*)           'The various parameters applied for each island'  / 
      HVDCsecRisk, HVDCsecRiskECE, HVDCSecSubtractor, sharedNFRLoadOffset, RMTli
      mitFIR, RMTlimitSIR, MWIPS, PDS, Losses, SPDLoadCalcLosses/
  57   
  58    bidofrCmpnt(*)      'Components of the bid and offer'                 / 
      limitMW, price, plsrPct, factor /
  59   
  60    offerPar(*)         'The various parameters required for each offer'  / 
      initialMW, rampUpRate, rampDnRate, resrvGenMax, isIG, FKbandMW, isPriceRes
      ponse, potentialMW, riskGenerator, dispatchable, maxFactorFIR, maxFactorSI
      R /
  61   
  62    bidPar(*)           'The various parameters required for each offer'  / 
      dispatchable, discrete, difference /
  63   
  64    nodePar(*)          'The various parameters applied for each  node'   / 
      referenceNode, demand, initialLoad, conformingFactor, nonConformingFactor,
       loadIsOverride, loadIsBad, loadIsNCL, maxLoad, instructedLoadShed, instru
      ctedShedActive, dispatchedLoad, dispatchedGeneration /
  65   
  66    brPar(*)            'Branch parameter specified'                      / 
      forwardCap, backwardCap, resistance, susceptance, fixedLosses, numLossTran
      ches, HVDCbranch, isOpen /
  67   
  68    resPar(*)           'Parameters applied to reserve class'             / 
      sharingFIR, sharingSIR, roundPwrFIR, roundPwrSIR, roundPwr2Mono, biPole2Mo
      no, monoPoleMin, modulationRisk, lossScalingFactorHVDC, sharedNFRfactor,fo
      rwardHVDCcontrolBand, backwardHVDCcontrolBand /
  69   
  70    riskPar(*)          'Different risk parameters'                       / 
      freeReserve, adjustFactor, HVDCRampUp, minRisk, sharingEffectiveFactor /
  71   
  72    CstrRHS(*)          'Constraint RHS definition'                       / 
      cnstrSense, cnstrLimit, rampingCnstr /
  73   
  74    z(*)                'RP: round power, NR: no reverse, RZ: reverse'    /R
      P, NR, RZ/
  75   
  76    pole(*)             'HVDC poles'                                      / 
      pole1, pole2 /
  77   
  78    testcases(*)        'Test Cases for RTP 4'                            /'
      MSS_21012023030850151_0X','MSS_21302023030830146_0X','MSS_2132202303080013
      3_0X','MSS_61012023030935374_0X'/
  79    ;
  80   
  81  * Primary sets that are defined by /loaded from gdx inputs
  82  Sets
  83    cn(*)               'Case name used to create the GDX file'
  84    ca(*)               'Case ID associated with data'
  85    dt(*)               'Date and time for the trade periods'
  86    tp(*)               'Trade periods for which input data is defined'
  87    b(*)                'Bus definitions for all trading periods'
  88    n(*)                'Node definitions for all trading periods'
  89    o(*)                'Offers for all trading periods'
  90    bd(*)               'Bids for all trading periods'
  91    trdr(*)             'Traders defined for all trading periods'
  92    br(*)               'Branch definition for all trading periods'
  93    brCstr(*)           'Branch constraint definitions for all trading perio
      ds'
  94    MnodeCstr(*)        'Market node constraint definitions for all trading 
      periods'
  95    rg(*)               'Set representing a collection of generation and res
      erve offers treated as a group risk'
  96    rundt(*)            'Run datetime of the case for reporting'
  97    ;
  98   
  99  * Aliases
 100  Alias (dt,dt1,dt2),       (tp,tp1,tp2),     (isl,isl1,isl2),  (b,b1,frB,to
      B),      (n,n1,n2),          (o,o1,o2),        (bd,bd2,bd1)
 101        (br,br1),           (fd,fd1,rd,rd1),  (z,z1,rrz,rrz1),  (rg,rg1),   
               (blk,blk1,blk2),    (los,los1,bp,bp1,rsbp,rsbp1)
 102    ;
 103   
 104  * Dynamic sets that are loaded from GDX
 105  Sets
 106  * Case/period sets
 107    caseDefn(ca,cn,rundt)                 'Mapping caseid - casename - runda
      tetime set'
 108    case2dt2tp(ca,dt,tp)                  'Mapping caseid - datetime - trade
      Period set'
 109   
 110  * Node/bus sets
 111    node2node(ca,dt,n,n1)                 'Node to node mapping used for pri
      ce and energy shortfall transfer'
 112    busIsland(ca,dt,b,isl)                'Bus island mapping for the differ
      ent trade periods'
 113    nodeBus(ca,dt,n,b)                    'Node bus mapping for the differen
      t trading periods'
 114   
 115  * Branch sets
 116    branchDefn(ca,dt,br<,frB,toB)         'Branch definition for the differe
      nt trading periods'
 117    nodeoutagebranch(ca,dt,n,br)          'Mappinging of branch and node whe
      re branch outage may affect the capacity to supply to the node'
 118   
 119  * Offer sets
 120    offerNode(ca,dt,o<,n)                 'Offers and the corresponding offe
      r node for the different trading periods'
 121    offerTrader(ca,dt,o,trdr<)            'Offers and the corresponding trad
      er for the different trading periods'
 122    primarySecondaryOffer(ca,dt,o,o1)     'Primary-secondary offer mapping f
      or the different trading periods - in use from 01 May 2012'
 123   
 124  * Bid sets
 125    bidNode(ca,dt,bd<,n)                  'Bids and the corresponding node f
      or the different trading periods'
 126    bidTrader(ca,dt,bd,trdr<)             'Bids and the corresponding trader
       for the different trading periods'
 127   
 128  * Risk sets
 129    riskGroupOffer(ca,dt,rg<,o,riskC)     'Mappimg of risk group to offers i
      n current trading period for each risk class - SPD version 11.0 update'
 130    ;
 131   
 132   
 133  * Paraeters loaded from GDX file in vSPDsolve.gms
 134  Parameters
 135  * Case-Period data
 136    gdxDate(*)                                        'day, month, year of t
      rade date applied to daily GDX'
 137    runMode(ca,casePar)                               'Study mode and interv
      al length applied to each caseID'
 138    dtParameter(ca,dt,dtPar)                          'Parameters applied to
       each caseID-datetime pair'
 139   
 140  * Island data
 141    islandParameter(ca,dt,isl,islPar)                 'Island parameters for
       the different trading periods'
 142   
 143  * Nodal data
 144    nodeParameter(ca,dt,n,nodePar)                    'Nodal input data for 
      all trading periods'
 145   
 146  * Bus data
 147    busElectricalIsland(ca,dt,b)                      'Electrical island sta
      tus of each bus for the different trading periods (0 = Dead)'
 148    nodeBusAllocationFactor(ca,dt,n,b)                'Allocation factor of 
      market node quantities to bus for the different trading periods'
 149   
 150  * Branch and branch constraint data
 151    branchParameter(ca,dt,br,brPar)                   'Branch parameters for
       the different time periods'
 152    branchCstrFactors(ca,dt,brCstr<,br)               'Branch security const
      raint factors (sensitivities) for the current trading period'
 153    branchCstrRHS(ca,dt,brCstr,CstrRHS)               'Branch constraint sen
      se and limit for the different trading periods'
 154   
 155  * Offer data
 156    energyOffer(ca,dt,o,blk,bidofrCmpnt)              'Energy offers for the
       different trading periods'
 157    reserveOffer(ca,dt,o,resC,resT,blk,bidofrCmpnt)   'Reserve offers for th
      e different trading periods'
 158    offerParameter(ca,dt,o,offerPar)                  'Initial MW for each o
      ffer for the different trading periods'
 159   
 160  * Bid data
 161    energyBid(ca,dt,bd,blk,bidofrCmpnt)               'Energy bids for the d
      ifferent trading periods'
 162    bidParameter(ca,dt,bd,bidPar)                     'Parameters applied to
       each bid for the different trading periods'
 163   
 164  * Market node constraint data
 165    mnCnstrRHS(ca,dt,MnodeCstr<,CstrRHS)              'Market node constrain
      t sense and limit for the different trading periods'
 166    mnCstrEnrgFactors(ca,dt,MnodeCstr,o)              'Market node energy of
      fer constraint factors for the current trading period'
 167    mnCnstrResrvFactors(ca,dt,MnodeCstr,o,resC,resT)  'Market node reserve o
      ffer constraint factors for the current trading period'
 168    mnCnstrEnrgBidFactors(ca,dt,MnodeCstr,bd)         'Market node energy bi
      d constraint factors for the different trading periods'
 169    mnCnstrResrvBidFactors(ca,dt,MnodeCstr,bd,resC)   'Market node IL reserv
      e bid constraint factors for the different trading periods - currently not
       used'
 170   
 171  * Risk and reserve/sharing data
 172    riskParameter(ca,dt,isl,resC,riskC,riskPar)       'Risk parameters for t
      he different trading periods'
 173    reserveSharingParameter(ca,dt,resPar)             'Reserve (sharing) par
      ameters for the different trading periods'
 174   
 175  * Scarcity data
 176    scarcityNationalFactor(ca,dt,blk,bidofrCmpnt)      'National energy scar
      city factor parameters'
 177    scarcityNodeFactor(ca,dt,n,blk,bidofrCmpnt)        'Nodal energy scarcit
      y factor parameters'
 178    scarcityNodeLimit(ca,dt,n,blk,bidofrCmpnt)         'Nodal energy scarcit
      y limit parameters'
 179    scarcityResrvLimit(ca,dt,isl,resC,blk,bidofrCmpnt) 'Reserve scarcity lim
      it parameters'
 180   
 181    ;
 182   
 183  * Setting scalars that are hard-coded or defined in vSPDSetting.inc
 184  Scalars
 185    useAClossModel
 186    useHVDClossModel
 187    useACbranchLimits                        'Use the AC branch limits (1 = 
      Yes)'
 188    useHVDCbranchLimits                      'Use the HVDC branch limits (1 
      = Yes)'
 189    resolveCircularBranchFlows               'Resolve circular branch flows 
      (1 = Yes)'
 190    resolveHVDCnonPhysicalLosses             'Resolve nonphysical losses on 
      HVDC branches (1 = Yes)'
 191    resolveACnonPhysicalLosses               'Resolve nonphysical losses on 
      AC branches (1 = Yes)'
 192    circularBranchFlowTolerance
 193    nonPhysicalLossTolerance
 194    useBranchFlowMIPtolerance
 195    useReserveModel                          'Use the reserve model (1 = Yes
      )'
 196    mixedMIPtolerance
 197    LPtimeLimit                              'CPU seconds allowed for LP sol
      ves'
 198    LPiterationLimit                         'Iteration limit allowed for LP
       solves'
 199    MIPtimeLimit                             'CPU seconds allowed for MIP so
      lves'
 200    MIPiterationLimit                        'Iteration limit allowed for MI
      P solves'
 201    MIPoptimality
 202    disconnectedNodePriceCorrection          'Flag to apply price correction
       methods to disconnected node'
 203    branchReceivingEndLossProportion         'Proportion of losses to be all
      ocated to the receiving end of a branch' /1/
 204    BigM                                     'Big M value to be applied for 
      single active segment HVDC loss model' /10000/
 205   
 206  * External loss model from Transpower
 207    lossCoeff_A                       / 0.3101 /
 208    lossCoeff_C                       / 0.14495 /
 209    lossCoeff_D                       / 0.32247 /
 210    lossCoeff_E                       / 0.46742 /
 211    lossCoeff_F                       / 0.82247 /
 212    maxFlowSegment                    / 10000 /
 213   
 214    ;
 215   
 216  * End of GDX declarations
 217   
 218   
 219   
 220  *=========================================================================
      ==========
 221  * 2. Declare additional sets and parameters used throughout the model
 222  *=========================================================================
      ==========
 223   
 224   
 225   
 226  * Dynamic sets that are calculated on the fly
 227  Sets
 228  * Global
 229    t(ca,dt)                               'Current trading interval to solv
      e'
 230   
 231  * Node/bus
 232    node(ca,dt,n)                          'Node definition for the differen
      t trading periods'
 233    bus(ca,dt,b)                           'Bus definition for the different
       trading periods'
 234    nodeIsland(ca,dt,n,isl)                'Mapping node to island'
 235   
 236  * Offer
 237    offer(ca,dt,o)                         'Offers defined for the current t
      rading period'
 238    offerIsland(ca,dt,o,isl)               'Mapping of reserve offer to isla
      nd for the current trading period'
 239    islandRiskGenerator(ca,dt,isl,o)       'Mapping of risk generator to isl
      and in the current trading period'
 240    genOfrBlk(ca,dt,o,blk)                 'Valid trade blocks for the respe
      ctive generation offers'
 241    posEnrgOfr(ca,dt,o)                    'Postive energy offers defined fo
      r the current trading period'
 242    resOfrBlk(ca,dt,o,blk,resC,resT)       'Valid trade blocks for the respe
      ctive reserve offers by class and type'
 243   
 244  * Bid
 245    Bid(ca,dt,bd)                          'Bids defined for the current tra
      ding period'
 246    bidIsland(ca,dt,bd,isl)                'Mapping of purchase bid ILR to i
      sland for the current trading period'
 247    DemBidBlk(ca,dt,bd,blk)                'Valid trade blocks for the respe
      ctive purchase bids'
 248   
 249  * Network
 250    branch(ca,dt,br)                       'Branches defined for the current
       trading period'
 251    branchBusDefn(ca,dt,br,frB,toB)        'Branch bus connectivity for the 
      current trading period'
 252    branchFrBus(ca,dt,br,frB)              'Define branch from bus connectiv
      ity for the current trading period'
 253    branchToBus(ca,dt,br,frB)              'Define branch to bus connectivit
      y for the current trading period'
 254    branchBusConnect(ca,dt,br,b)           'Indication if a branch is connec
      ted to a bus for the current trading period'
 255    HVDClink(ca,dt,br)                     'HVDC links (branches) defined fo
      r the current trading period'
 256    ACBranch(ca,dt,br)                     'AC branches defined for the curr
      ent trading period'
 257    ACBranchSendingBus(ca,dt,br,b,fd)      'Sending (From) bus of AC branch 
      in forward and backward direction'
 258    ACBranchReceivingBus(ca,dt,br,b,fd)    'Receiving (To) bus of AC branch 
      in forward and backward direction'
 259    HVDClinkSendingBus(ca,dt,br,b)         'Sending (From) bus of HVDC link'
 260    HVDClinkReceivingBus(ca,dt,br,toB)     'Receiving (To) bus of HVDC link'
 261    HVDClinkBus(ca,dt,br,b)                'Sending or Receiving bus of HVDC
       link'
 262    HVDCpoleDirection(ca,dt,br,fd)         'Direction defintion for HVDC pol
      es S->N : forward and N->S : backward'
 263    HVDCpoleBranchMap(pole,br)             'Mapping of HVDC  branch to pole 
      number'
 264    validLossSegment(ca,dt,br,los,fd)      'Valid loss segments for a branch
      '
 265    lossBranch(ca,dt,br)                   'Subset of branches that have non
      -zero loss factors'
 266   
 267  * Risk/Reserve
 268   
 269   
 270    GenRisk(riskC)                                                    'Subse
      t containing generator risks'
 271    ManualRisk(riskC)                                                 'Subse
      t containting manual risks'
 272    HVDCrisk(riskC)                                                   'Subse
      t containing DCCE and DCECE risks'
 273    HVDCSecRisk(riskC)                                                'Subse
      t containing secondary risk of the DCCE and DCECE events'
 274   
 275    PLRO(resT)                                             'PLSR reserve typ
      e'
 276    TWRO(resT)                                             'TWDR reserve typ
      e'
 277    ILRO(resT)                                             'ILR reserve type
      '
 278   
 279   
 280   
 281  * Definition of CE and ECE events to support different CE and ECE CVPs
 282    ContingentEvents(riskC)                                           'Subse
      t of Risk Classes containing contigent event risks'
 283    ExtendedContingentEvent(riskC)                                    'Subse
      t of Risk Classes containing extended contigent event risk'
 284  * Branch constraint
 285    BranchConstraint(ca,dt,brCstr)                                       'Se
      t of valid branch constraints defined for the current trading period'
 286  * Market node constraint
 287    MNodeConstraint(ca,dt,MnodeCstr)                                     'Se
      t of market node constraints defined for the current trading period'
 288  * NMIR update
 289    rampingConstraint(ca,dt,brCstr)                                      'Su
      bset of branch constraints that limit total HVDC sent from an island due t
      o ramping (5min schedule only)'
 290    bipoleConstraint(ca,dt,isl,brCstr)                                   'Su
      bset of branch constraints that limit total HVDC sent from an island'
 291    monopoleConstraint(ca,dt,isl,brCstr,br)                              'Su
      bset of branch constraints that limit the flow on HVDC pole sent from an i
      sland'
 292   
 293   
 294    islandRiskGroup(ca,dt,isl,rg,riskC)                                  'Ma
      ppimg of risk group to island in current trading period for each risk clas
      s - SPD version 11.0 update'
 295    ;
 296   
 297  Alias (t,t1,t2);
 298   
 299   
 300  * Parameters initialised on the fly
 301  Parameters
 302    studyMode(ca,dt)                        'RTD~101, RTDP~201, PRSS~130, NR
      SS~132, PRSL~131, NRSL~133, WDS~120'
 303    intervalDuration(ca,dt)                 'Length of the trading period in
       minutes (e.g. 30) applied to each caseID-Period pair'
 304   
 305  * Nodal data
 306    refNode(ca,dt,n)                        'Reference nodes for the differe
      nt trading periods'
 307    inputInitialLoad(ca,dt,n)                                            'Th
      is value represents actual load MW for RTD schedule input'
 308    conformingFactor(ca,dt,n)                                            'In
      itial estimated load for conforming load'
 309    nonConformingLoad(ca,dt,n)                                           'In
      itial estimated load for non-conforming load'
 310    loadIsOverride(ca,dt,n)                                              'Fl
      ag if set to 1 --> InputInitialLoad will be fixed as node demand'
 311    loadIsBad(ca,dt,n)                                                   'Fl
      ag if set to 1 --> InitialLoad will be replaced by Estimated Initial Load'
 312    loadIsNCL(ca,dt,n)                                                   'Fl
      ag if set to 1 --> non-conforming load --> will be fixed in RTD load calcu
      lation'
 313    maxLoad(ca,dt,n)                                                     'Pn
      ode maximum load'
 314    instructedLoadShed(ca,dt,n)                                          'In
      structed load shedding applied to RTDP and should be ignore by all other s
      chedules'
 315    instructedShedActive(ca,dt,n)                                        'Fl
      ag if Instructed load shedding is active; applied to RTDP and should be ig
      nore by all other schedules'
 316    dispatchedLoad(ca,dt,n)                                              'In
      itial dispatched lite demand'
 317    dispatchedGeneration(ca,dt,n)                                        'In
      itial dispatched lite generation'
 318   
 319   
 320  * Offers parameters
 321    generationStart(ca,dt,o)                'The MW generation level associa
      ted with the offer at the start of a trading period'
 322    rampRateUp(ca,dt,o)                     'The ramping up rate in MW per m
      inute associated with the generation offer (MW/min)'
 323    rampRateDn(ca,dt,o)                     'The ramping down rate in MW per
       minute associated with the generation offer (MW/min)'
 324    reserveGenMax(ca,dt,o)                  'Maximum generation and reserve 
      capability for the current trading period (MW)'
 325    intermittentOffer(ca,dt,o)              'Flag to indicate if offer is fr
      om intermittent generator (1 = Yes)'
 326    FKBand(ca,dt,o)                         'Frequency keeper band MW which 
      is set when the risk setter is selected as the frequency keeper'
 327    priceResponsive(ca,dt,o)                'Flag to indicate if wind offer 
      is price responsive (1 = Yes)'
 328    potentialMW(ca,dt,o)                    'Potential max output of Wind of
      fer'
 329    reserveMaxFactor(ca,dt,o,resC)          'Factor to adjust the maximum re
      serve of the different classes for the different offers'
 330   
 331  * Primary-secondary offer parameters
 332    primaryOffer(ca,dt,o)                   'Flag to indicate if offer is a 
      primary offer (1 = Yes)'
 333    secondaryOffer(ca,dt,o)                 'Flag to indicate if offer is a 
      secondary offer (1 = Yes)'
 334   
 335  * Energy offer
 336    enrgOfrMW(ca,dt,o,blk)                  'Generation offer block (MW)'
 337    enrgOfrPrice(ca,dt,o,blk)               'Generation offer price ($/MW)'
 338   
 339  * Reserve offer
 340    resrvOfrPct(ca,dt,o,blk,resC)           'The percentage of the MW block 
      available for PLSR of class FIR or SIR'
 341    resrvOfrPrice(ca,dt,o,blk,resC,resT)    'The price of the reserve of the
       different reserve classes and types ($/MW)'
 342    resrvOfrMW(ca,dt,o,blk,resC,resT)       'The maximum MW offered reserve 
      for the different reserve classes and types (MW)'
 343   
 344  * Demand
 345    requiredLoad(ca,dt,n)                   'Nodal demand for the current tr
      ading period in MW'
 346   
 347  * Bid
 348    demBidMW(ca,dt,bd,blk)                  'Demand bid block in MW'
 349    demBidPrice(ca,dt,bd,blk)               'Purchase bid price in $/MW'
 350    demBidILRMW(ca,dt,bd,blk,resC)          'Purchase bid ILR block in MW fo
      r the different reserve classes - place holder'
 351    demBidILRPrice(ca,dt,bd,blk,resC)       'Purchase bid ILR price in $/MW 
      for the different reserve classes - place holder'
 352   
 353  * Network
 354    branchCapacity(ca,dt,br,fd)             'Branch directed capacity for th
      e different trading periods in MW (Branch Reverse Ratings)'
 355    branchResistance(ca,dt,br)              'Resistance of the a branch for 
      the current trading period in per unit'
 356    branchSusceptance(ca,dt,br)             'Susceptance (inverse of reactan
      ce) of a branch for the current trading period in per unit'
 357    branchFixedLoss(ca,dt,br)               'Fixed loss of the a branch for 
      the current trading period in MW'
 358    branchLossBlocks(ca,dt,br)              'Number of blocks in the loss cu
      rve for the a branch in the current trading period'
 359    lossSegmentMW(ca,dt,br,los,fd)          'MW capacity of each loss segmen
      t'
 360    lossSegmentFactor(ca,dt,br,los,fd)      'Loss factor of each loss segmen
      t'
 361    ACBranchLossMW(ca,dt,br,los,fd)         'MW element of the loss segment 
      curve in MW'
 362    ACBranchLossFactor(ca,dt,br,los,fd)     'Loss factor element of the loss
       segment curve'
 363    HVDCBreakPointMWFlow(ca,dt,br,bp,fd)    'Value of power flow on the HVDC
       at the break point'
 364    HVDCBreakPointMWLoss(ca,dt,br,bp,fd)    'Value of variable losses on the
       HVDC at the break point'
 365   
 366  * Branch constraint
 367    BranchConstraintSense(ca,dt,brCstr)                                  'Br
      anch security constraint sense for the current trading period (-1:<=, 0:= 
      1:>=)'
 368    BranchConstraintLimit(ca,dt,brCstr)                                  'Br
      anch security constraint limit for the current trading period'
 369   
 370  * Market node constraint
 371    MNodeConstraintSense(ca,dt,MnodeCstr)                                'Ma
      rket node constraint sense for the current trading period'
 372    MNodeConstraintLimit(ca,dt,MnodeCstr)                                'Ma
      rket node constraint limit for the current trading period'
 373   
 374   
 375  * Risk/Reserve data
 376    HVDCSecRiskEnabled(ca,dt,isl,riskC)     'Flag indicating if the HVDC sec
      ondary risk is enabled (1 = Yes)'
 377   
 378  * Risk/Reserve
 379    IslandRiskAdjustmentFactor(ca,dt,isl,resC,riskC)                     'Ri
      sk adjustment factor for each island, reserve class and risk class'
 380    FreeReserve(ca,dt,isl,resC,riskC)                                    'MW
       free reserve for each island, reserve class and risk class'
 381    HVDCpoleRampUp(ca,dt,isl,resC,riskC)                                 'HV
      DC pole MW ramp up capability for each island, reserve class and risk clas
      s'
 382   
 383  * NMIR parameters
 384  * The follwing are new input for NMIR
 385    reserveRoundPower(ca,dt,resC)                                        'Da
      tabase flag that disables round power under certain circumstances'
 386    reserveShareEnabled(ca,dt,resC)                                      'Da
      tabase flag if reserve class resC is sharable'
 387    modulationRiskClass(ca,dt,riskC)                                     'HV
      DC energy modulation due to frequency keeping action'
 388    roundPower2MonoLevel(ca,dt)                                          'HV
      DC sent value above which one pole is stopped and therefore FIR cannot use
       round power'
 389    bipole2MonoLevel(ca,dt)                                              'HV
      DC sent value below which one pole is available to start in the opposite d
      irection and therefore SIR can use round power'
 390    MonopoleMinimum(ca,dt)                                               'Th
      e lowest level that the sent HVDC sent can ramp down to when round power i
      s not available.'
 391    HVDCControlBand(ca,dt,rd)                                            'Mo
      dulation limit of the HVDC control system apply to each HVDC direction'
 392    HVDClossScalingFactor(ca,dt)                                         'Lo
      sses used for full voltage mode are adjusted by a factor of (700/500)^2 fo
      r reduced voltage operation'
 393    sharedNFRFactor(ca,dt)                                               'Fa
      ctor that is applied to [sharedNFRLoad - sharedNFRLoadOffset] as part of t
      he calculation of sharedNFRMax'
 394    sharedNFRLoadOffset(ca,dt,isl)                                       'Is
      land load that does not provide load damping, e.g., Tiwai smelter load in 
      the South Island. Subtracted from the sharedNFRLoad in the calculation of 
      sharedNFRMax.'
 395    effectiveFactor(ca,dt,isl,resC,riskC)                                'Es
      timate of the effectiveness of the shared reserve once it has been receive
      d in the risk island.'
 396    RMTReserveLimitTo(ca,dt,isl,resC)                                    'Th
      e shared reserve limit used by RMT when it calculated the NFRs. Applied as
       a cap to the value that is calculated for SharedNFRMax.'
 397  * The follwing are calculated parameters for NMIR
 398    reserveShareEnabledOverall(ca,dt)                                    'An
       internal parameter based on the FIR and SIR enabled, and used as a switch
       in various places'
 399    modulationRisk(ca,dt)                                                'Ma
      x of HVDC energy modulation due to frequency keeping action'
 400    roPwrZoneExit(ca,dt,resC)                                            'Ab
      ove this point there is no guarantee that HVDC sent can be reduced below M
      onopoleMinimum.'
 401    sharedNFRLoad(ca,dt,isl)                                             'Is
      land load, calculated in pre-processing from the required load and the bid
      s. Used as an input to the calculation of SharedNFRMax.'
 402    sharedNFRMax(ca,dt,isl)                                              'Am
      ount of island free reserve that can be shared through HVDC'
 403    numberOfPoles(ca,dt,isl)                                             'Nu
      mber of HVDC poles avaialbe to send energy from an island'
 404    monoPoleCapacity(ca,dt,isl,br)                                       'Ma
      ximum capacity of monopole defined by min of branch capacity and monopole 
      constraint RHS'
 405    biPoleCapacity(ca,dt,isl)                                            'Ma
      ximum capacity of bipole defined by bipole constraint RHS'
 406    HVDCMax(ca,dt,isl)                                                   'Ma
      x HVDC flow based on available poles and branch group constraints RHS'
 407    HVDCCapacity(ca,dt,isl)                                              'To
      tal sent capacity of HVDC based on available poles'
 408    HVDCResistance(ca,dt,isl)                                            'Es
      timated resistance of HVDC flow sent from an island'
 409    HVDClossSegmentMW(ca,dt,isl,los)                                     'MW
       capacity of each loss segment applied to aggregated HVDC capacity'
 410    HVDClossSegmentFactor(ca,dt,isl,los)                                 'Lo
      ss factor of each loss segment applied to to aggregated HVDC loss'
 411    HVDCSentBreakPointMWFlow(ca,dt,isl,los)                              'Va
      lue of total HVDC sent power flow at the break point               --> lam
      bda segment loss model'
 412    HVDCSentBreakPointMWLoss(ca,dt,isl,los)                              'Va
      lue of ariable losses of the total HVDC sent at the break point    --> lam
      bda segment loss model'
 413    HVDCReserveBreakPointMWFlow(ca,dt,isl,los)                           'Va
      lue of total HVDC sent power flow + reserve at the break point     --> lam
      bda segment loss model'
 414    HVDCReserveBreakPointMWLoss(ca,dt,isl,los)                           'Va
      lue of post-contingent variable HVDC losses at the break point     --> lam
      bda segment loss model'
 415  * The follwing are flag and scalar for testing
 416    UseShareReserve(ca)                                                  'Fl
      ag to indicate if the reserve share is applied for CaseID'
 417   
 418  * NMIR parameters end
 419   
 420   
 421   
 422  * Post-processing
 423    useBranchFlowMIP(ca,dt)                             'Flag to indicate if
       integer constraints are needed in the branch flow model: 1 = Yes'
 424   
 425   
 426   
 427  * Real Time Pricing - Inputs
 428    useGenInitialMW(ca,dt)                                               'Fl
      ag that if set to 1 indicates that for a schedule that is solving multiple
       intervals in sequential mode'
 429    runEnrgShortfallTransfer(ca,dt)                                      'Fl
      ag that if set to 1 will enable shortfall transfer- post processing'
 430    runPriceTransfer(ca,dt)                                              'Fl
      ag that if set to 1 will enable price transfer - post processing.'
 431    replaceSurplusPrice(ca,dt)                                           'Fl
      ag that if set to 1 will enable sutplus price replacement - post processin
      g'
 432    rtdIgIncreaseLimit(ca,dt)                                            'Fo
      r price responsive Intermittent Generation (IG) the 5-minute ramp-up is ca
      pped using this parameter'
 433    useActualLoad(ca,dt)                                                 'Fl
      ag that if set to 0, initial estimated load [conformingfactor/noncomformin
      gload] is used as initial load '
 434    dontScaleNegativeLoad(ca,dt)                                         'Fl
      ag that if set to 1 --> negative load will be fixed in RTD load calculatio
      n'
 435    islandMWIPS(ca,dt,isl)                                               'Is
      land total generation at the start of RTD run'
 436    islandPDS(ca,dt,isl)                                                 'Is
      land pre-solve deviation - used to adjust RTD node demand'
 437    islandLosses(ca,dt,isl)                                              'Is
      land estimated losss - used to adjust RTD mode demand'
 438    enrgShortfallRemovalMargin(ca,dt)                                    'Th
      is small margin is added to the shortfall removed amount in order to preve
      nt any associated binding ACLine constraint'
 439    maxSolveLoops(ca,dt)                                                 'Th
      e maximum number of times that the Energy Shortfall Check will re-solve th
      e model'
 440   
 441   
 442    energyScarcityEnabled(ca,dt)                                         'Fl
      ag to apply energy scarcity (this is different from FP scarcity situation)
      '
 443    reserveScarcityEnabled(ca,dt)                                        'Fl
      ag to apply reserve scarcity (this is different from FP scarcity situation
      )'
 444    scarcityEnrgNationalFactor(ca,dt,blk)                                'Na
      tional energy scarcity factors'
 445    scarcityEnrgNationalPrice(ca,dt,blk)                                 'Na
      tional energy scarcity prices'
 446    scarcityEnrgNodeFactor(ca,dt,n,blk)                                  'No
      dal energy scarcity factors'
 447    scarcityEnrgNodeFactorPrice(ca,dt,n,blk)                             'No
      dal energy scarcity prices vs factors'
 448    scarcityEnrgNodeLimit(ca,dt,n,blk)                                   'No
      dal energy scarcity limits'
 449    scarcityEnrgNodeLimitPrice(ca,dt,n,blk)                              'No
      dal energy scarcity prices vs limits'
 450    scarcityResrvIslandLimit(ca,dt,isl,resC,blk)                         'Re
      serve scarcity limits'
 451    scarcityResrvIslandPrice(ca,dt,isl,resC,blk)                         'Re
      serve scarcity prices'
 452   
 453  * Real Time Pricing
 454    ScarcityEnrgLimit(ca,dt,n,blk)                                    'Bus e
      nergy scarcity limits'
 455    ScarcityEnrgPrice(ca,dt,n,blk)                                    'Bus e
      nergy scarcity prices vs limits'
 456   
 457   
 458  * Real Time Pricing - Calculated parameters
 459    InitialLoad(ca,dt,n)                                'Value that represen
      ts the Pnode load MW at the start of the solution interval. Depending on t
      he inputs this value will be either actual load, an operator applied overr
      ide or an estimated initial load'
 460    LoadIsScalable(ca,dt,n)                             'Binary value. If Tr
      ue then the Pnode InitialLoad will be scaled in order to calculate nodedem
      and, if False then Pnode InitialLoad will be directly assigned to nodedema
      nd'
 461    LoadScalingFactor(ca,dt,isl)                        'Island-level scalin
      g factor applied to InitialLoad in order to calculate nodedemand'
 462    TargetTotalLoad(ca,dt,isl)                          'Island-level MW loa
      d forecast'
 463    LoadCalcLosses(ca,dt,isl)                           'Island-level MW los
      ses used to calculate the Island-level load forecast from the InputIPS and
       the IslandPSD. 1st loop --> InitialLosses, 2nd solve loop --> SystemLosse
      s as calculated in section 6.3'
 464    EstimatedInitialLoad(ca,dt,n)                       'Calculated estimate
       of initial MW load, available to be used as an alternative to InputInitia
      lLoad'
 465    EstScalingFactor(ca,dt,isl)                         'Scaling applied to 
      ConformingFactor load MW in order to calculate EstimatedInitialLoad'
 466    EstLoadIsScalable(ca,dt,n)                          'Binary value. If Tr
      ue then ConformingFactor load MW will be scaled in order to calculate Esti
      matedInitialLoad. If False then EstNonScalableLoad will be assigned direct
      ly to EstimatedInitialLoad'
 467    EstNonScalableLoad(ca,dt,n)                         'For a non-conformin
      g Pnode this will be the NonConformingLoad MW input, for a conforming Pnod
      e this will be the ConformingFactor MW input if that value is negative, ot
      herwise it will be zero'
 468    EstScalableLoad(ca,dt,n)                            'For a non-conformin
      g Pnode this value will be zero. For a conforming Pnode this value will be
       the ConformingFactor if it is non-negative, otherwise this value will be 
      zero'
 469   
 470   
 471    ;
 472   
 473  Scalars
 474  * Violation penalties
 475  * These violation penalties are not specified in the model formulation doc
      ument (ver.4.3) but are specified in the
 476  * document "Resolving Infeasibilities & High Spring Washer Price situation
      s - an overview" available at www.systemoperator.co.nz/n2766,264.html
 477    deficitBusGenerationPenalty                      'Bus deficit violation 
      penalty'                      /500000/
 478    surplusBusGenerationPenalty                      'Bus surplus violation 
      penalty'                      /500000/
 479    deficitBrCstrPenalty                             'Deficit branch group c
      onstraint violation penalty'  /650000/
 480    surplusBrCstrPenalty                             'Surplus branch group c
      onstraint violation penalty'  /650000/
 481    deficitGnrcCstrPenalty                           'Deficit generic constr
      aint violation penalty'       /710000/
 482    surplusGnrcCstrPenalty                           'Surplus generic constr
      aint violation penalty'       /710000/
 483    deficitRampRatePenalty                           'Deficit ramp rate viol
      ation penalty'                /850000/
 484    surplusRampRatePenalty                           'Surplus ramp rate viol
      ation penalty'                /850000/
 485    deficitBranchFlowPenalty                         'Deficit branch flow vi
      olation penalty'              /600000/
 486    surplusBranchFlowPenalty                         'Surplus branch flow vi
      olation penalty'              /600000/
 487    deficitMnodeCstrPenalty                          'Deficit market node co
      nstraint violation penalty'   /700000/
 488    surplusMnodeCstrPenalty                          'Surplus market node co
      nstraint violation penalty'   /700000/
 489    DeficitReservePenalty_CE                         '6s and 60s CE reserve 
      deficit violation penalty'    /100000/
 490    DeficitReservePenalty_ECE                        '6s and 60s ECE reserve
       deficit violation penalty'   /800000/
 491    ;
 492   
 493   
 494  *=========================================================================
      ==========
 495  * 3. Declare model variables and constraints, and initialise constraints
 496  *=================================================================== =====
      ===========
 497   
 498  * VARIABLES - UPPER CASE
 499  * Equations, parameters and everything else - lower or mixed case
 500   
 501  * Model formulation originally based on the SPD model formulation version 
      4.3 (15 Feb 2008) and amended as indicated
 502   
 503  Variables
 504    NETBENEFIT                                       'Defined as the differe
      nce between the consumer surplus and producer costs adjusted for penalty c
      osts'
 505  * Risk
 506    ISLANDRISK(ca,dt,isl,resC,riskC)                    'Island MW risk for 
      the different reserve and risk classes'
 507    GENISLANDRISK(ca,dt,isl,o,resC,riskC)               'Island MW risk for 
      different risk setting generators'
 508    GENISLANDRISKGROUP(ca,dt,isl,rg,resC,riskC)         'Island MW risk for 
      different risk group - SPD version 11.0'
 509    HVDCGENISLANDRISK(ca,dt,isl,o,resC,riskC)           'Island MW risk for 
      different risk setting generators + HVDC'
 510    HVDCMANISLANDRISK(ca,dt,isl,resC,riskC)             'Island MW risk for 
      manual risk + HVDC'
 511    HVDCREC(ca,dt,isl)                                  'Total net pre-conti
      ngent HVDC MW flow received at each island'
 512    RISKOFFSET(ca,dt,isl,resC,riskC)                    'MW offset applied t
      o the raw risk to account for HVDC pole rampup, AUFLS, free reserve and no
      n-compliant generation'
 513   
 514  * NMIR free variables
 515    HVDCRESERVESENT(ca,dt,isl,resC,rd)                  'Total net post-cont
      ingent HVDC MW flow sent from an island applied to each reserve class'
 516    HVDCRESERVELOSS(ca,dt,isl,resC,rd)                  'Post-contingent HVD
      C loss of energy + reserve sent from an island applied to each reserve cla
      ss'
 517  * NMIR free variables end
 518   
 519  * Network
 520    ACNODENETINJECTION(ca,dt,b)                         'MW injection at bus
      es corresponding to AC nodes'
 521    ACBRANCHFLOW(ca,dt,br)                              'MW flow on undirect
      ed AC branch'
 522    ACNODEANGLE(ca,dt,b)                                'Bus voltage angle'
 523   
 524  * Demand bids can be either positive or negative from v6.0 of SPD formulat
      ion (with DSBF)
 525  * The lower bound of the free variable is updated in vSPDSolve.gms to allo
      w backward compatibility
 526  * Note the formulation now refers to this as Demand. So Demand (in SPD for
      mulation) = Purchase (in vSPD code)
 527    PURCHASE(ca,dt,bd)                                  'Total MW purchase s
      cheduled'
 528    PURCHASEBLOCK(ca,dt,bd,blk)                         'MW purchase schedul
      ed from the individual trade blocks of a bid'
 529   
 530    ;
 531   
 532  Positive variables
 533  * system cost and benefit
 534    SYSTEMBENEFIT(ca,dt)                                'Total purchase bid 
      benefit by period'
 535    SYSTEMCOST(ca,dt)                                   'Total generation an
      d reserve costs by period'
 536    SYSTEMPENALTYCOST(ca,dt)                            'Total violation cos
      ts by period'
 537    TOTALPENALTYCOST                                 'Total violation costs'
 538    SCARCITYCOST(ca,dt)                                 'Total scarcity Cost
      '
 539  * scarcity variables
 540    ENERGYSCARCITYBLK(ca,dt,n,blk)                      'Block energy scarci
      ty cleared at bus b'
 541    ENERGYSCARCITYNODE(ca,dt,n)                         'Energy scarcity cle
      ared at bus b'
 542   
 543    RESERVESHORTFALLBLK(ca,dt,isl,resC,riskC,blk)       'Block reserve short
      fall by risk class (excluding genrisk and HVDC secondary risk)'
 544    RESERVESHORTFALL(ca,dt,isl,resC,riskC)              'Reserve shortfall b
      y risk class (excluding genris kand HVDC secondary risk)'
 545   
 546    RESERVESHORTFALLUNITBLK(ca,dt,isl,o,resC,riskC,blk) 'Block reserve short
      fall by risk generation unit (applied to genrisk and HVDC secondary risk)'
 547    RESERVESHORTFALLUNIT(ca,dt,isl,o,resC,riskC)        'Reserve shortfall b
      y risk generation unit (applied to genrisk and HVDC secondary risk)'
 548   
 549    RESERVESHORTFALLGROUPBLK(ca,dt,isl,rg,resC,riskC,blk) 'Block Reserve sho
      rtfall by risk group (applied to genrisk and HVDC secondary risk)'
 550    RESERVESHORTFALLGROUP(ca,dt,isl,rg,resC,riskC)        'Reserve shortfall
       by risk risk group (applied to genrisk and HVDC secondary risk)'
 551   
 552  * Generation
 553    GENERATION(ca,dt,o)                                 'Total MW generation
       scheduled from an offer'
 554    GENERATIONBLOCK(ca,dt,o,blk)                        'MW generation sched
      uled from the individual trade blocks of an offer'
 555    GENERATIONUPDELTA(ca,dt,o)                          'Total increase in M
      W generation scheduled from an offer'
 556    GENERATIONDNDELTA(ca,dt,o)                          'Total decrease in M
      W generation scheduled from an offer'
 557  * Reserve
 558    RESERVE(ca,dt,o,resC,resT)                          'MW Reserve schedule
      d from an offer'
 559    RESERVEBLOCK(ca,dt,o,blk,resC,resT)                 'MW Reserve schedule
      d from the individual trade blocks of an offer'
 560    ISLANDRESERVE(ca,dt,isl,resC)                       'Total island cleare
      d reserve'
 561   
 562  * NMIR positive variables
 563    SHAREDNFR(ca,dt,isl)                                'Amount of free load
       reserve being shared from an island'
 564    SHAREDRESERVE(ca,dt,isl,resC)                       'Amount of cleared r
      eserve from an island being shared to the other island'
 565    HVDCSENT(ca,dt,isl)                                 'Directed pre-contin
      gent HVDC MW flow sent from each island'
 566    HVDCSENTLOSS(ca,dt,isl)                             'Energy loss for  HV
      DC flow sent from an island'
 567    RESERVESHAREEFFECTIVE(ca,dt,isl,resC,riskC)         'Effective shared re
      serve received at island after adjusted for losses and effectiveness facto
      r'
 568    RESERVESHARERECEIVED(ca,dt,isl,resC,rd)             'Directed shared res
      erve received at island after adjusted for losses'
 569    RESERVESHARESENT(ca,dt,isl,resC,rd)                 'Directed shared res
      erve sent from and island'
 570    RESERVESHAREPENALTY(ca,dt)                          'Penalty cost for ex
      cessive reserve sharing'
 571  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation of RESERVES
      HAREPENALTY
 572    RESERVESHAREEFFECTIVE_CE(ca,dt,isl,resC)            'Max effective share
      d reserve for CE risk received at island after adjusted for losses and eff
      ectiveness factor'
 573    RESERVESHAREEFFECTIVE_ECE(ca,dt,isl,resC)           'Max effective share
      d reserve for ECE risk received at island after adjusted for losses and ef
      fectiveness factor'
 574  * NMIR positive variables end
 575   
 576  * Network
 577    HVDCLINKFLOW(ca,dt,br)                              'MW flow at the send
      ing end scheduled for the HVDC link'
 578    HVDCLINKLOSSES(ca,dt,br)                            'MW losses on the HV
      DC link'
 579    LAMBDA(ca,dt,br,bp)                                 'Non-negative weight
       applied to the breakpoint of the HVDC link'
 580    ACBRANCHFLOWDIRECTED(ca,dt,br,fd)                   'MW flow on the dire
      cted branch'
 581    ACBRANCHLOSSESDIRECTED(ca,dt,br,fd)                 'MW losses on the di
      rected branch'
 582    ACBRANCHFLOWBLOCKDIRECTED(ca,dt,br,los,fd)          'MW flow on the diff
      erent blocks of the loss curve'
 583    ACBRANCHLOSSESBLOCKDIRECTED(ca,dt,br,los,fd)        'MW losses on the di
      fferent blocks of the loss curve'
 584  * Violations
 585    DEFICITBUSGENERATION(ca,dt,b)                       'Deficit generation 
      at a bus in MW'
 586    SURPLUSBUSGENERATION(ca,dt,b)                       'Surplus generation 
      at a bus in MW'
 587    DEFICITBRANCHSECURITYCONSTRAINT(ca,dt,brCstr)       'Deficit branch secu
      rity constraint in MW'
 588    SURPLUSBRANCHSECURITYCONSTRAINT(ca,dt,brCstr)       'Surplus branch secu
      rity constraint in MW'
 589    DEFICITRAMPRATE(ca,dt,o)                            'Deficit ramp rate i
      n MW'
 590    SURPLUSRAMPRATE(ca,dt,o)                            'Surplus ramp rate i
      n MW'
 591    DEFICITBRANCHFLOW(ca,dt,br)                         'Deficit branch flow
       in MW'
 592    SURPLUSBRANCHFLOW(ca,dt,br)                         'Surplus branch flow
       in MW'
 593    DEFICITMNODECONSTRAINT(ca,dt,MnodeCstr)             'Deficit market node
       constraint in MW'
 594    SURPLUSMNODECONSTRAINT(ca,dt,MnodeCstr)             'Surplus market node
       constraint in MW'
 595  * Seperate CE and ECE violation variables to support different CVPs for CE
       and ECE
 596    DEFICITRESERVE_CE(ca,dt,isl,resC)                   'Deficit CE reserve 
      generation in each island for each reserve class in MW'
 597    DEFICITRESERVE_ECE(ca,dt,isl,resC)                  'Deficit ECE reserve
       generation in each island for each reserve class in MW'
 598   
 599    ;
 600   
 601  Binary variables
 602  * NMIR binary variables
 603    HVDCSENDING(ca,dt,isl)                              'Binary variable ind
      icating if island isl is the sending end of the HVDC flow. 1 = Yes.'
 604    INZONE(ca,dt,isl,resC,z)                            'Binary variable (1 
      = Yes ) indicating if the HVDC flow is in a zone (z) that facilitates the 
      appropriate quantity of shared reserves in the reverse direction to the HV
      DC sending island isl for reserve class resC.'
 605    HVDCSENTINSEGMENT(ca,dt,isl,los)                    'Binary variable to 
      decide which loss segment HVDC flow sent from an island falling into --> a
      ctive segment loss model'
 606  * Discete dispachable demand block binary variables
 607    PURCHASEBLOCKBINARY(ca,dt,bd,blk)                   'Binary variable to 
      decide if a purchase block is cleared either fully or nothing at all'
 608  * HVDC Secondary risk should not be covered if HVDC sending is zero. The f
      ollowing binary variable is to enforced that (Update from RTP phase 4)
 609    HVDCSENDZERO(ca,dt,isl)                              'Binary variable in
      dicating if island is NOT the sending energy through HVDC flow. 1 = Yes.'
 610    ;
 611   
 612  SOS1 Variables
 613    ACBRANCHFLOWDIRECTED_INTEGER(ca,dt,br,fd)           'Integer variables u
      sed to select branch flow direction in the event of circular branch flows 
      (3.8.1)'
 614    HVDCLINKFLOWDIRECTED_INTEGER(ca,dt,fd)              'Integer variables u
      sed to select the HVDC branch flow direction on in the event of S->N (forw
      ard) and N->S (reverse) flows (3.8.2)'
 615  * Integer varaible to prevent intra-pole circulating branch flows
 616    HVDCPOLEFLOW_INTEGER(ca,dt,pole,fd)                 'Integer variables u
      sed to select the HVDC pole flow direction on in the event of circulating 
      branch flows within a pole'
 617    ;
 618   
 619  SOS2 Variables
 620    LAMBDAINTEGER(ca,dt,br,bp)                          'Integer variables u
      sed to enforce the piecewise linear loss approxiamtion on the HVDC links'
 621    LAMBDAHVDCENERGY(ca,dt,isl,bp)                      'Integer variables u
      sed to enforce the piecewise linear loss approxiamtion (NMIR) on the HVDC 
      links'
 622    LAMBDAHVDCRESERVE(ca,dt,isl,resC,rd,rsbp)           'Integer variables u
      sed to enforce the piecewise linear loss approxiamtion (NMIR) on the HVDC 
      links'
 623    ;
 624   
 625   
 626  Equations
 627    ObjectiveFunction                                'Objective function of 
      the dispatch model (5.1.1.1)'
 628  * Cost and benefit breaking down
 629    SystemBenefitDefinition(ca,dt)                      'Defined as the sum 
      of the purcahse bid benefit'
 630    SystemCostDefinition(ca,dt)                         'Defined as the sum 
      of the generation and reserve costs'
 631    SystemPenaltyCostDefinition(ca,dt)                  'Defined as the sum 
      of the individual violation costs'
 632    TotalViolationCostDefinition                     'Deined as the sume of 
      period violation cost - (for reporting)'
 633    TotalScarcityCostDefinition(ca,dt)                  'Deined as the sume 
      of scarcity cost'
 634   
 635   
 636  * Offer and purchase constraints
 637    GenerationChangeUpDown(ca,dt,o)                     'Calculate the MW of
       generation increase/decrease for RTD and RTDP (6.1.1.2)'
 638    GenerationOfferDefintion(ca,dt,o)                   'Definition of gener
      ation provided by an offer (6.1.1.3)'
 639    DemBidDiscrete(ca,dt,bd,blk)                        'Definition of discr
      ete purchase mode (6.1.1.7)'
 640    DemBidDefintion(ca,dt,bd)                           'Definition of purch
      ase provided by a bid (6.1.1.8)'
 641    EnergyScarcityDefinition(ca,dt,n)                   'Definition of bus e
      nergy scarcity (6.1.1.10)'
 642   
 643  * Ramping constraints
 644    GenerationRampUp(ca,dt,o)                           'Maximum movement of
       the generator upwards due to up ramp rate (6.2.1.1)'
 645    GenerationRampDown(ca,dt,o)                         'Maximum movement of
       the generator downwards due to down ramp rate (6.2.1.2)'
 646   
 647   
 648   
 649  * HVDC transmission constraints
 650    HVDClinkMaximumFlow(ca,dt,br)                       'Maximum flow on eac
      h HVDC link (6.3.1.1)'
 651    HVDClinkLossDefinition(ca,dt,br)                    'Definition of losse
      s on the HVDC link (6.3.1.2)'
 652    HVDClinkFlowDefinition(ca,dt,br)                    'Definition of MW fl
      ow on the HVDC link (6.3.1.3)'
 653    LambdaDefinition(ca,dt,br)                          'Definition of weigh
      ting factor (6.3.1.4)'
 654   
 655  * HVDC transmission constraints to resolve non-physical loss and circular 
      flow
 656  * These constraints are not explicitly formulated in SPD formulation
 657  * But you can find the description in "Post-Solve Checks"
 658    HVDClinkFlowIntegerDefinition1(ca,dt)               'Definition 1 of the
       integer HVDC link flow variable )'
 659    HVDClinkFlowIntegerDefinition2(ca,dt,fd)            'Definition 2 of the
       integer HVDC link flow variable'
 660    HVDClinkFlowIntegerDefinition3(ca,dt,pole)          'Definition 4 of the
       HVDC pole integer varaible to prevent intra-pole circulating branch flows
      '
 661    HVDClinkFlowIntegerDefinition4(ca,dt,pole,fd)       'Definition 4 of the
       HVDC pole integer varaible to prevent intra-pole circulating branch flows
      '
 662    LambdaIntegerDefinition1(ca,dt,br)                  'Definition of weigh
      ting factor when branch integer constraints are needed'
 663    LambdaIntegerDefinition2(ca,dt,br,los)              'Definition of weigh
      ting factor when branch integer constraints are needed'
 664   
 665  * AC transmission constraints
 666    ACnodeNetInjectionDefinition1(ca,dt,b)              '1st definition of t
      he net injection at buses corresponding to AC nodes (6.4.1.1)'
 667    ACnodeNetInjectionDefinition2(ca,dt,b)              '2nd definition of t
      he net injection at buses corresponding to AC nodes (6.4.1.2)'
 668    ACBranchMaximumFlow(ca,dt,br,fd)                    'Maximum flow on the
       AC branch (6.4.1.3)'
 669    ACBranchFlowDefinition(ca,dt,br)                    'Relationship betwee
      n directed and undirected branch flow variables (6.4.1.4)'
 670    LinearLoadFlow(ca,dt,br)                            'Equation that descr
      ibes the linear load flow (6.4.1.5)'
 671    ACBranchBlockLimit(ca,dt,br,los,fd)                 'Limit on each AC br
      anch flow block (6.4.1.6)'
 672    ACDirectedBranchFlowDefinition(ca,dt,br,fd)         'Composition of the 
      directed branch flow from the block branch flow (6.4.1.7)'
 673    ACBranchLossCalculation(ca,dt,br,los,fd)            'Calculation of the 
      losses in each loss segment (6.4.1.8)'
 674    ACDirectedBranchLossDefinition(ca,dt,br,fd)         'Composition of the 
      directed branch losses from the block branch losses (6.4.1.9)'
 675   
 676  * AC transmission constraints to resolve circular flow
 677    ACDirectedBranchFlowIntegerDefinition1(ca,dt,br)    'Integer constraint 
      to enforce a flow direction on loss AC branches in the presence of circula
      r branch flows or non-physical losses'
 678    ACDirectedBranchFlowIntegerDefinition2(ca,dt,br,fd) 'Integer constraint 
      to enforce a flow direction on loss AC branches in the presence of circula
      r branch flows or non-physical losses'
 679   
 680  * Risk
 681    RiskOffsetCalculation_DCCE(ca,dt,isl,resC,riskC)          '6.5.1.1 : Cal
      culation of the risk offset variable for the DCCE risk class.'
 682    RiskOffsetCalculation_DCECE(ca,dt,isl,resC,riskC)         '6.5.1.3 : Cal
      culation of the risk offset variable for the DCECE risk class.'
 683    HVDCRecCalculation(ca,dt,isl)                             '6.5.1.4 : Cal
      culation of the net received HVDC MW flow into an island.'
 684    HVDCIslandRiskCalculation(ca,dt,isl,resC,riskC)           '6.5.1.5 : Cal
      culation of the island risk for a DCCE and DCECE.'
 685   
 686    GenIslandRiskCalculation(ca,dt,isl,o,resC,riskC)          '6.5.1.6 : Cal
      culation of the island risk for risk setting generators.'
 687    GenIslandRiskCalculation_1(ca,dt,isl,o,resC,riskC)        '6.5.1.6 : Cal
      culation of the island risk for risk setting generators.'
 688    ManualIslandRiskCalculation(ca,dt,isl,resC,riskC)         '6.5.1.7 : Cal
      culation of the island risk based on manual specifications.'
 689    HVDCSendMustZeroBinaryDefinition(ca,dt,isl)               '6.5.1.8: Defi
      ne a flag to show if HVDC sending zero MW flow from an island '
 690   
 691    HVDCIslandSecRiskCalculation_GEN(ca,dt,isl,o,resC,riskC)     '6.5.1.9 : 
      Calculation of the island risk for an HVDC secondary risk to an AC risk.'
 692    HVDCIslandSecRiskCalculation_GEN_1(ca,dt,isl,o,resC,riskC)   '6.5.1.9 : 
      Calculation of the island risk for an HVDC secondary risk to an AC risk.'
 693    HVDCIslandSecRiskCalculation_Manual(ca,dt,isl,resC,riskC)    '6.5.1.10: 
      Calculation of the island risk for an HVDC secondary risk to a manual risk
      .'
 694    HVDCIslandSecRiskCalculation_Manu_1(ca,dt,isl,resC,riskC)    '6.5.1.10: 
      Calculation of the island risk for an HVDC secondary risk to a manual risk
      .'
 695    GenIslandRiskGroupCalculation(ca,dt,isl,rg,resC,riskC)       '6.5.1.11: 
      Calculation of the island risk of risk group.'
 696    GenIslandRiskGroupCalculation_1(ca,dt,isl,rg,resC,riskC)     '6.5.1.11: 
      Calculation of the risk of risk group.'
 697   
 698  * General NMIR equations
 699    EffectiveReserveShareCalculation(ca,dt,isl,resC,riskC)                  
               '6.5.2.1 : Calculation of effective shared reserve'
 700    SharedReserveLimitByClearedReserve(ca,dt,isl,resC)                      
               '6.5.2.2 : Shared offered reserve is limited by cleared reserved'
 701    BothClearedAndFreeReserveCanBeShared(ca,dt,isl,resC,rd)                 
               '6.5.2.4 : Shared reserve is covered by cleared reserved and shar
      eable free reserve'
 702    ReserveShareSentLimitByHVDCControlBand(ca,dt,isl,resC,rd)               
               '6.5.2.5 : Reserve share sent from an island is limited by HVDC c
      ontrol band'
 703    FwdReserveShareSentLimitByHVDCCapacity(ca,dt,isl,resC,rd)               
               '6.5.2.6 : Forward reserve share sent from an island is limited b
      y HVDC capacity'
 704    ReverseReserveOnlyToEnergySendingIsland(ca,dt,isl,resC,rd)              
               '6.5.2.7 : Shared reserve sent in reverse direction is possible o
      nly if the island is not sending energy through HVDC'
 705    ReverseReserveShareLimitByHVDCControlBand(ca,dt,isl,resC,rd)            
               '6.5.2.8 : Reverse reserve share recieved at an island is limited
       by HVDC control band'
 706    ForwardReserveOnlyToEnergyReceivingIsland(ca,dt,isl,resC,rd)            
               '6.5.2.9 : Forward received reserve is possible if in the same di
      rection of HVDC '
 707    ReverseReserveLimitInReserveZone(ca,dt,isl,resC,rd,z)                   
               '6.5.2.10: Reverse reserve constraint if HVDC sent flow in revers
      e zone'
 708    ZeroReserveInNoReserveZone(ca,dt,isl,resC,z)                            
               '6.5.2.11 & 6.5.2.18: No reverse reserve if HVDC sent flow in no 
      reverse zone and no forward reserve if round power disabled'
 709    OnlyOneActiveHVDCZoneForEachReserveClass(ca,dt,resC)                    
               '6.5.2.12: Across both island, one and only one zone is active fo
      r each reserve class'
 710    ZeroSentHVDCFlowForNonSendingIsland(ca,dt,isl)                          
               '6.5.2.13: Directed HVDC sent from an island, if non-zero, must f
      all in a zone for each reserve class'
 711    RoundPowerZoneSentHVDCUpperLimit(ca,dt,isl,resC,z)                      
               '6.5.2.14: Directed HVDC sent from an island <= RoundPowerZoneExi
      t level if in round power zone of that island'
 712    HVDCSendingIslandDefinition(ca,dt,isl,resC)                             
               '6.5.2.15: An island is HVDC sending island if HVDC flow sent is 
      in one of the three zones for each reserve class '
 713    OnlyOneSendingIslandExists(ca,dt)                                       
               '6.5.2.19: One and only one island is HVDC sending island'
 714    HVDCSentCalculation(ca,dt,isl)                                          
               '6.5.2.20: Total HVDC sent from each island'
 715   
 716  * Lamda loss model
 717    HVDCFlowAccountedForForwardReserve(ca,dt,isl,resC,rd)                   
               '6.5.2.21: HVDC flow sent from an island taking into account forw
      ard sent reserve'
 718    ForwardReserveReceivedAtHVDCReceivingIsland(ca,dt,isl,resC,rd)          
               '6.5.2.22: Forward reserve RECEIVED at an HVDC receiving island'
 719    HVDCFlowAccountedForReverseReserve(ca,dt,isl,resC,rd)                   
               '6.5.2.23: HVDC flow sent from an island taking into account reve
      rse received reserve'
 720    ReverseReserveReceivedAtHVDCSendingIsland(ca,dt,isl,resC,rd)            
               '6.5.2.24: Reverse reserve RECEIVED at an HVDC sending island'
 721    HVDCSentEnergyLambdaDefinition(ca,dt,isl)                               
               '6.5.2.25: Definition of weight factor for total HVDC energy sent
       from an island'
 722    HVDCSentEnergyFlowDefinition(ca,dt,isl)                                 
               '6.5.2.26: Lambda definition of total HVDC energy flow sent from 
      an island'
 723    HVDCSentEnergyLossesDefinition(ca,dt,isl)                               
               '6.5.2.27: Lambda definition of total loss of HVDC energy sent fr
      om an island'
 724    HVDCSentReserveLambdaDefinition(ca,dt,isl,resC,rd)                      
               '6.5.2.28: Definition of weight factor for total HVDC+reserve sen
      t from an island'
 725    HVDCSentReserveFlowDefinition(ca,dt,isl,resC,rd)                        
               '6.5.2.29: Lambda definition of Reserse + Energy flow on HVDC sen
      t from an island'
 726    HVDCSentReserveLossesDefinition(ca,dt,isl,resC,rd)                      
               '6.5.2.30: Lambda definition of Reserse + Energy loss on HVDC sen
      t from an island'
 727   
 728  * Reserve share penalty
 729  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation
 730    ReserveShareEffective_CE_Calculation(ca,dt,isl,resC,riskC)              
               '6.5.2.31: Calculate max effective shared reserve for CE risk rec
      eived at island'
 731    ReserveShareEffective_ECE_Calculation(ca,dt,isl,resC,riskC)             
               '6.5.2.31: Calculate max effective shared reserve for ECE risk re
      ceived at island'
 732    ExcessReserveSharePenalty(ca,dt)                                        
               '6.5.2.31: Constraint to avoid excessive reserve share'
 733   
 734  * Reserve
 735    PLSRReserveProportionMaximum(ca,dt,o,blk,resC,resT)                     
               '6.5.3.1: Maximum PLSR as a proportion of the block MW'
 736    ReserveInterruptibleOfferLimit(ca,dt,o,bd,resC,resT)                    
               '6.5.3.3: Cleared IL reserve is constrained by cleared dispatchab
      le demand'
 737    ReserveOfferDefinition(ca,dt,o,resC,resT)                               
               '6.5.3.4: Definition of the reserve offers of different classes a
      nd types'
 738    EnergyAndReserveMaximum(ca,dt,o,resC)                                   
               '6.5.3.5: Definition of maximum energy and reserves from each gen
      erator'
 739   
 740  * Reserve scarcity/shortfall
 741    HVDCRiskReserveShortFallCalculation(ca,dt,isl,resC,RiskC)               
               '6.5.4.2: Total Reserve Shortfall for DCCE risk'
 742    ManualRiskReserveShortFallCalculation(ca,dt,isl,resC,RiskC)             
               '6.5.4.2: Total Reserve Shortfall for Manual risk'
 743    GenRiskReserveShortFallCalculation(ca,dt,isl,o,resC,RiskC)              
               '6.5.4.2: Total Reserve Shortfall for generation risk unit'
 744    HVDCsecRiskReserveShortFallCalculation(ca,dt,isl,o,resC,RiskC)          
               '6.5.4.2: Total Reserve Shortfall for generation unit + HVDC risk
      '
 745    HVDCsecManualRiskReserveShortFallCalculation(ca,dt,isl,resC,RiskC)      
                '6.5.4.2: Total Reserve Shortfall for Manual risk + HVDC risk'
 746    RiskGroupReserveShortFallCalculation(ca,dt,isl,rg,resC,RiskC)           
                '6.5.4.2: Total Reserve Shortfall for Risk Group'
 747   
 748  * Matching of reserve requirement and availability
 749    IslandReserveCalculation(ca,dt,isl,resC)                                
               '6.5.5.1: Calculate total island cleared reserve'
 750    SupplyDemandReserveRequirement(ca,dt,isl,resC,riskC)                    
               '6.5.5.2&3: Matching of reserve supply and demand'
 751   
 752  * Branch security constraints
 753    BranchSecurityConstraintLE(ca,dt,brCstr)                                
               '6.6.1.5: Branch security constraint with LE sense'
 754    BranchSecurityConstraintGE(ca,dt,brCstr)                                
               '6.6.1.5: Branch security constraint with GE sense'
 755    BranchSecurityConstraintEQ(ca,dt,brCstr)                                
               '6.6.1.5: Branch security constraint with EQ sense'
 756   
 757  * Market node security constraints
 758    MNodeSecurityConstraintLE(ca,dt,MnodeCstr)                              
               '6.6.1.7: Market node security constraint with LE sense'
 759    MNodeSecurityConstraintGE(ca,dt,MnodeCstr)                              
               '6.6.1.7: Market node security constraint with GE sense'
 760    MNodeSecurityConstraintEQ(ca,dt,MnodeCstr)                              
               '6.6.1.7: Market node security constraint with EQ sense'
 761   
 762    ;
 763   
 764  * OBJECTIVE FUNCTION (5.1.1.1)
 765  ObjectiveFunction..
 766    NETBENEFIT
 767  =e=
 768    sum[ t, SYSTEMBENEFIT(t) - SYSTEMCOST(t) - SCARCITYCOST(t)
 769          - SYSTEMPENALTYCOST(t) - RESERVESHAREPENALTY(t) ]
 770    + sum[(t,n,blk), ScarcityEnrgLimit(t,n,blk) * ScarcityEnrgPrice(t,n,blk)
      ]
 771    ;
 772   
 773  * Defined as the net sum of generation cost + reserve cost
 774  SystemCostDefinition(t)..
 775    SYSTEMCOST(t)
 776  =e=
 777    sum[ genOfrBlk(t,o,blk)
 778       , GENERATIONBLOCK(genOfrBlk)
 779       * enrgOfrPrice(genOfrBlk) ]
 780  + sum[ resOfrBlk(t,o,blk,resC,resT)
 781       , RESERVEBLOCK(resOfrBlk)
 782       * resrvOfrPrice(resOfrBlk) ]
 783    ;
 784   
 785  * Defined as the net sum of dispatchable load benefit
 786  SystemBenefitDefinition(t)..
 787    SYSTEMBENEFIT(t)
 788  =e=
 789    sum[ demBidBlk(t,bd,blk)
 790       , PURCHASEBLOCK(demBidBlk)
 791       * demBidPrice(demBidBlk) ]
 792    ;
 793   
 794  * Defined as the sum of the individual violation costs
 795  SystemPenaltyCostDefinition(t)..
 796    SYSTEMPENALTYCOST(t)
 797  =e=
 798    sum[ bus(t,b), deficitBusGenerationPenalty * DEFICITBUSGENERATION(bus)
 799                      + surplusBusGenerationPenalty * SURPLUSBUSGENERATION(b
      us) ]
 800   
 801  + sum[ branch(t,br), surplusBranchFlowPenalty * SURPLUSBRANCHFLOW(branch) 
      ]
 802   
 803  + sum[ offer(t,o), deficitRampRatePenalty * DEFICITRAMPRATE(offer)
 804                        + surplusRampRatePenalty * SURPLUSRAMPRATE(Offer) ]
 805   
 806  + sum[ BranchConstraint(t,brCstr)
 807       , deficitBrCstrPenalty * DEFICITBRANCHSECURITYCONSTRAINT(t,brCstr)
 808       + surplusBrCstrPenalty * SURPLUSBRANCHSECURITYCONSTRAINT(t,brCstr) ]
 809   
 810  + sum[ MNodeConstraint(t,MnodeCstr)
 811       , deficitMnodeCstrPenalty * DEFICITMNODECONSTRAINT(MNodeConstraint)
 812       + surplusMnodeCstrPenalty * SURPLUSMNODECONSTRAINT(MNodeConstraint) ]
 813   
 814  + sum[ (isl,resC)
 815         , [DeficitReservePenalty_CE  * DEFICITRESERVE_CE(t,isl,resC) ]
 816         + [DeficitReservePenalty_ECE * DEFICITRESERVE_ECE(t,isl,resC)]
 817       ]
 818   
 819  + sum[ o $ { (StudyMode(t) = 101) or (StudyMode(t) = 201) }
 820           , 0.0005 * ( GENERATIONUPDELTA(t,o) + GENERATIONDNDELTA(t,o) )
 821       ]
 822    ;
 823   
 824  * Defined as the sum of the individual violation costs (for reporting)
 825  TotalViolationCostDefinition..
 826    TOTALPENALTYCOST =e= sum[ t, SYSTEMPENALTYCOST(t) ] ;
 827   
 828  * Deined as the sume of scarcity cost
 829  TotalScarcityCostDefinition(t)..
 830    SCARCITYCOST(t)
 831  =e=
 832    sum[ (n,blk), ScarcityEnrgPrice(t,n,blk) * ENERGYSCARCITYBLK(t,n,blk) ]
 833   
 834  + sum[ (isl,resC,riskC,blk) $ HVDCrisk(riskC)
 835       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 836        * RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
 837   
 838  + sum[ (isl,resC,riskC,blk) $ ManualRisk(riskC)
 839       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 840       * RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
 841   
 842  +  sum[ (isl,o,resC,riskC,blk) $ { GenRisk(riskC)
 843                                 and islandRiskGenerator(t,isl,o) }
 844       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 845       * RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
 846   
 847  +  sum[ (isl,o,resC,riskC,blk) $ { HVDCsecRisk(riskC)
 848                                 and islandRiskGenerator(t,isl,o) }
 849       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 850       * RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
 851   
 852  +  sum[ (isl, resC,riskC,blk) $ HVDCsecRisk(riskC)
 853       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 854       * RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
 855   
 856  +  sum[ (isl,rg,resC,riskC,blk) $ GenRisk(riskC)
 857       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 858       * RESERVESHORTFALLGROUPBLK(t,isl,rg,resC,riskC,blk) ]
 859  ;
 860   
 861   
 862  *======= GENERATION AND LOAD CONSTRAINTS =================================
      ======
 863   
 864  * Calculate the MW of generation increase/decrease for RTD and RTDP (6.1.1
      .2)'
 865  GenerationChangeUpDown(t,o) $ { (StudyMode(t) = 101) or (StudyMode(t) = 20
      1) }..
 866    GENERATIONUPDELTA(t,o) - GENERATIONDNDELTA(t,o)
 867  =e=
 868    GENERATION(t,o) - generationStart(t,o);
 869   
 870  * Definition of generation provided by an offer (6.1.1.3)
 871  GenerationOfferDefintion(offer(t,o))..
 872    GENERATION(offer)
 873  =e=
 874    sum[ genOfrBlk(offer,blk), GENERATIONBLOCK(offer,blk) ]
 875    ;
 876   
 877  * Definition of discrete purchase mode (6.1.1.7)
 878  DemBidDiscrete(bid(t,bd),blk) $ { bidParameter(bid,'discrete') = 1 }..
 879    PURCHASEBLOCK(bid,blk)
 880  =e=
 881    PURCHASEBLOCKBINARY(bid,blk) * demBidMW(bid,blk)
 882    ;
 883   
 884  * Definition of purchase provided by a bid (6.1.1.8)
 885  DemBidDefintion(bid(t,bd))..
 886    PURCHASE(bid)
 887  =e=
 888    sum[ demBidBlk(bid,blk), PURCHASEBLOCK(bid,blk) ]
 889    ;
 890   
 891  * Definition of bus energy scarcity (6.1.1.10)
 892  EnergyScarcityDefinition(t,n)..
 893    ENERGYSCARCITYNODE(t,n)
 894  =e=
 895    sum[ blk, ENERGYSCARCITYBLK(t,n,blk) ]
 896    ;
 897   
 898  *======= GENERATION AND LOAD CONSTRAINTS END =============================
      ======
 899   
 900   
 901   
 902  *======= RAMPING CONSTRAINTS =============================================
      ======
 903  * Note: The CoefficientForRampRate in SPD formulation  = intervalDuration 
      / 60
 904   
 905  * Maximum movement of the generator downwards due to up ramp rate (6.2.1.1
      )
 906  GenerationRampUp(t,o) $ { posEnrgOfr(t,o) and primaryOffer(t,o) }..
 907    sum[ o1 $ PrimarySecondaryOffer(t,o,o1), GENERATION(t,o1) ]
 908  + GENERATION(t,o) - DEFICITRAMPRATE(t,o)
 909  =l=
 910    generationStart(t,o) + (rampRateUp(t,o) * intervalDuration(t) / 60)
 911    ;
 912   
 913  * Maximum movement of the generator downwards due to down ramp rate (6.2.1
      .2)
 914  GenerationRampDown(t,o) $ { posEnrgOfr(t,o) and primaryOffer(t,o) }..
 915    sum[ o1 $ PrimarySecondaryOffer(t,o,o1), GENERATION(t,o1) ]
 916  + GENERATION(t,o) + SURPLUSRAMPRATE(t,o)
 917  =g=
 918    generationStart(t,o) - (rampRateDn(t,o) * intervalDuration(t) / 60)
 919    ;
 920   
 921  *======= RAMPING CONSTRAINTS END==========================================
      ======
 922   
 923   
 924  *======= HVDC TRANSMISSION EQUATIONS =====================================
      ======
 925   
 926  * Maximum flow on each HVDC link (6.3.1.1)
 927  HVDClinkMaximumFlow(HVDClink(t,br)) $ useHVDCbranchLimits ..
 928    HVDCLINKFLOW(HVDClink)
 929  =l=
 930    sum[ fd $ ( ord(fd)=1 ), branchCapacity(HVDClink,fd) ]
 931    ;
 932   
 933  * Definition of losses on the HVDC link (6.3.1.2)
 934  HVDClinkLossDefinition(HVDClink(t,br))..
 935    HVDCLINKLOSSES(HVDClink)
 936  =e=
 937    sum[ validLossSegment(HVDClink,bp,fd)
 938       , HVDCBreakPointMWLoss(HVDClink,bp,fd) * LAMBDA(HVDClink,bp) ]
 939    ;
 940   
 941  * Definition of MW flow on the HVDC link (6.3.1.3)
 942  HVDClinkFlowDefinition(HVDClink(t,br))..
 943    HVDCLINKFLOW(HVDClink)
 944  =e=
 945    sum[ validLossSegment(HVDClink,bp,fd)
 946    , HVDCBreakPointMWFlow(HVDClink,bp,fd) * LAMBDA(HVDClink,bp) ]
 947    ;
 948   
 949  * Definition of weighting factor (6.3.1.4)
 950  LambdaDefinition(HVDClink(t,br))..
 951    sum(validLossSegment(HVDClink,bp,fd), LAMBDA(HVDClink,bp))
 952  =e=
 953    1
 954    ;
 955   
 956   
 957  *======= HVDC TRANSMISSION EQUATIONS END =================================
      ======
 958   
 959   
 960   
 961  *======= HVDC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES ==================
      ======
 962  * HVDC transmission constraints to resolve non-physical loss and circular 
      flow
 963  * These constraints are not explicitly formulated in SPD formulation
 964  * But you can find the description in "Post-Solve Checks
 965   
 966  * Definition 1 of the integer HVDC link flow variable
 967  * HVDC_North_Flow + HVDC_South_Flow
 968  * = BEN_HAY_1_Flow + BEN_HAY_2_Flow + HAY_BEN_1_Flow + HAY_BEN_2_Flow
 969  HVDClinkFlowIntegerDefinition1(t) $ { UseBranchFlowMIP(t) and
 970                                        resolveCircularBranchFlows }..
 971    sum[ fd, HVDCLINKFLOWDIRECTED_INTEGER(t,fd) ]
 972  =e=
 973    sum[ HVDCpoleDirection(HVDClink(t,br),fd), HVDCLINKFLOW(HVDClink) ]
 974    ;
 975   
 976  * Definition 2 of the integer HVDC link flow variable
 977  * HVDC_North_Flow = BEN_HAY_1_Flow + BEN_HAY_2_Flow
 978  * HVDC_South_Flow = HAY_BEN_1_Flow + HAY_BEN_2_Flow
 979  HVDClinkFlowIntegerDefinition2(t,fd) $ { UseBranchFlowMIP(t) and
 980                                           resolveCircularBranchFlows }..
 981    HVDCLINKFLOWDIRECTED_INTEGER(t,fd)
 982  =e=
 983    sum[ HVDCpoleDirection(HVDClink(t,br),fd), HVDCLINKFLOW(HVDClink) ]
 984    ;
 985   
 986  * Definition of the integer HVDC pole flow variable for intra-pole circula
      ting branch flows
 987  * Pole1_North_Flow + Pole1_South_Flow = BEN_HAY_1_Flow + HAY_BEN_1_Flow
 988  * Pole2_North_Flow + Pole2_South_Flow = BEN_HAY_2_Flow + HAY_BEN_2_Flow
 989  HVDClinkFlowIntegerDefinition3(t,pole) $ { UseBranchFlowMIP(t) and
 990                                             resolveCircularBranchFlows }..
 991    sum[ br $ { HVDClink(t,br)
 992            and HVDCpoleBranchMap(pole,br) } , HVDCLINKFLOW(t,br) ]
 993  =e=
 994    sum[ fd, HVDCPOLEFLOW_INTEGER(t,pole,fd) ]
 995    ;
 996   
 997  * Definition of the integer HVDC pole flow variable for intra-pole circula
      ting branch flows
 998  * Pole1_North_Flow = BEN_HAY_1_Flow + HAY_BEN_1_Flow
 999  * Pole1_South_Flow = BEN_HAY_1_Flow + HAY_BEN_1_Flow
1000  * Pole2_North_Flow = BEN_HAY_2_Flow + HAY_BEN_2_Flow
1001  * Pole2_South_Flow = BEN_HAY_2_Flow + HAY_BEN_2_Flow
1002   
1003  HVDClinkFlowIntegerDefinition4(t,pole,fd) $ { UseBranchFlowMIP(t) and
1004                                                resolveCircularBranchFlows }
      ..
1005    sum[ HVDCpoleDirection(HVDClink(t,br),fd) $ HVDCpoleBranchMap(pole,br)
1006       , HVDCLINKFLOW(HVDClink) ]
1007  =e=
1008    HVDCPOLEFLOW_INTEGER(t,pole,fd)
1009    ;
1010   
1011  *======= HVDC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES END ==============
      ======
1012   
1013   
1014  *======= HVDC TRANSMISSION EQUATIONS FOR SOS2 VARIABLES ==================
      ======
1015  * Definition 1 of weighting factor when branch integer constraints are nee
      ded
1016  LambdaIntegerDefinition1(HVDClink(t,br)) $ { UseBranchFlowMIP(t) and
1017                                               resolveHVDCnonPhysicalLosses 
      }..
1018    sum[ validLossSegment(HVDClink,bp,fd), LAMBDAINTEGER(HVDClink,bp) ]
1019  =e=
1020    1
1021    ;
1022   
1023  * Definition 2 of weighting factor when branch integer constraints are nee
      ded
1024  LambdaIntegerDefinition2(HVDClink(t,br),bp)
1025    $ { UseBranchFlowMIP(t) and resolveHVDCnonPhysicalLosses
1026    and sum[ fd $ validLossSegment(HVDClink,bp,fd), 1] }..
1027    LAMBDAINTEGER(HVDClink,bp)
1028  =e=
1029    LAMBDA(HVDClink,bp)
1030    ;
1031   
1032  *======= HVDC TRANSMISSION EQUATIONS END =================================
      ======
1033   
1034   
1035   
1036   
1037  *======= AC TRANSMISSION EQUATIONS =======================================
      ======
1038   
1039  * 1st definition of the net injection at buses corresponding to AC nodes (
      6.4.1.1)
1040  ACnodeNetInjectionDefinition1(bus(t,b))..
1041    ACNODENETINJECTION(t,b)
1042  =e=
1043    sum[ ACBranchSendingBus(ACBranch(t,br),b,fd)
1044       , ACBRANCHFLOWDIRECTED(ACBranch,fd)
1045       ]
1046  - sum[ ACBranchReceivingBus(ACBranch(t,br),b,fd)
1047       , ACBRANCHFLOWDIRECTED(ACBranch,fd)
1048       ]
1049    ;
1050   
1051  * 2nd definition of the net injection at buses corresponding to AC nodes (
      6.4.1.2)
1052  ACnodeNetInjectionDefinition2(bus(t,b))..
1053    ACNODENETINJECTION(t,b)
1054  =e=
1055    sum[ offerNode(t,o,n) $ NodeBus(t,n,b)
1056       , nodeBusAllocationFactor(t,n,b) * GENERATION(t,o) ]
1057  - sum[ BidNode(t,bd,n) $ NodeBus(t,n,b)
1058       , NodeBusAllocationFactor(t,n,b) * PURCHASE(t,bd) ]
1059  - sum[ NodeBus(t,n,b)
1060       , NodeBusAllocationFactor(t,n,b) * requiredLoad(t,n) ]
1061  + sum[ HVDClinkReceivingBus(HVDClink(t,br),b), HVDCLINKFLOW(HVDClink)   ]
1062  - sum[ HVDClinkReceivingBus(HVDClink(t,br),b), HVDCLINKLOSSES(HVDClink) ]
1063  - sum[ HVDClinkSendingBus(HVDClink(t,br),b)  , HVDCLINKFLOW(HVDClink)   ]
1064  - sum[ HVDClinkBus(HVDClink(t,br),b),   0.5 * branchFixedLoss(HVDClink) ]
1065  - sum[ ACBranchReceivingBus(ACBranch(t,br),b,fd)
1066       , branchReceivingEndLossProportion
1067       * ACBRANCHLOSSESDIRECTED(ACBranch,fd) ]
1068  - sum[ ACBranchSendingBus(ACBranch(t,br),b,fd)
1069       , (1 - branchReceivingEndLossProportion)
1070       * ACBRANCHLOSSESDIRECTED(ACBranch,fd) ]
1071  - sum[ BranchBusConnect(ACBranch(t,br),b), 0.5*branchFixedLoss(ACBranch) ]
1072  + DEFICITBUSGENERATION(t,b) - SURPLUSBUSGENERATION(t,b)
1073  * Note that we model energy scarcity as penalty instead of benefit like SP
      D
1074  * The reason for this is to avoid numerical issues.
1075  + sum[ NodeBus(t,n,b)
1076       , NodeBusAllocationFactor(t,n,b) * ENERGYSCARCITYNODE(t,n)]
1077    ;
1078   
1079  * Maximum flow on the AC branch (6.4.1.3)
1080  ACBranchMaximumFlow(ACbranch(t,br),fd) $ useACbranchLimits..
1081    ACBRANCHFLOWDIRECTED(ACBranch,fd) - SURPLUSBRANCHFLOW(ACBranch)
1082  =l=
1083    branchCapacity(ACBranch,fd)
1084    ;
1085   
1086  * Relationship between directed and undirected branch flow variables (6.4.
      1.4)
1087  ACBranchFlowDefinition(ACBranch(t,br))..
1088    ACBRANCHFLOW(ACBranch)
1089  =e=
1090    sum[ fd $ (ord(fd) = 1), ACBRANCHFLOWDIRECTED(ACBranch,fd) ]
1091  - sum[ fd $ (ord(fd) = 2), ACBRANCHFLOWDIRECTED(ACBranch,fd) ]
1092    ;
1093   
1094  * Equation that describes the linear load flow (6.4.1.5)
1095  LinearLoadFlow(ACBranch(t,br))..
1096    ACBRANCHFLOW(ACBranch)
1097  =e=
1098    branchSusceptance(ACBranch)
1099    * sum[ BranchBusDefn(ACBranch,frB,toB)
1100         , ACNODEANGLE(t,frB) - ACNODEANGLE(t,toB) ]
1101    ;
1102   
1103  * Limit on each AC branch flow block (6.4.1.6)
1104  ACBranchBlockLimit(validLossSegment(ACBranch(t,br),los,fd))..
1105    ACBRANCHFLOWBLOCKDIRECTED(ACBranch,los,fd)
1106  =l=
1107    ACBranchLossMW(ACBranch,los,fd)
1108    ;
1109   
1110  * Composition of the directed branch flow from the block branch flow (6.4.
      1.7)
1111  ACDirectedBranchFlowDefinition(ACBranch(t,br),fd)..
1112    ACBRANCHFLOWDIRECTED(ACBranch,fd)
1113  =e=
1114    sum[ validLossSegment(ACBranch,los,fd)
1115       , ACBRANCHFLOWBLOCKDIRECTED(ACBranch,los,fd) ]
1116    ;
1117   
1118  * Calculation of the losses in each loss segment (6.4.1.8) - Modified for 
      BranchcReverseRatings
1119  ACBranchLossCalculation(validLossSegment(ACBranch(t,br),los,fd))..
1120    ACBRANCHLOSSESBLOCKDIRECTED(ACBranch,los,fd)
1121  =e=
1122    ACBRANCHFLOWBLOCKDIRECTED(ACBranch,los,fd)
1123    * ACBranchLossFactor(ACBranch,los,fd)
1124    ;
1125   
1126  * Composition of the directed branch losses from the block branch losses (
      6.4.1.9)
1127  ACDirectedBranchLossDefinition(ACBranch(t,br),fd)..
1128    ACBRANCHLOSSESDIRECTED(ACBranch,fd)
1129  =e=
1130    sum[ validLossSegment(ACBranch,los,fd)
1131       , ACBRANCHLOSSESBLOCKDIRECTED(ACBranch,los,fd) ]
1132    ;
1133   
1134  *======= AC TRANSMISSION EQUATIONS END ===================================
      ======
1135   
1136   
1137   
1138  *======= AC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES ====================
      ======
1139  * AC transmission constraints to resolve circular flow
1140  * These constraints are not explicitly formulated in SPD formulation
1141  * But you can find the description in "Post-Solve Checks"
1142   
1143  * Integer constraint to enforce a flow direction on loss AC branches in th
      e
1144  * presence of circular branch flows or non-physical losses
1145  ACDirectedBranchFlowIntegerDefinition1(ACBranch(lossBranch(t,br)))
1146    $ { UseBranchFlowMIP(t) and resolveCircularBranchFlows }..
1147    sum[ fd, ACBRANCHFLOWDIRECTED_INTEGER(ACBranch,fd) ]
1148  =e=
1149    sum[ fd, ACBRANCHFLOWDIRECTED(ACBranch,fd) ]
1150    ;
1151   
1152  * Integer constraint to enforce a flow direction on loss AC branches in th
      e
1153  * presence of circular branch flows or non-physical losses
1154  ACDirectedBranchFlowIntegerDefinition2(ACBranch(lossBranch(t,br)),fd)
1155    $ { UseBranchFlowMIP(t) and resolveCircularBranchFlows }..
1156    ACBRANCHFLOWDIRECTED_INTEGER(ACBranch,fd)
1157  =e=
1158    ACBRANCHFLOWDIRECTED(ACBranch,fd)
1159    ;
1160   
1161  *======= AC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES END ================
      ======
1162   
1163   
1164   
1165  *======= RISK EQUATIONS ==================================================
      ======
1166   
1167  * 6.5.1.1 : Calculation of the risk offset variable for the DCCE risk clas
      s.
1168  RiskOffsetCalculation_DCCE(t,isl,resC,riskC)
1169    $ { HVDCrisk(riskC) and ContingentEvents(riskC)  }..
1170    RISKOFFSET(t,isl,resC,riskC)
1171  =e=
1172    FreeReserve(t,isl,resC,riskC) + HVDCPoleRampUp(t,isl,resC,riskC)
1173    ;
1174   
1175  * 6.5.1.3 : Calculation of the risk offset variable for the DCECE risk cla
      ss.
1176  RiskOffsetCalculation_DCECE(t,isl,resC,riskC)
1177    $ { HVDCrisk(riskC) and ExtendedContingentEvent(riskC) }..
1178    RISKOFFSET(t,isl,resC,riskC)
1179  =e=
1180    FreeReserve(t,isl,resC,riskC)
1181    ;
1182   
1183  * 6.5.1.4 : Calculation of the net received HVDC MW flow into an island.
1184  HVDCRecCalculation(t,isl)..
1185    HVDCREC(t,isl)
1186  =e=
1187    sum[ (b,br) $ { BusIsland(t,b,isl)
1188                and HVDClinkSendingBus(t,br,b)
1189                and HVDCLink(t,br)
1190                  }, -HVDCLINKFLOW(t,br)
1191       ]
1192  + sum[ (b,br) $ { BusIsland(t,b,isl)
1193                and HVDClinkReceivingBus(t,br,b)
1194                and HVDCLink(t,br)
1195                  }, HVDCLINKFLOW(t,br) - HVDCLINKLOSSES(t,br)
1196       ]
1197    ;
1198   
1199  * 6.5.1.5 : Calculation of the island risk for a DCCE and DCECE.
1200  HVDCIslandRiskCalculation(t,isl,resC,HVDCrisk)..
1201    ISLANDRISK(t,isl,resC,HVDCrisk)
1202  =e=
1203    IslandRiskAdjustmentFactor(t,isl,resC,HVDCrisk)
1204    * [ HVDCREC(t,isl)
1205      - RISKOFFSET(t,isl,resC,HVDCrisk)
1206      + modulationRiskClass(t,HVDCrisk)
1207      ]
1208  * Scarcity reserve (only applied for CE risk)
1209    - RESERVESHORTFALL(t,isl,resC,HVDCrisk) $ ContingentEvents(HVDCrisk)
1210    ;
1211   
1212  * 6.5.1.6 : Calculation of the risk of risk setting generators
1213  GenIslandRiskCalculation_1(t,isl,o,resC,GenRisk)
1214    $ islandRiskGenerator(t,isl,o) ..
1215    GENISLANDRISK(t,isl,o,resC,GenRisk)
1216  =e=
1217    IslandRiskAdjustmentFactor(t,isl,resC,GenRisk)
1218    * [ GENERATION(t,o)
1219      - FreeReserve(t,isl,resC,GenRisk)
1220      + FKBand(t,o)
1221      + sum[ resT, RESERVE(t,o,resC,resT) ]
1222      + sum[ o1 $ PrimarySecondaryOffer(t,o,o1)
1223           , sum[ resT, RESERVE(t,o1,resC,resT) ] + GENERATION(t,o1) ]
1224      ]
1225  * NMIR update
1226  - RESERVESHAREEFFECTIVE(t,isl,resC,GenRisk)$reserveShareEnabled(t,resC)
1227  * Scarcity reserve (only applied for CE risk)
1228  - RESERVESHORTFALLUNIT(t,isl,o,resC,GenRisk) $ ContingentEvents(GenRisk)
1229    ;
1230   
1231  * 6.5.1.6 : Calculation of the island risk for risk setting generators
1232  GenIslandRiskCalculation(t,isl,o,resC,GenRisk)
1233    $ islandRiskGenerator(t,isl,o) ..
1234    ISLANDRISK(t,isl,resC,GenRisk)
1235  =g=
1236    GENISLANDRISK(t,isl,o,resC,GenRisk) ;
1237   
1238  * 6.5.1.7 : Calculation of the island risk based on manual specifications
1239  ManualIslandRiskCalculation(t,isl,resC,ManualRisk)..
1240    ISLANDRISK(t,isl,resC,ManualRisk)
1241  =e=
1242    IslandRiskAdjustmentFactor(t,isl,resC,ManualRisk)
1243    * [ riskParameter(t,isl,resC,ManualRisk,'minRisk')
1244      - FreeReserve(t,isl,resC,ManualRisk)
1245      ]
1246  * NMIR update
1247  - RESERVESHAREEFFECTIVE(t,isl,resC,ManualRisk)$reserveShareEnabled(t,resC)
1248  * Scarcity reserve (only applied for CE risk)
1249  - RESERVESHORTFALL(t,isl,resC,ManualRisk) $ ContingentEvents(ManualRisk)
1250    ;
1251   
1252  * 6.5.1.8: Define a flag to show if HVDC sending zero MW flow from an isla
      nd
1253  HVDCSendMustZeroBinaryDefinition(t,isl).. HVDCSENT(t,isl) =l= BigM * [ 1 -
       HVDCSENDZERO(t,isl) ] ;
1254   
1255   
1256  * 6.5.1.9 : Calculation of the island risk for an HVDC secondary generatio
      n risk
1257  * HVDC secondary risk includes HVDC risk and Generation of both primary an
      d secondary generation unit + cleared reserve + the FKBand for generator p
      rimary risk
1258  HVDCIslandSecRiskCalculation_GEN_1(t,isl,o,resC,HVDCSecRisk)
1259    $ { islandRiskGenerator(t,isl,o)  and
1260        HVDCSecRiskEnabled(t,isl,HVDCSecRisk) }..
1261    HVDCGENISLANDRISK(t,isl,o,resC,HVDCSecRisk)
1262  =e=
1263    IslandRiskAdjustmentFactor(t,isl,resC,HVDCSecRisk)
1264    * [ GENERATION(t,o)
1265      - FreeReserve(t,isl,resC,HVDCSecRisk)
1266      + HVDCREC(t,isl)
1267      - islandParameter(t,isl,'HVDCSecSubtractor')
1268      + FKBand(t,o)
1269      + sum[ resT, RESERVE(t,o,resC,resT) ]
1270      + sum[ o1 $ PrimarySecondaryOffer(t,o,o1)
1271           , sum[ resT, RESERVE(t,o1,resC,resT) ] + GENERATION(t,o1) ]
1272      + modulationRiskClass(t,HVDCSecRisk)
1273      ]
1274  * Scarcity reserve (only applied for CE risk)
1275    - RESERVESHORTFALLUNIT(t,isl,o,resC,HVDCSecRisk) $ ContingentEvents(HVDC
      SecRisk)
1276  * HVDC secondary risk not applied if HVDC sent is zero
1277    - BigM * sum[ isl1 $ (not sameas(isl1,isl)), HVDCSENDZERO(t,isl) ]
1278    ;
1279   
1280  * 6.5.1.9 : Calculation of the island risk for an HVDC secondary generatio
      n risk
1281  HVDCIslandSecRiskCalculation_GEN(t,isl,o,resC,HVDCSecRisk)
1282    $ { islandRiskGenerator(t,isl,o)  and
1283        HVDCSecRiskEnabled(t,isl,HVDCSecRisk) }..
1284    ISLANDRISK(t,isl,resC,HVDCSecRisk)
1285  =g=
1286    HVDCGENISLANDRISK(t,isl,o,resC,HVDCSecRisk)
1287    ;
1288   
1289  * 6.5.1.10: Calculation of the island risk for an HVDC secondary manual ri
      sk
1290  HVDCIslandSecRiskCalculation_Manu_1(t,isl,resC,HVDCSecRisk)
1291    $ HVDCSecRiskEnabled(t,isl,HVDCSecRisk)..
1292    HVDCMANISLANDRISK(t,isl,resC,HVDCSecRisk)
1293  =e=
1294    IslandRiskAdjustmentFactor(t,isl,resC,HVDCSecRisk)
1295    * [ riskParameter(t,isl,resC,HVDCSecRisk,'minRisk')
1296      - FreeReserve(t,isl,resC,HVDCSecRisk)
1297      + HVDCREC(t,isl)
1298      - islandParameter(t,isl,'HVDCSecSubtractor')
1299      + modulationRiskClass(t,HVDCSecRisk)
1300      ]
1301  * Scarcity reserve (only applied for CE risk)
1302    - RESERVESHORTFALL(t,isl,resC,HVDCSecRisk) $ ContingentEvents(HVDCSecRis
      k)
1303  * HVDC secondary risk not applied if HVDC sent is zero
1304    - BigM * sum[ isl1 $ (not sameas(isl1,isl)), HVDCSENDZERO(t,isl) ]
1305    ;
1306   
1307  * 6.5.1.10: Calculation of the island risk for an HVDC secondary manual ri
      sk
1308  HVDCIslandSecRiskCalculation_Manual(t,isl,resC,HVDCSecRisk)
1309    $ HVDCSecRiskEnabled(t,isl,HVDCSecRisk)..
1310    ISLANDRISK(t,isl,resC,HVDCSecRisk)
1311  =g=
1312    HVDCMANISLANDRISK(t,isl,resC,HVDCSecRisk)
1313    ;
1314   
1315  * 6.5.1.11: Calculation of the risk of risk group
1316  GenIslandRiskGroupCalculation_1(t,isl,rg,resC,GenRisk)
1317    $ islandRiskGroup(t,isl,rg,GenRisk)..
1318    GENISLANDRISKGROUP(t,isl,rg,resC,GenRisk)
1319  =e=
1320    IslandRiskAdjustmentFactor(t,isl,resC,GenRisk)
1321    * [ sum[ o $ { offerIsland(t,o,isl)
1322               and riskGroupOffer(t,rg,o,GenRisk)
1323                 } , GENERATION(t,o) + FKBand(t,o)
1324                   + sum[ resT, RESERVE(t,o,resC,resT) ]
1325           ]
1326      - FreeReserve(t,isl,resC,GenRisk)
1327      ]
1328  * NMIR update
1329  - RESERVESHAREEFFECTIVE(t,isl,resC,GenRisk)$reserveShareEnabled(t,resC)
1330  * Scarcity reserve (only applied for CE risk)
1331  - RESERVESHORTFALLGROUP(t,isl,rg,resC,GenRisk) $ ContingentEvents(GenRisk)
1332    ;
1333   
1334  * 6.5.1.11: Calculation of the island risk for risk group
1335  GenIslandRiskGroupCalculation(t,isl,rg,resC,GenRisk)
1336    $ islandRiskGroup(t,isl,rg,GenRisk)..
1337    ISLANDRISK(t,isl,resC,GenRisk)
1338  =g=
1339    GENISLANDRISKGROUP(t,isl,rg,resC,GenRisk)
1340    ;
1341   
1342  *======= RISK EQUATIONS END ==============================================
      ======
1343   
1344   
1345  *======= NMIR - RESERVE SHARING EQUATIONS ================================
      ======
1346   
1347  * General NMIR equations start -------------------------------------------
      ------
1348   
1349  * Calculation of effective shared reserve - (6.5.2.1)
1350  EffectiveReserveShareCalculation(t,isl,resC,riskC)
1351    $ { reserveShareEnabled(t,resC)
1352    and ( GenRisk(riskC) or ManualRisk(riskC) ) }..
1353    RESERVESHAREEFFECTIVE(t,isl,resC,riskC)
1354  =l=
1355    Sum[ rd , RESERVESHARERECEIVED(t,isl,resC,rd)
1356            * effectiveFactor(t,isl,resC,riskC) ]
1357    ;
1358   
1359  * Shared offered reserve is limited by cleared reserved - (6.5.2.2)
1360  SharedReserveLimitByClearedReserve(t,isl,resC)
1361    $ reserveShareEnabled(t,resC)..
1362    SHAREDRESERVE(t,isl,resC)
1363  =l=
1364    ISLANDRESERVE(t,isl,resC)
1365    ;
1366   
1367  * Both cleared reserved and shareable free reserve can be shared - (6.5.2.
      4)
1368  BothClearedAndFreeReserveCanBeShared(t,isl,resC,rd)
1369    $ reserveShareEnabled(t,resC)..
1370    RESERVESHARESENT(t,isl,resC,rd)
1371  =l=
1372    SHAREDRESERVE(t,isl,resC) + SHAREDNFR(t,isl)$(ord(resC)=1)
1373    ;
1374   
1375  * Reserve share sent is limited by HVDC control band - (6.5.2.5)
1376  ReserveShareSentLimitByHVDCControlBand(t,isl,resC,rd)
1377    $ reserveShareEnabled(t,resC)..
1378    RESERVESHARESENT(t,isl,resC,rd)
1379  =l=
1380    [ HVDCControlBand(t,rd) - modulationRisk(t)
1381    ] $ (HVDCControlBand(t,rd) > modulationRisk(t))
1382    ;
1383   
1384  * Forward reserve share sent is limited by HVDC capacity - (6.5.2.6)
1385  FwdReserveShareSentLimitByHVDCCapacity(t,isl,resC,rd)
1386    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1387    RESERVESHARESENT(t,isl,resC,rd)
1388  + HVDCSENT(t,isl)
1389  =l=
1390    [ HVDCMax(t,isl) - modulationRisk(t) ] $ (HVDCMax(t,isl) > modulationRis
      k(t))
1391  ;
1392   
1393  * Reverse shared reserve is only possible for receiving island - (6.5.2.7)
1394  ReverseReserveOnlyToEnergySendingIsland(t,isl,resC,rd)
1395    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1396    RESERVESHARESENT(t,isl,resC,rd)
1397  =l=
1398    BigM * [ 1 - HVDCSENDING(t,isl) ]
1399    ;
1400   
1401  * Reverse shared reserve recieved at an island is limited by HVDC control 
      band - (6.5.2.8)
1402  ReverseReserveShareLimitByHVDCControlBand(t,isl,resC,rd)
1403    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1404    RESERVESHARERECEIVED(t,isl,resC,rd)
1405  =l=
1406    HVDCSENDING(t,isl) * [ HVDCControlBand(t,rd) - modulationRisk(t)
1407                         ] $ ( HVDCControlBand(t,rd) > modulationRisk(t) )
1408    ;
1409   
1410  * Forward received shared reserve only possible for receiving island - (3.
      4.2.9)
1411  ForwardReserveOnlyToEnergyReceivingIsland(t,isl,resC,rd)
1412    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1413    RESERVESHARERECEIVED(t,isl,resC,rd)
1414  =l=
1415    BigM * [ 1 - HVDCSENDING(t,isl) ]
1416    ;
1417   
1418  * Reverse shared reserve limit if HVDC sent flow in reverse zone - (6.5.2.
      10)
1419  ReverseReserveLimitInReserveZone(t,isl,resC,rd,z)
1420    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) and (ord(z) = 3) }..
1421    RESERVESHARERECEIVED(t,isl,resC,rd)
1422  =l=
1423    HVDCSENT(t,isl)
1424  - (MonopoleMinimum(t) + modulationRisk(t))
1425  + BigM * [ 1 - INZONE(t,isl,resC,z) ]
1426    ;
1427   
1428  * No reverse shared reserve if HVDC sent flow in no reverse zone &
1429  * No forward reserve if HVDC sent flow in no reverse zone and RP disabled
1430  * (6.5.2.11) & (6.5.2.18)
1431  ZeroReserveInNoReserveZone(t,isl,resC,z)
1432    $ { reserveShareEnabled(t,resC) and (ord(z) = 2) }..
1433    Sum[ rd $ (ord(rd) = 2), RESERVESHARERECEIVED(t,isl,resC,rd) ]
1434  + Sum[ rd $ (ord(rd) = 1), RESERVESHARESENT(t,isl,resC,rd)
1435       ] $ {reserveRoundPower(t,resC) = 0}
1436  =l=
1437    BigM * [ 1 - INZONE(t,isl,resC,z) ]
1438    ;
1439   
1440  * Across both island, only one zone is active for each reserve class -(6.5
      .2.12)
1441  OnlyOneActiveHVDCZoneForEachReserveClass(t,resC) $ reserveShareEnabled(t,r
      esC)..
1442    Sum[ (isl,z), INZONE(t,isl,resC,z) ] =e= 1 ;
1443   
1444  * HVDC sent from sending island only - (6.5.2.13)
1445  ZeroSentHVDCFlowForNonSendingIsland(t,isl) $ reserveShareEnabledOverall(t)
      ..
1446    HVDCSENT(t,isl) =l= BigM * HVDCSENDING(t,isl) ;
1447   
1448  * HVDC sent from an island <= RoundPowerZoneExit level if in round power z
      one
1449  * of that island - (6.5.2.14)
1450  RoundPowerZoneSentHVDCUpperLimit(t,isl,resC,z)
1451    $ { reserveShareEnabled(t,resC) and (ord(z) = 1) }..
1452    HVDCSENT(t,isl)
1453  =l=
1454    roPwrZoneExit(t,resC) + BigM * [ 1 - INZONE(t,isl,resC,z) ]
1455  ;
1456   
1457  * An island is HVDC sending island if HVDC flow sent is in one of the thre
      e
1458  * zones for each reserve class - (6.5.2.15)
1459  HVDCSendingIslandDefinition(t,isl,resC) $ reserveShareEnabled(t,resC)..
1460    HVDCSENDING(t,isl) =e= Sum[ z, INZONE(t,isl,resC,z) ] ;
1461   
1462  * One and only one island is HVDC sending island - (6.5.2.19)
1463  OnlyOneSendingIslandExists(t) $ reserveShareEnabledOverall(t)..
1464   Sum[ isl, HVDCSENDING(t,isl) ] =e= 1 ;
1465   
1466  * Total HVDC sent from each island - (6.5.2.20)
1467  HVDCSentCalculation(t,isl) $ reserveShareEnabledOverall(t)..
1468    HVDCSENT(t,isl)
1469  =e=
1470    Sum[ (b,br) $ { BusIsland(t,b,isl)
1471                and HVDClinkSendingBus(t,br,b)
1472                and HVDClink(t,br)
1473                  }, HVDCLINKFLOW(t,br)
1474       ]
1475  ;
1476   
1477  * General NMIR equations end ---------------------------------------------
      ------
1478   
1479   
1480  * Lamda loss model -------------------------------------------------------
      ------
1481   
1482  * HVDC flow + forward reserve sent from an island - (6.5.2.21)
1483  HVDCFlowAccountedForForwardReserve(t,isl,resC,rd)
1484    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1485    HVDCRESERVESENT(t,isl,resC,rd)
1486  =e=
1487    RESERVESHARESENT(t,isl,resC,rd) + HVDCSENT(t,isl)
1488    ;
1489   
1490  * Received forward shared reserve at an HVDC receiving island - (6.5.2.22)
1491  ForwardReserveReceivedAtHVDCReceivingIsland(t,isl,resC,rd)
1492    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1493    RESERVESHARERECEIVED(t,isl,resC,rd)
1494  =e=
1495    Sum[ isl1 $ (not sameas(isl1,isl))
1496        , RESERVESHARESENT(t,isl1,resC,rd)
1497        - HVDCRESERVELOSS(t,isl1,resC,rd)
1498        + HVDCSENTLOSS(t,isl1) ]
1499    ;
1500   
1501  * HVDC flow - received reverse reserve sent from an island - (6.5.2.23)
1502  HVDCFlowAccountedForReverseReserve(t,isl,resC,rd)
1503    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1504    HVDCRESERVESENT(t,isl,resC,rd)
1505  =e=
1506    HVDCSENT(t,isl) - RESERVESHARERECEIVED(t,isl,resC,rd)
1507    ;
1508   
1509  * Reverse reserve RECEIVED at an HVDC sending island - (6.5.2.24)
1510  ReverseReserveReceivedAtHVDCSendingIsland(t,isl,resC,rd)
1511    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1512    RESERVESHARERECEIVED(t,isl,resC,rd)
1513  =e=
1514    Sum[ isl1 $ (not sameas(isl1,isl)), RESERVESHARESENT(t,isl1,resC,rd) ]
1515  - HVDCRESERVELOSS(t,isl,resC,rd)
1516  + HVDCSENTLOSS(t,isl)
1517    ;
1518   
1519  * Total weight factor = 1 for HVDC energy sent from an island - (6.5.2.25)
1520  HVDCSentEnergyLambdaDefinition(t,isl) $ reserveShareEnabledOverall(t)..
1521    Sum[ bp $ (ord(bp) <= 7),LAMBDAHVDCENERGY(t,isl,bp) ] =e= 1 ;
1522   
1523  * Lambda definition of total HVDC energy flow sent from an island
1524  * (6.5.2.26) - SPD version 11.0
1525  HVDCSentEnergyFlowDefinition(t,isl) $ reserveShareEnabledOverall(t)..
1526    HVDCSENT(t,isl)
1527  =e=
1528    Sum[ bp $ (ord(bp) <= 7), HVDCSentBreakPointMWFlow(t,isl,bp)
1529                            * LAMBDAHVDCENERGY(t,isl,bp) ]
1530    ;
1531   
1532  * Lambda definition of total loss of HVDC energy sent from an island
1533  * (6.5.2.27) - SPD version 11.0
1534  HVDCSentEnergyLossesDefinition(t,isl) $ reserveShareEnabledOverall(t)..
1535    HVDCSENTLOSS(t,isl)
1536  =e=
1537    Sum[ bp $ (ord(bp) <= 7), HVDCSentBreakPointMWLoss(t,isl,bp)
1538                            * LAMBDAHVDCENERGY(t,isl,bp) ]
1539    ;
1540   
1541  * Total weight factor = 1 for HVDC+reserve sent from an island -(6.5.2.28)
1542  HVDCSentReserveLambdaDefinition(t,isl,resC,rd) $ reserveShareEnabled(t,res
      C)..
1543    Sum[ rsbp, LAMBDAHVDCRESERVE(t,isl,resC,rd,rsbp) ] =e= 1 ;
1544   
1545  * Lambda definition of Reserse + Energy flow on HVDC sent from an island
1546  * (3.4.2.29) - SPD version 11.0
1547  HVDCSentReserveFlowDefinition(t,isl,resC,rd)
1548    $ reserveShareEnabled(t,resC)..
1549    HVDCRESERVESENT(t,isl,resC,rd)
1550  =e=
1551    Sum[ rsbp, HVDCReserveBreakPointMWFlow(t,isl,rsbp)
1552             * LAMBDAHVDCRESERVE(t,isl,resC,rd,rsbp) ]
1553    ;
1554   
1555  * Lambda definition of Reserse + Energy Loss on HVDC sent from an island
1556  * (3.4.2.30) - SPD version 11.0
1557  HVDCSentReserveLossesDefinition(t,isl,resC,rd)
1558    $ reserveShareEnabled(t,resC)..
1559    HVDCRESERVELOSS(t,isl,resC,rd)
1560  =e=
1561    Sum[ rsbp, HVDCReserveBreakPointMWLoss(t,isl,rsbp)
1562             * LAMBDAHVDCRESERVE(t,isl,resC,rd,rsbp) ]
1563    ;
1564   
1565  * Lamda loss model end ---------------------------------------------------
      ------
1566   
1567   
1568  * Calculate Reserve sharing excess penalty -------------------------------
      ------
1569   
1570  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation
1571  * Calculate max effective shared reserve for CE risk received at island (6
      .5.2.31)
1572  ReserveShareEffective_CE_Calculation(t,isl,resC,riskC)
1573    $ { reserveShareEnabled(t,resC) and ContingentEvents(riskC)
1574    and ( GenRisk(riskC) or ManualRisk(riskC) ) }..
1575    RESERVESHAREEFFECTIVE_CE(t,isl,resC)
1576  =g=
1577    RESERVESHAREEFFECTIVE(t,isl,resC,riskC)
1578    ;
1579   
1580  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation
1581  * Calculate max effective shared reserve for CE risk received at island (6
      .5.2.31)
1582  ReserveShareEffective_ECE_Calculation(t,isl,resC,riskC)
1583    $ { reserveShareEnabled(t,resC) and ExtendedContingentEvent(riskC)
1584    and ( GenRisk(riskC) or ManualRisk(riskC) ) }..
1585    RESERVESHAREEFFECTIVE_ECE(t,isl,resC)
1586  =g=
1587    RESERVESHAREEFFECTIVE(t,isl,resC,riskC)
1588    ;
1589   
1590  * Constraint to avoid excessive reserve share (6.5.2.31)
1591  ExcessReserveSharePenalty(t) $ reserveShareEnabledOverall(t)..
1592    RESERVESHAREPENALTY(t)
1593  =e=
1594    sum[ isl, 1e-5 * SHAREDNFR(t,isl) ]
1595  + sum[ (isl,resC), 2e-5 * SHAREDRESERVE(t,isl,resC) ]
1596  * Tuong Nguyen modified on 24 Feb 2021 to correct the calculation
1597  *+ sum[ (isl,resC,riskC), 3e-5 * RESERVESHAREEFFECTIVE(t,isl,resC,riskC)]
1598  + sum[ (isl,resC), 3e-5 * RESERVESHAREEFFECTIVE_CE(t,isl,resC)]
1599  + sum[ (isl,resC), 3e-5 * RESERVESHAREEFFECTIVE_ECE(t,isl,resC)]
1600  ;
1601  * Calculate Reserve sharing excess penalty end ---------------------------
      ------
1602   
1603  *======= NMIR - RESERVE SHARING EQUATIONS END ============================
      ======
1604   
1605   
1606   
1607  *======= RESERVE EQUATIONS ===============================================
      ======
1608  * 6.5.3.1: Maximum PLSR as a proportion of the block MW
1609  PLSRReserveProportionMaximum(offer(t,o),blk,resC,PLRO)
1610    $ resOfrBlk(offer,blk,resC,PLRO)..
1611    RESERVEBLOCK(Offer,blk,resC,PLRO)
1612  =l=
1613    resrvOfrPct(Offer,blk,resC) * GENERATION(Offer)
1614    ;
1615   
1616  * 6.5.3.3: Cleared IL reserve is constrained by cleared dispatchable deman
      d'
1617  ReserveInterruptibleOfferLimit(t,o,bd,resC,ILRO(resT))
1618    $ { sameas(o,bd) and offer(t,o) and bid(t,bd) and (sum[blk,demBidMW(t,bd
      ,blk)] >= 0) } ..
1619    RESERVE(t,o,resC,resT)
1620  =l=
1621    PURCHASE(t,bd);
1622   
1623   
1624  * 6.5.3.4 Definition of the reserve offers of different classes and types
1625  ReserveOfferDefinition(offer(t,o),resC,resT)..
1626    RESERVE(offer,resC,resT)
1627  =e=
1628    sum[ blk, RESERVEBLOCK(offer,blk,resC,resT) ]
1629    ;
1630   
1631  * 6.5.3.5 Definition of maximum energy and reserves from each generator
1632  EnergyAndReserveMaximum(offer(t,o),resC)..
1633    GENERATION(offer)
1634  + reserveMaxFactor(offer,resC)
1635    * sum[ resT $ (not ILRO(resT)), RESERVE(offer,resC,resT) ]
1636  =l=
1637    reserveGenMax(offer)
1638    ;
1639   
1640  *======= RESERVE EQUATIONS END ===========================================
      ======
1641   
1642   
1643   
1644  *======= RESERVE SCARCITY ================================================
      ======
1645  * 6.5.4.2: Total Reserve Shortfall for DCCE risk
1646  HVDCRiskReserveShortFallCalculation(t,isl,resC,HVDCrisk(RiskC))
1647    $ ContingentEvents(riskC)..
1648    RESERVESHORTFALL(t,isl,resC,riskC)
1649  =e=
1650    sum[ blk, RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
1651    ;
1652   
1653  * 6.5.4.2: Total Reserve Shortfall for Manual risk
1654  ManualRiskReserveShortFallCalculation(t,isl,resC,ManualRisk(RiskC))
1655    $ ContingentEvents(riskC)..
1656    RESERVESHORTFALL(t,isl,resC,riskC)
1657  =e=
1658    sum[ blk, RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
1659    ;
1660   
1661  * 6.5.4.2: Total Reserve Shortfall for generation risk unit
1662  GenRiskReserveShortFallCalculation(t,isl,o,resC,GenRisk(RiskC))
1663    $ { ContingentEvents(riskC) and  islandRiskGenerator(t,isl,o)  }..
1664    RESERVESHORTFALLUNIT(t,isl,o,resC,riskC)
1665  =e=
1666    sum[ blk, RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
1667    ;
1668   
1669  * 6.5.4.2: Total Reserve Shortfall for generation unit + HVDC risk
1670  HVDCsecRiskReserveShortFallCalculation(t,isl,o,resC,HVDCsecRisk(RiskC))
1671    $ { ContingentEvents(riskC) and  islandRiskGenerator(t,isl,o)  }..
1672    RESERVESHORTFALLUNIT(t,isl,o,resC,riskC)
1673  =e=
1674    sum[ blk, RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
1675    ;
1676   
1677  * 6.5.4.2: Total Reserve Shortfall for Manual risk + HVDC risk
1678  HVDCsecManualRiskReserveShortFallCalculation(t,isl,resC,HVDCsecRisk(RiskC)
      )
1679    $ ContingentEvents(riskC)..
1680    RESERVESHORTFALL(t,isl,resC,riskC)
1681  =e=
1682    sum[ blk, RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
1683    ;
1684   
1685  * 6.5.4.2: Total Reserve Shortfall for risk group
1686  RiskGroupReserveShortFallCalculation(t,isl,rg,resC,GenRisk(RiskC))
1687    $ { ContingentEvents(riskC) and islandRiskGroup(t,isl,rg,RiskC)}..
1688    RESERVESHORTFALLGROUP(t,isl,rg,resC,riskC)
1689  =e=
1690    sum[ blk, RESERVESHORTFALLGROUPBLK(t,isl,rg,resC,riskC,blk) ]
1691    ;
1692   
1693  *======= RESERVE SCARCITY END ============================================
      ======
1694   
1695   
1696   
1697  *======= RISK AND RESERVE BALANCE EQUATIONS ==============================
      ======
1698   
1699  * 6.5.5.1: Calculate total island cleared reserve
1700  IslandReserveCalculation(t,isl,resC)..
1701    ISLANDRESERVE(t,isl,resC)
1702  =l=
1703    Sum[ (o,resT) $ { offer(t,o) and offerIsland(t,o,isl) }
1704                  , RESERVE(t,o,resC,resT)
1705       ]
1706    ;
1707   
1708  * 6.5.5.2 & 6.5.5.3: Matching of reserve supply and demand
1709  SupplyDemandReserveRequirement(t,isl,resC,riskC) $ useReserveModel..
1710    ISLANDRISK(t,isl,resC,riskC)
1711  - DEFICITRESERVE_CE(t,isl,resC)   $ ContingentEvents(riskC)
1712  - DEFICITRESERVE_ECE(t,isl,resC)  $ ExtendedContingentEvent(riskC)
1713  =l=
1714    ISLANDRESERVE(t,isl,resC)
1715    ;
1716   
1717  *======= RISK AND RESERVE BALANCE EQUATIONS END ==========================
      ======
1718   
1719   
1720   
1721  *======= SECURITY EQUATIONS ==============================================
      ======
1722   
1723  * 6.6.1.5 Branch security constraint with LE sense
1724  BranchSecurityConstraintLE(t,brCstr)
1725    $ (BranchConstraintSense(t,brCstr) = -1)..
1726    sum[ br $ ACbranch(t,br)
1727       , branchCstrFactors(t,brCstr,br) * ACBRANCHFLOW(t,br) ]
1728  + sum[ br $ HVDClink(t,br)
1729       , branchCstrFactors(t,brCstr,br) * HVDCLINKFLOW(t,br) ]
1730  - SURPLUSBRANCHSECURITYCONSTRAINT(t,brCstr)
1731  =l=
1732    BranchConstraintLimit(t,brCstr)
1733    ;
1734   
1735  * 6.6.1.5 Branch security constraint with GE sense
1736  BranchSecurityConstraintGE(t,brCstr)
1737    $ (BranchConstraintSense(t,brCstr) = 1)..
1738    sum[ br $ ACbranch(t,br)
1739       , branchCstrFactors(t,brCstr,br) * ACBRANCHFLOW(t,br) ]
1740  + sum[ br $ HVDClink(t,br)
1741       , branchCstrFactors(t,brCstr,br) * HVDCLINKFLOW(t,br) ]
1742  + DEFICITBRANCHSECURITYCONSTRAINT(t,brCstr)
1743  =g=
1744    BranchConstraintLimit(t,brCstr)
1745    ;
1746   
1747  * 6.6.1.5 Branch security constraint with EQ sense
1748  BranchSecurityConstraintEQ(t,brCstr)
1749    $ (BranchConstraintSense(t,brCstr) = 0)..
1750    sum[ br $ ACbranch(t,br)
1751       , branchCstrFactors(t,brCstr,br) * ACBRANCHFLOW(t,br) ]
1752  + sum[ br $ HVDClink(t,br)
1753       , branchCstrFactors(t,brCstr,br) * HVDCLINKFLOW(t,br) ]
1754  + DEFICITBRANCHSECURITYCONSTRAINT(t,brCstr)
1755  - SURPLUSBRANCHSECURITYCONSTRAINT(t,brCstr)
1756  =e=
1757    BranchConstraintLimit(t,brCstr)
1758    ;
1759   
1760   
1761   
1762  * Market node security constraint with LE sense (3.5.1.7a)
1763  MNodeSecurityConstraintLE(t,MnodeCstr)
1764    $ (MNodeConstraintSense(t,MnodeCstr) = -1)..
1765    sum[ o $ posEnrgOfr(t,o)
1766         , MNCstrEnrgFactors(t,MnodeCstr,o)
1767         * GENERATION(t,o)
1768       ]
1769  + sum[ (o,resC,resT) $ offer(t,o)
1770         , MNCnstrResrvFactors(t,MnodeCstr,o,resC,resT)
1771         * RESERVE(t,o,resC,resT)
1772       ]
1773  + sum[ bd $ Bid(t,bd)
1774         , mnCnstrEnrgBidFactors(t,MnodeCstr,bd)
1775         * PURCHASE(t,bd)
1776       ]
1777  - SURPLUSMNODECONSTRAINT(t,MnodeCstr)
1778  =l=
1779    MNodeConstraintLimit(t,MnodeCstr)
1780    ;
1781   
1782  * Market node security constraint with GE sense (3.5.1.7b)
1783  MNodeSecurityConstraintGE(t,MnodeCstr)
1784    $ (MNodeConstraintSense(t,MnodeCstr) = 1)..
1785    sum[ o $ posEnrgOfr(t,o)
1786         , MNCstrEnrgFactors(t,MnodeCstr,o)
1787         * GENERATION(t,o)
1788       ]
1789  + sum[ (o,resC,resT) $ offer(t,o)
1790         , MNCnstrResrvFactors(t,MnodeCstr,o,resC,resT)
1791         * RESERVE(t,o,resC,resT)
1792       ]
1793  + sum[ bd $ Bid(t,bd)
1794         , mnCnstrEnrgBidFactors(t,MnodeCstr,bd)
1795         * PURCHASE(t,bd)
1796       ]
1797  + DEFICITMNODECONSTRAINT(t,MnodeCstr)
1798  =g=
1799    MNodeConstraintLimit(t,MnodeCstr)
1800    ;
1801   
1802  * Market node security constraint with EQ sense (3.5.1.7c)
1803  MNodeSecurityConstraintEQ(t,MnodeCstr)
1804    $ (MNodeConstraintSense(t,MnodeCstr) = 0)..
1805    sum[ o $ posEnrgOfr(t,o)
1806         , MNCstrEnrgFactors(t,MnodeCstr,o)
1807         * GENERATION(t,o)
1808       ]
1809  + sum[ (o,resC,resT) $ offer(t,o)
1810         , MNCnstrResrvFactors(t,MnodeCstr,o,resC,resT)
1811         * RESERVE(t,o,resC,resT)
1812       ]
1813  + sum[ bd $ Bid(t,bd)
1814         , mnCnstrEnrgBidFactors(t,MnodeCstr,bd)
1815         * PURCHASE(t,bd)
1816       ]
1817  + DEFICITMNODECONSTRAINT(t,MnodeCstr)
1818  - SURPLUSMNODECONSTRAINT(t,MnodeCstr)
1819  =e=
1820    MNodeConstraintLimit(t,MnodeCstr)
1821    ;
1822   
1823  *======= SECURITY EQUATIONS END ==========================================
      ======
1824   
1825   
1826  * Model declarations
1827  Model vSPD /
1828  * Objective function
1829    ObjectiveFunction
1830  * Offer and purchase definitions
1831    GenerationOfferDefintion, DemBidDefintion
1832    EnergyScarcityDefinition,
1833    GenerationRampUp, GenerationRampDown
1834  * Network
1835    HVDClinkMaximumFlow, HVDClinkLossDefinition
1836    HVDClinkFlowDefinition, LambdaDefinition
1837    ACnodeNetInjectionDefinition1
1838    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
1839    ACBranchFlowDefinition, LinearLoadFlow
1840    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
1841    ACBranchLossCalculation, ACDirectedBranchLossDefinition
1842  * Risk
1843    HVDCIslandRiskCalculation, HVDCRecCalculation
1844    GenIslandRiskCalculation, GenIslandRiskCalculation_1
1845    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
1846    ManualIslandRiskCalculation
1847  * Reserve
1848    PLSRReserveProportionMaximum, ReserveOfferDefinition
1849    EnergyAndReserveMaximum
1850  * Reserve scarcity/shortfall
1851    HVDCRiskReserveShortFallCalculation
1852    ManualRiskReserveShortFallCalculation
1853    GenRiskReserveShortFallCalculation
1854    HVDCsecRiskReserveShortFallCalculation
1855    HVDCsecManualRiskReserveShortFallCalculation
1856    RiskGroupReserveShortFallCalculation
1857  * Matching of reserve requirement and availability
1858    SupplyDemandReserveRequirement, IslandReserveCalculation
1859  * Risk Offset calculation
1860    RiskOffsetCalculation_DCCE
1861    RiskOffsetCalculation_DCECE
1862  * Island risk definitions
1863  * Include HVDC secondary risk constraints
1864    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
1865    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
1866  * Branch security constraints
1867    BranchSecurityConstraintLE
1868    BranchSecurityConstraintGE
1869    BranchSecurityConstraintEQ
1870  * Market node security constraints
1871    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE
1872    MNodeSecurityConstraintEQ
1873  * ViolationCost
1874    SystemCostDefinition, SystemBenefitDefinition
1875    SystemPenaltyCostDefinition, TotalViolationCostDefinition
1876    TotalScarcityCostDefinition
1877    / ;
1878   
1879  Model vSPD_NMIR /
1880  * Objective function
1881    ObjectiveFunction
1882  * Offer and purchase definitions
1883    GenerationOfferDefintion, DemBidDiscrete,
1884    DemBidDefintion, EnergyScarcityDefinition,
1885    GenerationRampUp, GenerationRampDown, GenerationChangeUpDown
1886  * Network
1887    HVDClinkMaximumFlow, HVDClinkLossDefinition
1888    HVDClinkFlowDefinition, LambdaDefinition
1889    ACnodeNetInjectionDefinition1
1890    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
1891    ACBranchFlowDefinition, LinearLoadFlow
1892    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
1893    ACBranchLossCalculation, ACDirectedBranchLossDefinition
1894  * Risk
1895    RiskOffsetCalculation_DCCE, RiskOffsetCalculation_DCECE
1896    HVDCIslandRiskCalculation, HVDCRecCalculation, ManualIslandRiskCalculati
      on
1897    GenIslandRiskCalculation, GenIslandRiskCalculation_1
1898    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
1899    HVDCSendMustZeroBinaryDefinition
1900    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
1901    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
1902  * Reserve
1903    PLSRReserveProportionMaximum, ReserveInterruptibleOfferLimit
1904    ReserveOfferDefinition, EnergyAndReserveMaximum
1905  * Reserve scarcity/shortfall
1906    HVDCRiskReserveShortFallCalculation
1907    ManualRiskReserveShortFallCalculation
1908    GenRiskReserveShortFallCalculation
1909    HVDCsecRiskReserveShortFallCalculation
1910    HVDCsecManualRiskReserveShortFallCalculation
1911    RiskGroupReserveShortFallCalculation
1912  * Matching of reserve requirement and availability
1913    SupplyDemandReserveRequirement, IslandReserveCalculation
1914  * Branch security constraints
1915    BranchSecurityConstraintLE
1916    BranchSecurityConstraintGE
1917    BranchSecurityConstraintEQ
1918  * Market node security constraints
1919    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE, MNodeSecurityConst
      raintEQ
1920  * ViolationCost
1921    SystemCostDefinition, SystemBenefitDefinition
1922    SystemPenaltyCostDefinition, TotalViolationCostDefinition
1923    TotalScarcityCostDefinition
1924  * General NMIR equations
1925    EffectiveReserveShareCalculation
1926    SharedReserveLimitByClearedReserve
1927    BothClearedAndFreeReserveCanBeShared
1928    ReverseReserveShareLimitByHVDCControlBand
1929    ReserveShareSentLimitByHVDCControlBand
1930    FwdReserveShareSentLimitByHVDCCapacity
1931    ReverseReserveOnlyToEnergySendingIsland
1932    ForwardReserveOnlyToEnergyReceivingIsland
1933    ReverseReserveLimitInReserveZone
1934    ZeroReserveInNoReserveZone
1935    OnlyOneActiveHVDCZoneForEachReserveClass
1936    ZeroSentHVDCFlowForNonSendingIsland
1937    RoundPowerZoneSentHVDCUpperLimit
1938    HVDCSendingIslandDefinition
1939    OnlyOneSendingIslandExists
1940    HVDCSentCalculation
1941    ExcessReserveSharePenalty
1942    ReserveShareEffective_CE_Calculation
1943    ReserveShareEffective_ECE_Calculation
1944  * Lamda loss model NMIR
1945    HVDCFlowAccountedForForwardReserve
1946    ForwardReserveReceivedAtHVDCReceivingIsland
1947    HVDCFlowAccountedForReverseReserve
1948    ReverseReserveReceivedAtHVDCSendingIsland
1949    HVDCSentEnergyLambdaDefinition
1950    HVDCSentEnergyFlowDefinition
1951    HVDCSentEnergyLossesDefinition
1952    HVDCSentReserveLambdaDefinition
1953    HVDCSentReserveFlowDefinition
1954    HVDCSentReserveLossesDefinition
1955    / ;
1956   
1957  Model vSPD_MIP /
1958  * Objective function
1959    ObjectiveFunction
1960  * Offer and purchase definitions
1961    GenerationOfferDefintion, DemBidDiscrete, DemBidDefintion
1962    EnergyScarcityDefinition,
1963    GenerationRampUp, GenerationRampDown, GenerationChangeUpDown
1964  * Network
1965    HVDClinkMaximumFlow, HVDClinkLossDefinition
1966    HVDClinkFlowDefinition, LambdaDefinition
1967    ACnodeNetInjectionDefinition1
1968    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
1969    ACBranchFlowDefinition, LinearLoadFlow
1970    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
1971    ACBranchLossCalculation, ACDirectedBranchLossDefinition
1972    ACDirectedBranchFlowIntegerDefinition1, ACDirectedBranchFlowIntegerDefin
      ition2
1973    LambdaIntegerDefinition1, LambdaIntegerDefinition2
1974  * Risk
1975    RiskOffsetCalculation_DCCE, RiskOffsetCalculation_DCECE
1976    HVDCIslandRiskCalculation, HVDCRecCalculation, ManualIslandRiskCalculati
      on
1977    GenIslandRiskCalculation, GenIslandRiskCalculation_1
1978    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
1979    HVDCSendMustZeroBinaryDefinition
1980    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
1981    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
1982  * Reserve
1983    PLSRReserveProportionMaximum, ReserveInterruptibleOfferLimit
1984    ReserveOfferDefinition, EnergyAndReserveMaximum
1985  * Reserve scarcity/shortfall
1986    HVDCRiskReserveShortFallCalculation
1987    ManualRiskReserveShortFallCalculation
1988    GenRiskReserveShortFallCalculation
1989    HVDCsecRiskReserveShortFallCalculation
1990    HVDCsecManualRiskReserveShortFallCalculation
1991    RiskGroupReserveShortFallCalculation
1992  * Matching of reserve requirement and availability
1993    SupplyDemandReserveRequirement, IslandReserveCalculation
1994  * Branch security constraints
1995    BranchSecurityConstraintLE
1996    BranchSecurityConstraintGE
1997    BranchSecurityConstraintEQ
1998  * Market node security constraints
1999    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE, MNodeSecurityConst
      raintEQ
2000  * ViolationCost
2001    SystemCostDefinition, SystemBenefitDefinition
2002    SystemPenaltyCostDefinition, TotalViolationCostDefinition
2003    TotalScarcityCostDefinition
2004  * Set of integer constraints on the HVDC link to incorporate the allowance
       of HVDC roundpower
2005    HVDClinkFlowIntegerDefinition1, HVDClinkFlowIntegerDefinition2
2006    HVDClinkFlowIntegerDefinition3, HVDClinkFlowIntegerDefinition4
2007  * General NMIR equations
2008    EffectiveReserveShareCalculation
2009    SharedReserveLimitByClearedReserve
2010    BothClearedAndFreeReserveCanBeShared
2011    ReverseReserveShareLimitByHVDCControlBand
2012    ReserveShareSentLimitByHVDCControlBand
2013    FwdReserveShareSentLimitByHVDCCapacity
2014    ReverseReserveOnlyToEnergySendingIsland
2015    ForwardReserveOnlyToEnergyReceivingIsland
2016    ReverseReserveLimitInReserveZone
2017    ZeroReserveInNoReserveZone
2018    OnlyOneActiveHVDCZoneForEachReserveClass
2019    ZeroSentHVDCFlowForNonSendingIsland
2020    RoundPowerZoneSentHVDCUpperLimit
2021    HVDCSendingIslandDefinition
2022    OnlyOneSendingIslandExists
2023    HVDCSentCalculation
2024    ExcessReserveSharePenalty
2025    ReserveShareEffective_CE_Calculation
2026    ReserveShareEffective_ECE_Calculation
2027  * Lamda loss model NMIR
2028    HVDCFlowAccountedForForwardReserve
2029    ForwardReserveReceivedAtHVDCReceivingIsland
2030    HVDCFlowAccountedForReverseReserve
2031    ReverseReserveReceivedAtHVDCSendingIsland
2032    HVDCSentEnergyLambdaDefinition
2033    HVDCSentEnergyFlowDefinition
2034    HVDCSentEnergyLossesDefinition
2035    HVDCSentReserveLambdaDefinition
2036    HVDCSentReserveFlowDefinition
2037    HVDCSentReserveLossesDefinition
2038    / ;
2039   
2040  Model vSPD_BranchFlowMIP /
2041  * Objective function
2042    ObjectiveFunction
2043  * Offer and purchase definitions
2044    GenerationOfferDefintion, DemBidDefintion
2045    EnergyScarcityDefinition,
2046    GenerationRampUp, GenerationRampDown, GenerationChangeUpDown
2047  * Network
2048    HVDClinkMaximumFlow, HVDClinkLossDefinition
2049    HVDClinkFlowDefinition, LambdaDefinition
2050    ACnodeNetInjectionDefinition1
2051    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
2052    ACBranchFlowDefinition, LinearLoadFlow
2053    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
2054    ACBranchLossCalculation, ACDirectedBranchLossDefinition
2055    ACDirectedBranchFlowIntegerDefinition1, ACDirectedBranchFlowIntegerDefin
      ition2
2056    LambdaIntegerDefinition1, LambdaIntegerDefinition2
2057  * Risk
2058    RiskOffsetCalculation_DCCE, RiskOffsetCalculation_DCECE
2059    HVDCIslandRiskCalculation, HVDCRecCalculation, ManualIslandRiskCalculati
      on
2060    GenIslandRiskCalculation, GenIslandRiskCalculation_1
2061    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
2062    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
2063    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
2064  * Reserve
2065    PLSRReserveProportionMaximum, ReserveOfferDefinition
2066    EnergyAndReserveMaximum
2067  * Reserve scarcity/shortfall
2068    HVDCRiskReserveShortFallCalculation
2069    ManualRiskReserveShortFallCalculation
2070    GenRiskReserveShortFallCalculation
2071    HVDCsecRiskReserveShortFallCalculation
2072    HVDCsecManualRiskReserveShortFallCalculation
2073    RiskGroupReserveShortFallCalculation
2074  * Matching of reserve requirement and availability
2075    SupplyDemandReserveRequirement, IslandReserveCalculation
2076  * Branch security constraints
2077    BranchSecurityConstraintLE
2078    BranchSecurityConstraintGE
2079    BranchSecurityConstraintEQ
2080  * Market node security constraints
2081    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE, MNodeSecurityConst
      raintEQ
2082  * ViolationCost
2083    SystemCostDefinition, SystemBenefitDefinition
2084    SystemPenaltyCostDefinition, TotalViolationCostDefinition
2085    TotalScarcityCostDefinition
2086  * Set of intrger constraints on the HVDC link to incorporate the allowance
       of HVDC roundpower
2087    HVDClinkFlowIntegerDefinition1, HVDClinkFlowIntegerDefinition2
2088    HVDClinkFlowIntegerDefinition3, HVDClinkFlowIntegerDefinition4
2089  * General NMIR equations
2090    EffectiveReserveShareCalculation
2091    SharedReserveLimitByClearedReserve
2092    BothClearedAndFreeReserveCanBeShared
2093    ReverseReserveShareLimitByHVDCControlBand
2094    ReserveShareSentLimitByHVDCControlBand
2095    FwdReserveShareSentLimitByHVDCCapacity
2096    ReverseReserveOnlyToEnergySendingIsland
2097    ForwardReserveOnlyToEnergyReceivingIsland
2098    ReverseReserveLimitInReserveZone
2099    ZeroReserveInNoReserveZone
2100    OnlyOneActiveHVDCZoneForEachReserveClass
2101    ZeroSentHVDCFlowForNonSendingIsland
2102    RoundPowerZoneSentHVDCUpperLimit
2103    HVDCSendingIslandDefinition
2104    OnlyOneSendingIslandExists
2105    HVDCSentCalculation
2106    ExcessReserveSharePenalty
2107    ReserveShareEffective_CE_Calculation
2108    ReserveShareEffective_ECE_Calculation
2109  * Lamda loss model NMIR
2110    HVDCFlowAccountedForForwardReserve
2111    ForwardReserveReceivedAtHVDCReceivingIsland
2112    HVDCFlowAccountedForReverseReserve
2113    ReverseReserveReceivedAtHVDCSendingIsland
2114    HVDCSentEnergyLambdaDefinition
2115    HVDCSentEnergyFlowDefinition
2116    HVDCSentEnergyLossesDefinition
2117    HVDCSentReserveLambdaDefinition
2118    HVDCSentReserveFlowDefinition
2119    HVDCSentReserveLossesDefinition
2120    / ;
2121   
2122  Model vSPD_FTR /
2123  * Objective function
2124    ObjectiveFunction
2125  * Offer and purchase definitions
2126    GenerationOfferDefintion
2127  * Network
2128    HVDClinkMaximumFlow
2129    ACNodeNetInjectionDefinition1, ACNodeNetInjectionDefinition2
2130    ACBranchMaximumFlow, ACBranchFlowDefinition, LinearLoadFlow
2131  * Branch security constraints
2132    BranchSecurityConstraintLE
2133    BranchSecurityConstraintGE
2134    BranchSecurityConstraintEQ
2135  * ViolationCost
2136    SystemCostDefinition, SystemBenefitDefinition
2137    SystemPenaltyCostDefinition, TotalViolationCostDefinition
2138    TotalScarcityCostDefinition
2139    / ;


COMPILATION TIME     =        0.016 SECONDS      3 MB  36.2.0 r433180e WEX-WEI
GAMS 36.2.0  r433180e Released Sep  3, 2021 WEX-WEI x86 64bit/MS Windows - 08/10/23 15:56:29 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


EXECUTION TIME       =        0.000 SECONDS      3 MB  36.2.0 r433180e WEX-WEI


USER: Small MUD-5 User License                       G220916|0002CO-GEN
      Electricity Authority - Te Mana Hiko,                  DC5643-S10


**** FILE SUMMARY

Input      C:\vSPD\vSPD\Programs_new\vSPDmodel.gms
Output     C:\vSPD\vSPD\Programs_new\vSPDmodel.lst
