GAMS 36.2.0  r433180e Released Sep  3, 2021 WEX-WEI x86 64bit/MS Windows - 08/11/23 16:18:57 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  *=========================================================================
      ============
   2  * Name:                 vSPDmodel.gms
   3  * Function:             Mathematical formulation - based on the SPD formul
      ation v9.0
   4  * Developed by:         Electricity Authority, New Zealand
   5  * Source:               https://github.com/ElectricityAuthority/vSPD
   6  *                       http://www.emi.ea.govt.nz/Tools/vSPD
   7  * Contact:              Forum: http://www.emi.ea.govt.nz/forum/
   8  *                       Email: emi@ea.govt.nz
   9  * Modified on:          1 Oct 2019
  10  *                       New feature added: New wind offer arrangements
  11  * Modified on:          11 Dec 2020
  12  *                       Branch Reverse Rating (this feature is suspended u
      ntil further notice)
  13  * Modified on:          24 Feb 2021
  14  *                       Correcting the excess reserve sharing penalty
  15  *                       by adding RESERVESHAREEFFECTIVE_CE and ECE variabl
      es
  16  * Last modified on:     18 March 2022
  17  *                       Rename/remove primary sets to tidy up the code and
  18  *                       Assign value for constant sets such as ils, blk,re
      sC, etc...
  19  *
  20  *=========================================================================
      ============
  21   
      Directory of code sections in vSPDmodel.gms:
        1. Declare sets and parameters for all symbols to be loaded from daily G
      DX files
        2. Declare additional sets and parameters used throughout the model
        3. Declare model variables and constraints, and initialise constraints
       
      Aliases to be aware of:
        dt = dt1                                  tp = tp1,tp2
        isl = isl1, isl2                          b = b1, frB, toB
        n = n1, n2                                o = o1, o2
        bd = bd1, bd2
        br = br1
  35   
  36  * Allow empty data set declaration
  38   
  39  *=========================================================================
      ==========
  40  * 1. Declare sets and parameters for all symbols to be loaded from daily G
      DX files
  41  *=========================================================================
      ==========
  42  * Hard-coded sets.
  43  Sets
  44    isl(*)              'Islands'                                           
            / NI, SI /
  45    blk(*)              'Trade block definitions used for the offer and bids
      '     / t1*t20 /
  46    los(*)              'Loss segments available for loss modelling'        
            / ls1*ls13 /
  47    fd(*)               'Directional flow definition used in the SPD formula
      tion' / forward, backward /
  48    resC(*)             'Definition of fast and sustained instantaneous rese
      rve'  / FIR, SIR /
  49    riskC(*)            'Different risks that could set the reserve requirem
      ents' / genRisk, genRiskECE, DCCE, DCECE, manual, manualECE, HVDCsecRisk, 
      HVDCsecRiskECE /
  50    resT(*)             'Definition of reserve types (PLSR, TWDR, ILR)'     
            / PLRO, TWRO, ILRO /
  51   
  52  * Risk/Reserve subset
  53    GenRisk(riskC)      'Subset containing generator risks'                 
            / genRisk, genRiskECE /
  54    ManualRisk(riskC)   'Subset containting manual risks'                   
            / manual, manualECE /
  55    HVDCrisk(riskC)     'Subset containing DCCE and DCECE risks'            
            / DCCE, DCECE /
  56    HVDCSecRisk(riskC)  'Subset containing DCCE and DCECE secondary risk'   
            / HVDCsecRisk, HVDCsecRiskECE /
  57   
  58    PLRO(resT)          'PLSR reserve type'                                 
            / PLRO /
  59    TWRO(resT)          'TWDR reserve type'                                 
            / TWRO /
  60    ILRO(resT)          'ILR reserve type'                                  
            / ILRO /
  61   
  62  * Definition of CE and ECE events to support different CE and ECE CVPs
  63    ContingentEvents(riskC)          'Subset of Risk Classes containing cont
      igent event risks'           / genRisk, DCCE, manual, HVDCsecRisk /
  64    ExtendedContingentEvent(riskC)   'Subset of Risk Classes containing exte
      nded contigent event risk'   / genRiskECE, DCECE, manualECE, HVDCsecRiskEC
      E /
  65   
  66    casePar(*)          'Different information about a case and datetime' /s
      tudyMode, intervalLength/
  67   
  68    dtPar(*)            'The various parameters applied for datetime'     / 
      usegeninitialMW, enrgShortfallTransfer, priceTransfer, replaceSurplusPrice
      , igIncreaseLimitRTD, useActualLoad, dontScaleNegLoad, maxSolveLoop, short
      fallRemovalMargin, enrgScarcity, resrvScarcity /
  69   
  70    islPar(*)           'The various parameters applied for each island'  / 
      HVDCsecRisk, HVDCsecRiskECE, HVDCSecSubtractor, sharedNFRLoadOffset, RMTli
      mitFIR, RMTlimitSIR, MWIPS, PDS, Losses, SPDLoadCalcLosses/
  71   
  72    bidofrCmpnt(*)      'Components of the bid and offer'                 / 
      limitMW, price, plsrPct, factor /
  73   
  74    offerPar(*)         'The various parameters required for each offer'  / 
      initialMW, rampUpRate, rampDnRate, resrvGenMax, isIG, FKbandMW, isPriceRes
      ponse, potentialMW, riskGenerator, dispatchable, maxFactorFIR, maxFactorSI
      R /
  75   
  76    bidPar(*)           'The various parameters required for each offer'  / 
      dispatchable, discrete, difference /
  77   
  78    nodePar(*)          'The various parameters applied for each  node'   / 
      referenceNode, demand, initialLoad, conformingFactor, nonConformingFactor,
       loadIsOverride, loadIsBad, loadIsNCL, maxLoad, instructedLoadShed, instru
      ctedShedActive, dispatchedLoad, dispatchedGeneration /
  79   
  80    brPar(*)            'Branch parameter specified'                      / 
      forwardCap, backwardCap, resistance, susceptance, fixedLosses, numLossTran
      ches, HVDCbranch, isOpen /
  81   
  82    resPar(*)           'Parameters applied to reserve class'             / 
      sharingFIR, sharingSIR, roundPwrFIR, roundPwrSIR, roundPwr2Mono, biPole2Mo
      no, monoPoleMin, MRCE, MRECE, lossScalingFactorHVDC, sharedNFRfactor,forwa
      rdHVDCcontrolBand, backwardHVDCcontrolBand /
  83   
  84    riskPar(*)          'Different risk parameters'                       / 
      freeReserve, adjustFactor, HVDCRampUp, minRisk, sharingEffectiveFactor /
  85   
  86    CstrRHS(*)          'Constraint RHS definition'                       / 
      cnstrSense, cnstrLimit, rampingCnstr /
  87   
  88    z(*)                'RP: round power, NR: no reverse, RZ: reverse'    /R
      P, NR, RZ/
  89   
  90    pole(*)             'HVDC poles'                                      / 
      pole1, pole2 /
  91   
  92    testcases(*)        'Test Cases for RTP 4'                            /'
      MSS_21012023030850151_0X','MSS_21302023030830146_0X','MSS_2132202303080013
      3_0X','MSS_61012023030935374_0X'/
  93    ;
  94   
  95  * Primary sets that are defined by /loaded from gdx inputs
  96  Sets
  97    cn(*)               'Case name used to create the GDX file'
  98    ca(*)               'Case ID associated with data'
  99    dt(*)               'Date and time for the trade periods'
 100    tp(*)               'Trade periods for which input data is defined'
 101    b(*)                'Bus definitions for all trading periods'
 102    n(*)                'Node definitions for all trading periods'
 103    o(*)                'Offers for all trading periods'
 104    bd(*)               'Bids for all trading periods'
 105    trdr(*)             'Traders defined for all trading periods'
 106    br(*)               'Branch definition for all trading periods'
 107    brCstr(*)           'Branch constraint definitions for all trading perio
      ds'
 108    MnodeCstr(*)        'Market node constraint definitions for all trading 
      periods'
 109    rg(*)               'Set representing a collection of generation and res
      erve offers treated as a group risk'
 110    rundt(*)            'Run datetime of the case for reporting'
 111    ;
 112   
 113  * Aliases
 114  Alias (dt,dt1,dt2),       (tp,tp1,tp2),     (isl,isl1,isl2),  (b,b1,frB,to
      B),      (n,n1,n2),          (o,o1,o2),        (bd,bd2,bd1)
 115        (br,br1),           (fd,fd1,rd,rd1),  (z,z1,rrz,rrz1),  (rg,rg1),   
               (blk,blk1,blk2),    (los,los1,bp,bp1,rsbp,rsbp1)
 116    ;
 117   
 118  * Dynamic sets that are loaded from GDX
 119  Sets
 120  * Case/period sets
 121    caseDefn(ca,cn,rundt)                 'Mapping caseid - casename - runda
      tetime set'
 122    case2dt2tp(ca,dt,tp)                  'Mapping caseid - datetime - trade
      Period set'
 123   
 124  * Node/bus sets
 125    node2node(ca,dt,n,n1)                 'Node to node mapping used for pri
      ce and energy shortfall transfer'
 126    busIsland(ca,dt,b,isl)                'Bus island mapping for the differ
      ent trade periods'
 127    nodeBus(ca,dt,n,b)                    'Node bus mapping for the differen
      t trading periods'
 128   
 129  * Branch sets
 130    branchDefn(ca,dt,br<,frB,toB)         'Branch definition for the differe
      nt trading periods'
 131    nodeoutagebranch(ca,dt,n,br)          'Mappinging of branch and node whe
      re branch outage may affect the capacity to supply to the node'
 132   
 133  * Offer sets
 134    offerNode(ca,dt,o<,n)                 'Offers and the corresponding offe
      r node for the different trading periods'
 135    offerTrader(ca,dt,o,trdr<)            'Offers and the corresponding trad
      er for the different trading periods'
 136    primarySecondaryOffer(ca,dt,o,o1)     'Primary-secondary offer mapping f
      or the different trading periods - in use from 01 May 2012'
 137   
 138  * Bid sets
 139    bidNode(ca,dt,bd<,n)                  'Bids and the corresponding node f
      or the different trading periods'
 140    bidTrader(ca,dt,bd,trdr<)             'Bids and the corresponding trader
       for the different trading periods'
 141   
 142  * Risk sets
 143    riskGroupOffer(ca,dt,rg<,o,riskC)     'Mappimg of risk group to offers i
      n current trading period for each risk class - SPD version 11.0 update'
 144    ;
 145   
 146   
 147  * Parameters loaded from GDX file in vSPDsolve.gms
 148  Parameters
 149  * Case-Period data
 150    gdxDate(*)                                        'day, month, year of t
      rade date applied to daily GDX'
 151    runMode(ca,casePar)                               'Study mode and interv
      al length applied to each caseID'
 152    dtParameter(ca,dt,dtPar)                          'Parameters applied to
       each caseID-datetime pair'
 153   
 154  * Island data
 155    islandParameter(ca,dt,isl,islPar)                 'Island parameters for
       the different trading periods'
 156   
 157  * Nodal data
 158    nodeParameter(ca,dt,n,nodePar)                    'Nodal input data for 
      all trading periods'
 159   
 160  * Bus data
 161    busElectricalIsland(ca,dt,b)                      'Electrical island sta
      tus of each bus for the different trading periods (0 = Dead)'
 162    nodeBusAllocationFactor(ca,dt,n,b)                'Allocation factor of 
      market node quantities to bus for the different trading periods'
 163   
 164  * Branch and branch constraint data
 165    branchParameter(ca,dt,br,brPar)                   'Branch parameters for
       the different time periods'
 166    branchCstrFactors(ca,dt,brCstr<,br)               'Branch security const
      raint factors (sensitivities) for the current trading period'
 167    branchCstrRHS(ca,dt,brCstr,CstrRHS)               'Branch constraint sen
      se and limit for the different trading periods'
 168   
 169  * Offer data
 170    energyOffer(ca,dt,o,blk,bidofrCmpnt)              'Energy offers for the
       different trading periods'
 171    reserveOffer(ca,dt,o,resC,resT,blk,bidofrCmpnt)   'Reserve offers for th
      e different trading periods'
 172    offerParameter(ca,dt,o,offerPar)                  'Initial MW for each o
      ffer for the different trading periods'
 173   
 174  * Bid data
 175    energyBid(ca,dt,bd,blk,bidofrCmpnt)               'Energy bids for the d
      ifferent trading periods'
 176    bidParameter(ca,dt,bd,bidPar)                     'Parameters applied to
       each bid for the different trading periods'
 177   
 178  * Market node constraint data
 179    mnCnstrRHS(ca,dt,MnodeCstr<,CstrRHS)              'Market node constrain
      t sense and limit for the different trading periods'
 180    mnCstrEnrgFactors(ca,dt,MnodeCstr,o)              'Market node energy of
      fer constraint factors for the current trading period'
 181    mnCnstrResrvFactors(ca,dt,MnodeCstr,o,resC,resT)  'Market node reserve o
      ffer constraint factors for the current trading period'
 182    mnCnstrEnrgBidFactors(ca,dt,MnodeCstr,bd)         'Market node energy bi
      d constraint factors for the different trading periods'
 183    mnCnstrResrvBidFactors(ca,dt,MnodeCstr,bd,resC)   'Market node IL reserv
      e bid constraint factors for the different trading periods - currently not
       used'
 184   
 185  * Risk and reserve/sharing data
 186    riskParameter(ca,dt,isl,resC,riskC,riskPar)       'Risk parameters for t
      he different trading periods'
 187    reserveSharingParameter(ca,dt,resPar)             'Reserve (sharing) par
      ameters for the different trading periods'
 188   
 189  * Scarcity data
 190    scarcityNationalFactor(ca,dt,blk,bidofrCmpnt)      'National energy scar
      city factor parameters'
 191    scarcityNodeFactor(ca,dt,n,blk,bidofrCmpnt)        'Nodal energy scarcit
      y factor parameters'
 192    scarcityNodeLimit(ca,dt,n,blk,bidofrCmpnt)         'Nodal energy scarcit
      y limit parameters'
 193    scarcityResrvLimit(ca,dt,isl,resC,blk,bidofrCmpnt) 'Reserve scarcity lim
      it parameters'
 194   
 195    ;
 196   
 197  * Setting scalars that are hard-coded or defined in vSPDSetting.inc
 198  Scalars
 199    useAClossModel
 200    useHVDClossModel
 201    useACbranchLimits                        'Use the AC branch limits (1 = 
      Yes)'
 202    useHVDCbranchLimits                      'Use the HVDC branch limits (1 
      = Yes)'
 203    resolveCircularBranchFlows               'Resolve circular branch flows 
      (1 = Yes)'
 204    resolveHVDCnonPhysicalLosses             'Resolve nonphysical losses on 
      HVDC branches (1 = Yes)'
 205    resolveACnonPhysicalLosses               'Resolve nonphysical losses on 
      AC branches (1 = Yes)'
 206    circularBranchFlowTolerance
 207    nonPhysicalLossTolerance
 208    useBranchFlowMIPtolerance
 209    useReserveModel                          'Use the reserve model (1 = Yes
      )'
 210    mixedMIPtolerance
 211    LPtimeLimit                              'CPU seconds allowed for LP sol
      ves'
 212    LPiterationLimit                         'Iteration limit allowed for LP
       solves'
 213    MIPtimeLimit                             'CPU seconds allowed for MIP so
      lves'
 214    MIPiterationLimit                        'Iteration limit allowed for MI
      P solves'
 215    MIPoptimality
 216    disconnectedNodePriceCorrection          'Flag to apply price correction
       methods to disconnected node'
 217    branchReceivingEndLossProportion         'Proportion of losses to be all
      ocated to the receiving end of a branch' /1/
 218    BigM                                     'Big M value to be applied for 
      single active segment HVDC loss model' /10000/
 219   
 220  * External loss model from Transpower
 221    lossCoeff_A                       / 0.3101 /
 222    lossCoeff_C                       / 0.14495 /
 223    lossCoeff_D                       / 0.32247 /
 224    lossCoeff_E                       / 0.46742 /
 225    lossCoeff_F                       / 0.82247 /
 226    maxFlowSegment                    / 10000 /
 227   
 228    ;
 229   
 230  * End of GDX declarations
 231   
 232   
 233   
 234  *=========================================================================
      ==========
 235  * 2. Declare additional sets and parameters used throughout the model
 236  *=========================================================================
      ==========
 237   
 238  * Dynamic sets that are calculated on the fly
 239  Sets
 240  * Global
 241    t(ca,dt)                               'Current trading interval to solv
      e'
 242   
 243  * Node/bus
 244    node(ca,dt,n)                          'Node definition for the differen
      t trading periods'
 245    bus(ca,dt,b)                           'Bus definition for the different
       trading periods'
 246    nodeIsland(ca,dt,n,isl)                'Mapping node to island'
 247   
 248  * Network
 249    branch(ca,dt,br)                       'Branches defined for the current
       trading period'
 250    branchBusDefn(ca,dt,br,frB,toB)        'Branch bus connectivity for the 
      current trading period'
 251    branchFrBus(ca,dt,br,frB)              'Define branch from bus connectiv
      ity for the current trading period'
 252    branchToBus(ca,dt,br,frB)              'Define branch to bus connectivit
      y for the current trading period'
 253    branchBusConnect(ca,dt,br,b)           'Indication if a branch is connec
      ted to a bus for the current trading period'
 254    HVDClink(ca,dt,br)                     'HVDC links (branches) defined fo
      r the current trading period'
 255    ACBranch(ca,dt,br)                     'AC branches defined for the curr
      ent trading period'
 256    ACBranchSendingBus(ca,dt,br,b,fd)      'Sending (From) bus of AC branch 
      in forward and backward direction'
 257    ACBranchReceivingBus(ca,dt,br,b,fd)    'Receiving (To) bus of AC branch 
      in forward and backward direction'
 258    HVDClinkSendingBus(ca,dt,br,b)         'Sending (From) bus of HVDC link'
 259    HVDClinkReceivingBus(ca,dt,br,toB)     'Receiving (To) bus of HVDC link'
 260    HVDClinkBus(ca,dt,br,b)                'Sending or Receiving bus of HVDC
       link'
 261    HVDCpoleDirection(ca,dt,br,fd)         'Direction defintion for HVDC pol
      es S->N : forward and N->S : backward'
 262    HVDCpoleBranchMap(pole,br)             'Mapping of HVDC  branch to pole 
      number'
 263    validLossSegment(ca,dt,br,los,fd)      'Valid loss segments for a branch
      '
 264    lossBranch(ca,dt,br)                   'Subset of branches that have non
      -zero loss factors'
 265   
 266  * Branch constraint
 267    BranchConstraint(ca,dt,brCstr)         'Set of valid branch constraints 
      defined for the current trading period'
 268   
 269  * Offer
 270    offer(ca,dt,o)                         'Offers defined for the current t
      rading period'
 271    offerIsland(ca,dt,o,isl)               'Mapping of reserve offer to isla
      nd for the current trading period'
 272    islandRiskGenerator(ca,dt,isl,o)       'Mapping of risk generator to isl
      and in the current trading period'
 273    genOfrBlk(ca,dt,o,blk)                 'Valid trade blocks for the respe
      ctive generation offers'
 274    posEnrgOfr(ca,dt,o)                    'Postive energy offers defined fo
      r the current trading period'
 275    resOfrBlk(ca,dt,o,blk,resC,resT)       'Valid trade blocks for the respe
      ctive reserve offers by class and type'
 276   
 277  * Bid
 278    Bid(ca,dt,bd)                          'Bids defined for the current tra
      ding period'
 279    bidIsland(ca,dt,bd,isl)                'Mapping of purchase bid ILR to i
      sland for the current trading period'
 280    DemBidBlk(ca,dt,bd,blk)                'Valid trade blocks for the respe
      ctive purchase bids'
 281   
 282  * Market node constraint
 283    MNodeConstraint(ca,dt,MnodeCstr)       'Set of market node constraints d
      efined for the current trading period'
 284   
 285  * Reserve/Risk
 286    islandRiskGroup(ca,dt,isl,rg,riskC)                                  'Ma
      ppimg of risk group to island in current trading period for each risk clas
      s - SPD version 11.0 update'
 287   
 288  * Reserve Sharing
 289    rampingConstraint(ca,dt,brCstr)                                      'Su
      bset of branch constraints that limit total HVDC sent from an island due t
      o ramping (5min schedule only)'
 290    bipoleConstraint(ca,dt,isl,brCstr)                                   'Su
      bset of branch constraints that limit total HVDC sent from an island'
 291    monopoleConstraint(ca,dt,isl,brCstr,br)                              'Su
      bset of branch constraints that limit the flow on HVDC pole sent from an i
      sland'
 292    ;
 293   
 294  Alias (t,t1,t2);
 295   
 296  * Initialise risk/reserve data for the current trade period start
 297   
 298   
 299   
 300  * Parameters initialised on the fly
 301  Parameters
 302    studyMode(ca,dt)                        'RTD~101, RTDP~201, PRSS~130, NR
      SS~132, PRSL~131, NRSL~133, WDS~120'
 303    intervalDuration(ca,dt)                 'Length of the trading period in
       minutes (e.g. 30) applied to each caseID-Period pair'
 304   
 305  * Nodal data
 306    refNode(ca,dt,n)                        'Reference nodes for the differe
      nt trading periods'
 307    requiredLoad(ca,dt,n)                   'Nodal demand for the current tr
      ading period in MW'
 308    inputInitialLoad(ca,dt,n)               'This value represents actual lo
      ad MW for RTD schedule input'
 309    conformingFactor(ca,dt,n)               'Initial estimated load for conf
      orming load'
 310    nonConformingLoad(ca,dt,n)              'Initial estimated load for non-
      conforming load'
 311    loadIsOverride(ca,dt,n)                 'Flag if set to 1 --> InputIniti
      alLoad will be fixed as node demand'
 312    loadIsBad(ca,dt,n)                      'Flag if set to 1 --> InitialLoa
      d will be replaced by Estimated Initial Load'
 313    loadIsNCL(ca,dt,n)                      'Flag if set to 1 --> non-confor
      ming load --> will be fixed in RTD load calculation'
 314    maxLoad(ca,dt,n)                        'Pnode maximum load'
 315    instructedLoadShed(ca,dt,n)             'Instructed load shedding applie
      d to RTDP and should be ignore by all other schedules'
 316    instructedShedActive(ca,dt,n)           'Flag if Instructed load sheddin
      g is active; applied to RTDP and should be ignore by all other schedules'
 317    dispatchedLoad(ca,dt,n)                 'Initial dispatched lite demand'
 318    dispatchedGeneration(ca,dt,n)           'Initial dispatched lite generat
      ion'
 319  * Factor to prorate the deficit and surplus at the nodal level
 320    totalBusAllocation(ca,dt,b)             'Total allocation of nodes to bu
      s'
 321    busNodeAllocationFactor(ca,dt,b,n)      'Bus to node allocation factor'
 322   
 323  * Network
 324    branchCapacity(ca,dt,br,fd)             'Branch directed capacity for th
      e different trading periods in MW (Branch Reverse Ratings)'
 325    branchResistance(ca,dt,br)              'Resistance of the a branch for 
      the current trading period in per unit'
 326    branchSusceptance(ca,dt,br)             'Susceptance (inverse of reactan
      ce) of a branch for the current trading period in per unit'
 327    branchFixedLoss(ca,dt,br)               'Fixed loss of the a branch for 
      the current trading period in MW'
 328    branchLossBlocks(ca,dt,br)              'Number of blocks in the loss cu
      rve for the a branch in the current trading period'
 329    lossSegmentMW(ca,dt,br,los,fd)          'MW capacity of each loss segmen
      t'
 330    lossSegmentFactor(ca,dt,br,los,fd)      'Loss factor of each loss segmen
      t'
 331    ACBranchLossMW(ca,dt,br,los,fd)         'MW element of the loss segment 
      curve in MW'
 332    ACBranchLossFactor(ca,dt,br,los,fd)     'Loss factor element of the loss
       segment curve'
 333    HVDCBreakPointMWFlow(ca,dt,br,bp,fd)    'Value of power flow on the HVDC
       at the break point'
 334    HVDCBreakPointMWLoss(ca,dt,br,bp,fd)    'Value of variable losses on the
       HVDC at the break point'
 335   
 336  * Branch constraint
 337    BranchConstraintSense(ca,dt,brCstr)     'Branch security constraint sens
      e for the current trading period (-1:<=, 0:= 1:>=)'
 338    BranchConstraintLimit(ca,dt,brCstr)     'Branch security constraint limi
      t for the current trading period'
 339   
 340  * Offers parameters
 341    generationStart(ca,dt,o)                'The MW generation level associa
      ted with the offer at the start of a trading period'
 342    rampRateUp(ca,dt,o)                     'The ramping up rate in MW per m
      inute associated with the generation offer (MW/min)'
 343    rampRateDn(ca,dt,o)                     'The ramping down rate in MW per
       minute associated with the generation offer (MW/min)'
 344    reserveGenMax(ca,dt,o)                  'Maximum generation and reserve 
      capability for the current trading period (MW)'
 345    intermittentOffer(ca,dt,o)              'Flag to indicate if offer is fr
      om intermittent generator (1 = Yes)'
 346    FKBand(ca,dt,o)                         'Frequency keeper band MW which 
      is set when the risk setter is selected as the frequency keeper'
 347    priceResponsive(ca,dt,o)                'Flag to indicate if wind offer 
      is price responsive (1 = Yes)'
 348    potentialMW(ca,dt,o)                    'Potential max output of Wind of
      fer'
 349    reserveMaxFactor(ca,dt,o,resC)          'Factor to adjust the maximum re
      serve of the different classes for the different offers'
 350   
 351  * Primary-secondary offer parameters
 352    primaryOffer(ca,dt,o)                   'Flag to indicate if offer is a 
      primary offer (1 = Yes)'
 353    secondaryOffer(ca,dt,o)                 'Flag to indicate if offer is a 
      secondary offer (1 = Yes)'
 354   
 355  * Energy offer
 356    enrgOfrMW(ca,dt,o,blk)                  'Generation offer block (MW)'
 357    enrgOfrPrice(ca,dt,o,blk)               'Generation offer price ($/MW)'
 358   
 359  * Reserve offer
 360    resrvOfrPct(ca,dt,o,blk,resC)           'The percentage of the MW block 
      available for PLSR of class FIR or SIR'
 361    resrvOfrPrice(ca,dt,o,blk,resC,resT)    'The price of the reserve of the
       different reserve classes and types ($/MW)'
 362    resrvOfrMW(ca,dt,o,blk,resC,resT)       'The maximum MW offered reserve 
      for the different reserve classes and types (MW)'
 363   
 364  * Bid
 365    demBidMW(ca,dt,bd,blk)                  'Demand bid block in MW'
 366    demBidPrice(ca,dt,bd,blk)               'Purchase bid price in $/MW'
 367    demBidILRMW(ca,dt,bd,blk,resC)          'Purchase bid ILR block in MW fo
      r the different reserve classes - place holder'
 368    demBidILRPrice(ca,dt,bd,blk,resC)       'Purchase bid ILR price in $/MW 
      for the different reserve classes - place holder'
 369   
 370   
 371  * Market node constraint
 372    MNodeConstraintSense(ca,dt,MnodeCstr)   'Market node constraint sense fo
      r the current trading period'
 373    MNodeConstraintLimit(ca,dt,MnodeCstr)   'Market node constraint limit fo
      r the current trading period'
 374   
 375   
 376  * Risk/Reserve
 377    HVDCSecRiskEnabled(ca,dt,isl,riskC)     'Flag indicating if the HVDC sec
      ondary risk is enabled (1 = Yes)'
 378    riskAdjFactor(ca,dt,isl,resC,riskC)     'Risk adjustment factor for each
       island, reserve class and risk class'
 379    HVDCpoleRampUp(ca,dt,isl,resC,riskC)    'HVDC pole MW ramp up capability
       for each island, reserve class and risk class'
 380   
 381   
 382  * Reserve Sharing parameters
 383    reserveShareEnabled(ca,dt,resC)         'Database flag if reserve class 
      resC is sharable'
 384    reserveShareEnabledOverall(ca,dt)       'An internal parameter based on 
      the FIR and SIR enabled, and used as a switch in various places'
 385    reserveRoundPower(ca,dt,resC)           'Database flag that disables rou
      nd power under certain circumstances'
 386    modulationRiskClass(ca,dt,riskC)        'HVDC energy modulation due to f
      requency keeping action'
 387    modulationRisk(ca,dt)                   'Max of HVDC energy modulation d
      ue to frequency keeping action'
 388   
 389    roundPower2MonoLevel(ca,dt)             'HVDC sent value above which one
       pole is stopped and therefore FIR cannot use round power'
 390    bipole2MonoLevel(ca,dt)                 'HVDC sent value below which one
       pole is available to start in the opposite direction and therefore SIR ca
      n use round power'
 391    roPwrZoneExit(ca,dt,resC)               'Above this point there is no gu
      arantee that HVDC sent can be reduced below MonopoleMinimum.'
 392   
 393    monopoleMinimum(ca,dt)                  'The lowest level that the sent 
      HVDC sent can ramp down to when round power is not available.'
 394    HVDCControlBand(ca,dt,rd)               'Modulation limit of the HVDC co
      ntrol system apply to each HVDC direction'
 395    HVDClossScalingFactor(ca,dt)            'Losses used for full voltage mo
      de are adjusted by a factor of (700/500)^2 for reduced voltage operation'
 396    RMTReserveLimit(ca,dt,isl,resC)         'The shared reserve limit used b
      y RMT when it calculated the NFRs. Applied as a cap to the value that is c
      alculated for SharedNFRMax.'
 397    sharedNFRFactor(ca,dt)                  'Factor that is applied to [shar
      edNFRLoad - sharedNFRLoadOffset] as part of the calculation of sharedNFRMa
      x'
 398    sharedNFRLoadOffset(ca,dt,isl)          'Island load that does not provi
      de load damping, e.g., Tiwai smelter load in the South Island. Subtracted 
      from the sharedNFRLoad in the calculation of sharedNFRMax.'
 399    effectiveFactor(ca,dt,isl,resC,riskC)   'Estimate of the effectiveness o
      f the shared reserve once it has been received in the risk island.'
 400   
 401  * HVDC data for Reserve Sharing
 402    numberOfPoles(ca,dt,isl)                                             'Nu
      mber of HVDC poles avaialbe to send energy from an island'
 403    monoPoleCapacity(ca,dt,isl,br)                                       'Ma
      ximum capacity of monopole defined by min of branch capacity and monopole 
      constraint RHS'
 404    biPoleCapacity(ca,dt,isl)                                            'Ma
      ximum capacity of bipole defined by bipole constraint RHS'
 405    HVDCMax(ca,dt,isl)                                                   'Ma
      x HVDC flow based on available poles and branch group constraints RHS'
 406    HVDCCapacity(ca,dt,isl)                                              'To
      tal sent capacity of HVDC based on available poles'
 407    HVDCResistance(ca,dt,isl)                                            'Es
      timated resistance of HVDC flow sent from an island'
 408    HVDClossSegmentMW(ca,dt,isl,los)                                     'MW
       capacity of each loss segment applied to aggregated HVDC capacity'
 409    HVDClossSegmentFactor(ca,dt,isl,los)                                 'Lo
      ss factor of each loss segment applied to to aggregated HVDC loss'
 410    HVDCSentBreakPointMWFlow(ca,dt,isl,los)                              'Va
      lue of total HVDC sent power flow at the break point               --> lam
      bda segment loss model'
 411    HVDCSentBreakPointMWLoss(ca,dt,isl,los)                              'Va
      lue of ariable losses of the total HVDC sent at the break point    --> lam
      bda segment loss model'
 412    HVDCReserveBreakPointMWFlow(ca,dt,isl,los)                           'Va
      lue of total HVDC sent power flow + reserve at the break point     --> lam
      bda segment loss model'
 413    HVDCReserveBreakPointMWLoss(ca,dt,isl,los)                           'Va
      lue of post-contingent variable HVDC losses at the break point     --> lam
      bda segment loss model'
 414   
 415    sharedNFRLoad(ca,dt,isl)                                             'Is
      land load, calculated in pre-processing from the required load and the bid
      s. Used as an input to the calculation of SharedNFRMax.'
 416    sharedNFRMax(ca,dt,isl)                                              'Am
      ount of island free reserve that can be shared through HVDC'
 417    FreeReserve(ca,dt,isl,resC,riskC)       'MW free reserve for each island
      , reserve class and risk class'
 418  * NMIR parameters end
 419   
 420  * Real Time Pricing - Inputs
 421    useGenInitialMW(ca,dt)                                               'Fl
      ag that if set to 1 indicates that for a schedule that is solving multiple
       intervals in sequential mode'
 422   
 423    rtdIgIncreaseLimit(ca,dt)                                            'Fo
      r price responsive Intermittent Generation (IG) the 5-minute ramp-up is ca
      pped using this parameter'
 424    useActualLoad(ca,dt)                                                 'Fl
      ag that if set to 0, initial estimated load [conformingfactor/noncomformin
      gload] is used as initial load '
 425   
 426    islandMWIPS(ca,dt,isl)                                               'Is
      land total generation at the start of RTD run'
 427    islandPDS(ca,dt,isl)                                                 'Is
      land pre-solve deviation - used to adjust RTD node demand'
 428    islandLosses(ca,dt,isl)                                              'Is
      land estimated losss - used to adjust RTD mode demand'
 429    enrgShortfallRemovalMargin(ca,dt)                                    'Th
      is small margin is added to the shortfall removed amount in order to preve
      nt any associated binding ACLine constraint'
 430    maxSolveLoops(ca,dt)                                                 'Th
      e maximum number of times that the Energy Shortfall Check will re-solve th
      e model'
 431   
 432   
 433    energyScarcityEnabled(ca,dt)                                         'Fl
      ag to apply energy scarcity (this is different from FP scarcity situation)
      '
 434    reserveScarcityEnabled(ca,dt)                                        'Fl
      ag to apply reserve scarcity (this is different from FP scarcity situation
      )'
 435    scarcityEnrgNationalFactor(ca,dt,blk)                                'Na
      tional energy scarcity factors'
 436    scarcityEnrgNationalPrice(ca,dt,blk)                                 'Na
      tional energy scarcity prices'
 437    scarcityEnrgNodeFactor(ca,dt,n,blk)                                  'No
      dal energy scarcity factors'
 438    scarcityEnrgNodeFactorPrice(ca,dt,n,blk)                             'No
      dal energy scarcity prices vs factors'
 439    scarcityEnrgNodeLimit(ca,dt,n,blk)                                   'No
      dal energy scarcity limits'
 440    scarcityEnrgNodeLimitPrice(ca,dt,n,blk)                              'No
      dal energy scarcity prices vs limits'
 441    scarcityResrvIslandLimit(ca,dt,isl,resC,blk)                         'Re
      serve scarcity limits'
 442    scarcityResrvIslandPrice(ca,dt,isl,resC,blk)                         'Re
      serve scarcity prices'
 443   
 444  * Real Time Pricing
 445    ScarcityEnrgLimit(ca,dt,n,blk)                                    'Bus e
      nergy scarcity limits'
 446    ScarcityEnrgPrice(ca,dt,n,blk)                                    'Bus e
      nergy scarcity prices vs limits'
 447   
 448   
 449  * Real Time Pricing - Calculated parameters
 450    InitialLoad(ca,dt,n)                                'Value that represen
      ts the Pnode load MW at the start of the solution interval. Depending on t
      he inputs this value will be either actual load, an operator applied overr
      ide or an estimated initial load'
 451    LoadIsScalable(ca,dt,n)                             'Binary value. If Tr
      ue then the Pnode InitialLoad will be scaled in order to calculate nodedem
      and, if False then Pnode InitialLoad will be directly assigned to nodedema
      nd'
 452    LoadScalingFactor(ca,dt,isl)                        'Island-level scalin
      g factor applied to InitialLoad in order to calculate nodedemand'
 453    TargetTotalLoad(ca,dt,isl)                          'Island-level MW loa
      d forecast'
 454    LoadCalcLosses(ca,dt,isl)                           'Island-level MW los
      ses used to calculate the Island-level load forecast from the InputIPS and
       the IslandPSD. 1st loop --> InitialLosses, 2nd solve loop --> SystemLosse
      s as calculated in section 6.3'
 455    EstimatedInitialLoad(ca,dt,n)                       'Calculated estimate
       of initial MW load, available to be used as an alternative to InputInitia
      lLoad'
 456    EstScalingFactor(ca,dt,isl)                         'Scaling applied to 
      ConformingFactor load MW in order to calculate EstimatedInitialLoad'
 457    EstLoadIsScalable(ca,dt,n)                          'Binary value. If Tr
      ue then ConformingFactor load MW will be scaled in order to calculate Esti
      matedInitialLoad. If False then EstNonScalableLoad will be assigned direct
      ly to EstimatedInitialLoad'
 458    EstNonScalableLoad(ca,dt,n)                         'For a non-conformin
      g Pnode this will be the NonConformingLoad MW input, for a conforming Pnod
      e this will be the ConformingFactor MW input if that value is negative, ot
      herwise it will be zero'
 459    EstScalableLoad(ca,dt,n)                            'For a non-conformin
      g Pnode this value will be zero. For a conforming Pnode this value will be
       the ConformingFactor if it is non-negative, otherwise this value will be 
      zero'
 460   
 461  * Post-processing
 462    useBranchFlowMIP(ca,dt)                             'Flag to indicate if
       integer constraints are needed in the branch flow model: 1 = Yes'
 463   
 464   
 465    ;
 466   
 467  Scalars
 468  * Violation penalties
 469  * These violation penalties are not specified in the model formulation doc
      ument (ver.4.3) but are specified in the
 470  * document "Resolving Infeasibilities & High Spring Washer Price situation
      s - an overview" available at www.systemoperator.co.nz/n2766,264.html
 471    deficitBusGenerationPenalty                      'Bus deficit violation 
      penalty'                      /500000/
 472    surplusBusGenerationPenalty                      'Bus surplus violation 
      penalty'                      /500000/
 473    deficitBrCstrPenalty                             'Deficit branch group c
      onstraint violation penalty'  /650000/
 474    surplusBrCstrPenalty                             'Surplus branch group c
      onstraint violation penalty'  /650000/
 475    deficitGnrcCstrPenalty                           'Deficit generic constr
      aint violation penalty'       /710000/
 476    surplusGnrcCstrPenalty                           'Surplus generic constr
      aint violation penalty'       /710000/
 477    deficitRampRatePenalty                           'Deficit ramp rate viol
      ation penalty'                /850000/
 478    surplusRampRatePenalty                           'Surplus ramp rate viol
      ation penalty'                /850000/
 479    deficitBranchFlowPenalty                         'Deficit branch flow vi
      olation penalty'              /600000/
 480    surplusBranchFlowPenalty                         'Surplus branch flow vi
      olation penalty'              /600000/
 481    deficitMnodeCstrPenalty                          'Deficit market node co
      nstraint violation penalty'   /700000/
 482    surplusMnodeCstrPenalty                          'Surplus market node co
      nstraint violation penalty'   /700000/
 483    DeficitReservePenalty_CE                         '6s and 60s CE reserve 
      deficit violation penalty'    /100000/
 484    DeficitReservePenalty_ECE                        '6s and 60s ECE reserve
       deficit violation penalty'   /800000/
 485    ;
 486   
 487   
 488  *=========================================================================
      ==========
 489  * 3. Declare model variables and constraints, and initialise constraints
 490  *=================================================================== =====
      ===========
 491   
 492  * VARIABLES - UPPER CASE
 493  * Equations, parameters and everything else - lower or mixed case
 494   
 495  * Model formulation originally based on the SPD model formulation version 
      4.3 (15 Feb 2008) and amended as indicated
 496   
 497  Variables
 498    NETBENEFIT                                       'Defined as the differe
      nce between the consumer surplus and producer costs adjusted for penalty c
      osts'
 499  * Risk
 500    ISLANDRISK(ca,dt,isl,resC,riskC)                    'Island MW risk for 
      the different reserve and risk classes'
 501    GENISLANDRISK(ca,dt,isl,o,resC,riskC)               'Island MW risk for 
      different risk setting generators'
 502    GENISLANDRISKGROUP(ca,dt,isl,rg,resC,riskC)         'Island MW risk for 
      different risk group - SPD version 11.0'
 503    HVDCGENISLANDRISK(ca,dt,isl,o,resC,riskC)           'Island MW risk for 
      different risk setting generators + HVDC'
 504    HVDCMANISLANDRISK(ca,dt,isl,resC,riskC)             'Island MW risk for 
      manual risk + HVDC'
 505    HVDCREC(ca,dt,isl)                                  'Total net pre-conti
      ngent HVDC MW flow received at each island'
 506    RISKOFFSET(ca,dt,isl,resC,riskC)                    'MW offset applied t
      o the raw risk to account for HVDC pole rampup, AUFLS, free reserve and no
      n-compliant generation'
 507   
 508  * NMIR free variables
 509    HVDCRESERVESENT(ca,dt,isl,resC,rd)                  'Total net post-cont
      ingent HVDC MW flow sent from an island applied to each reserve class'
 510    HVDCRESERVELOSS(ca,dt,isl,resC,rd)                  'Post-contingent HVD
      C loss of energy + reserve sent from an island applied to each reserve cla
      ss'
 511  * NMIR free variables end
 512   
 513  * Network
 514    ACNODENETINJECTION(ca,dt,b)                         'MW injection at bus
      es corresponding to AC nodes'
 515    ACBRANCHFLOW(ca,dt,br)                              'MW flow on undirect
      ed AC branch'
 516    ACNODEANGLE(ca,dt,b)                                'Bus voltage angle'
 517   
 518  * Demand bids can be either positive or negative from v6.0 of SPD formulat
      ion (with DSBF)
 519  * The lower bound of the free variable is updated in vSPDSolve.gms to allo
      w backward compatibility
 520  * Note the formulation now refers to this as Demand. So Demand (in SPD for
      mulation) = Purchase (in vSPD code)
 521    PURCHASE(ca,dt,bd)                                  'Total MW purchase s
      cheduled'
 522    PURCHASEBLOCK(ca,dt,bd,blk)                         'MW purchase schedul
      ed from the individual trade blocks of a bid'
 523   
 524    ;
 525   
 526  Positive variables
 527  * system cost and benefit
 528    SYSTEMBENEFIT(ca,dt)                                'Total purchase bid 
      benefit by period'
 529    SYSTEMCOST(ca,dt)                                   'Total generation an
      d reserve costs by period'
 530    SYSTEMPENALTYCOST(ca,dt)                            'Total violation cos
      ts by period'
 531    TOTALPENALTYCOST                                 'Total violation costs'
 532    SCARCITYCOST(ca,dt)                                 'Total scarcity Cost
      '
 533  * scarcity variables
 534    ENERGYSCARCITYBLK(ca,dt,n,blk)                      'Block energy scarci
      ty cleared at bus b'
 535    ENERGYSCARCITYNODE(ca,dt,n)                         'Energy scarcity cle
      ared at bus b'
 536   
 537    RESERVESHORTFALLBLK(ca,dt,isl,resC,riskC,blk)       'Block reserve short
      fall by risk class (excluding genrisk and HVDC secondary risk)'
 538    RESERVESHORTFALL(ca,dt,isl,resC,riskC)              'Reserve shortfall b
      y risk class (excluding genris kand HVDC secondary risk)'
 539   
 540    RESERVESHORTFALLUNITBLK(ca,dt,isl,o,resC,riskC,blk) 'Block reserve short
      fall by risk generation unit (applied to genrisk and HVDC secondary risk)'
 541    RESERVESHORTFALLUNIT(ca,dt,isl,o,resC,riskC)        'Reserve shortfall b
      y risk generation unit (applied to genrisk and HVDC secondary risk)'
 542   
 543    RESERVESHORTFALLGROUPBLK(ca,dt,isl,rg,resC,riskC,blk) 'Block Reserve sho
      rtfall by risk group (applied to genrisk and HVDC secondary risk)'
 544    RESERVESHORTFALLGROUP(ca,dt,isl,rg,resC,riskC)        'Reserve shortfall
       by risk risk group (applied to genrisk and HVDC secondary risk)'
 545   
 546  * Generation
 547    GENERATION(ca,dt,o)                                 'Total MW generation
       scheduled from an offer'
 548    GENERATIONBLOCK(ca,dt,o,blk)                        'MW generation sched
      uled from the individual trade blocks of an offer'
 549    GENERATIONUPDELTA(ca,dt,o)                          'Total increase in M
      W generation scheduled from an offer'
 550    GENERATIONDNDELTA(ca,dt,o)                          'Total decrease in M
      W generation scheduled from an offer'
 551  * Reserve
 552    RESERVE(ca,dt,o,resC,resT)                          'MW Reserve schedule
      d from an offer'
 553    RESERVEBLOCK(ca,dt,o,blk,resC,resT)                 'MW Reserve schedule
      d from the individual trade blocks of an offer'
 554    ISLANDRESERVE(ca,dt,isl,resC)                       'Total island cleare
      d reserve'
 555   
 556  * NMIR positive variables
 557    SHAREDNFR(ca,dt,isl)                                'Amount of free load
       reserve being shared from an island'
 558    SHAREDRESERVE(ca,dt,isl,resC)                       'Amount of cleared r
      eserve from an island being shared to the other island'
 559    HVDCSENT(ca,dt,isl)                                 'Directed pre-contin
      gent HVDC MW flow sent from each island'
 560    HVDCSENTLOSS(ca,dt,isl)                             'Energy loss for  HV
      DC flow sent from an island'
 561    RESERVESHAREEFFECTIVE(ca,dt,isl,resC,riskC)         'Effective shared re
      serve received at island after adjusted for losses and effectiveness facto
      r'
 562    RESERVESHARERECEIVED(ca,dt,isl,resC,rd)             'Directed shared res
      erve received at island after adjusted for losses'
 563    RESERVESHARESENT(ca,dt,isl,resC,rd)                 'Directed shared res
      erve sent from and island'
 564    RESERVESHAREPENALTY(ca,dt)                          'Penalty cost for ex
      cessive reserve sharing'
 565  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation of RESERVES
      HAREPENALTY
 566    RESERVESHAREEFFECTIVE_CE(ca,dt,isl,resC)            'Max effective share
      d reserve for CE risk received at island after adjusted for losses and eff
      ectiveness factor'
 567    RESERVESHAREEFFECTIVE_ECE(ca,dt,isl,resC)           'Max effective share
      d reserve for ECE risk received at island after adjusted for losses and ef
      fectiveness factor'
 568  * NMIR positive variables end
 569   
 570  * Network
 571    HVDCLINKFLOW(ca,dt,br)                              'MW flow at the send
      ing end scheduled for the HVDC link'
 572    HVDCLINKLOSSES(ca,dt,br)                            'MW losses on the HV
      DC link'
 573    LAMBDA(ca,dt,br,bp)                                 'Non-negative weight
       applied to the breakpoint of the HVDC link'
 574    ACBRANCHFLOWDIRECTED(ca,dt,br,fd)                   'MW flow on the dire
      cted branch'
 575    ACBRANCHLOSSESDIRECTED(ca,dt,br,fd)                 'MW losses on the di
      rected branch'
 576    ACBRANCHFLOWBLOCKDIRECTED(ca,dt,br,los,fd)          'MW flow on the diff
      erent blocks of the loss curve'
 577    ACBRANCHLOSSESBLOCKDIRECTED(ca,dt,br,los,fd)        'MW losses on the di
      fferent blocks of the loss curve'
 578  * Violations
 579    DEFICITBUSGENERATION(ca,dt,b)                       'Deficit generation 
      at a bus in MW'
 580    SURPLUSBUSGENERATION(ca,dt,b)                       'Surplus generation 
      at a bus in MW'
 581    DEFICITBRANCHSECURITYCONSTRAINT(ca,dt,brCstr)       'Deficit branch secu
      rity constraint in MW'
 582    SURPLUSBRANCHSECURITYCONSTRAINT(ca,dt,brCstr)       'Surplus branch secu
      rity constraint in MW'
 583    DEFICITRAMPRATE(ca,dt,o)                            'Deficit ramp rate i
      n MW'
 584    SURPLUSRAMPRATE(ca,dt,o)                            'Surplus ramp rate i
      n MW'
 585    DEFICITBRANCHFLOW(ca,dt,br)                         'Deficit branch flow
       in MW'
 586    SURPLUSBRANCHFLOW(ca,dt,br)                         'Surplus branch flow
       in MW'
 587    DEFICITMNODECONSTRAINT(ca,dt,MnodeCstr)             'Deficit market node
       constraint in MW'
 588    SURPLUSMNODECONSTRAINT(ca,dt,MnodeCstr)             'Surplus market node
       constraint in MW'
 589  * Seperate CE and ECE violation variables to support different CVPs for CE
       and ECE
 590    DEFICITRESERVE_CE(ca,dt,isl,resC)                   'Deficit CE reserve 
      generation in each island for each reserve class in MW'
 591    DEFICITRESERVE_ECE(ca,dt,isl,resC)                  'Deficit ECE reserve
       generation in each island for each reserve class in MW'
 592   
 593    ;
 594   
 595  Binary variables
 596  * NMIR binary variables
 597    HVDCSENDING(ca,dt,isl)                              'Binary variable ind
      icating if island isl is the sending end of the HVDC flow. 1 = Yes.'
 598    INZONE(ca,dt,isl,resC,z)                            'Binary variable (1 
      = Yes ) indicating if the HVDC flow is in a zone (z) that facilitates the 
      appropriate quantity of shared reserves in the reverse direction to the HV
      DC sending island isl for reserve class resC.'
 599    HVDCSENTINSEGMENT(ca,dt,isl,los)                    'Binary variable to 
      decide which loss segment HVDC flow sent from an island falling into --> a
      ctive segment loss model'
 600  * Discete dispachable demand block binary variables
 601    PURCHASEBLOCKBINARY(ca,dt,bd,blk)                   'Binary variable to 
      decide if a purchase block is cleared either fully or nothing at all'
 602  * HVDC Secondary risk should not be covered if HVDC sending is zero. The f
      ollowing binary variable is to enforced that (Update from RTP phase 4)
 603    HVDCSENDZERO(ca,dt,isl)                              'Binary variable in
      dicating if island is NOT the sending energy through HVDC flow. 1 = Yes.'
 604    ;
 605   
 606  SOS1 Variables
 607    ACBRANCHFLOWDIRECTED_INTEGER(ca,dt,br,fd)           'Integer variables u
      sed to select branch flow direction in the event of circular branch flows 
      (3.8.1)'
 608    HVDCLINKFLOWDIRECTED_INTEGER(ca,dt,fd)              'Integer variables u
      sed to select the HVDC branch flow direction on in the event of S->N (forw
      ard) and N->S (reverse) flows (3.8.2)'
 609  * Integer varaible to prevent intra-pole circulating branch flows
 610    HVDCPOLEFLOW_INTEGER(ca,dt,pole,fd)                 'Integer variables u
      sed to select the HVDC pole flow direction on in the event of circulating 
      branch flows within a pole'
 611    ;
 612   
 613  SOS2 Variables
 614    LAMBDAINTEGER(ca,dt,br,bp)                          'Integer variables u
      sed to enforce the piecewise linear loss approxiamtion on the HVDC links'
 615    LAMBDAHVDCENERGY(ca,dt,isl,bp)                      'Integer variables u
      sed to enforce the piecewise linear loss approxiamtion (NMIR) on the HVDC 
      links'
 616    LAMBDAHVDCRESERVE(ca,dt,isl,resC,rd,rsbp)           'Integer variables u
      sed to enforce the piecewise linear loss approxiamtion (NMIR) on the HVDC 
      links'
 617    ;
 618   
 619   
 620  Equations
 621    ObjectiveFunction                                'Objective function of 
      the dispatch model (5.1.1.1)'
 622  * Cost and benefit breaking down
 623    SystemBenefitDefinition(ca,dt)                      'Defined as the sum 
      of the purcahse bid benefit'
 624    SystemCostDefinition(ca,dt)                         'Defined as the sum 
      of the generation and reserve costs'
 625    SystemPenaltyCostDefinition(ca,dt)                  'Defined as the sum 
      of the individual violation costs'
 626    TotalViolationCostDefinition                     'Deined as the sume of 
      period violation cost - (for reporting)'
 627    TotalScarcityCostDefinition(ca,dt)                  'Deined as the sume 
      of scarcity cost'
 628   
 629   
 630  * Offer and purchase constraints
 631    GenerationChangeUpDown(ca,dt,o)                     'Calculate the MW of
       generation increase/decrease for RTD and RTDP (6.1.1.2)'
 632    GenerationOfferDefintion(ca,dt,o)                   'Definition of gener
      ation provided by an offer (6.1.1.3)'
 633    DemBidDiscrete(ca,dt,bd,blk)                        'Definition of discr
      ete purchase mode (6.1.1.7)'
 634    DemBidDefintion(ca,dt,bd)                           'Definition of purch
      ase provided by a bid (6.1.1.8)'
 635    EnergyScarcityDefinition(ca,dt,n)                   'Definition of bus e
      nergy scarcity (6.1.1.10)'
 636   
 637  * Ramping constraints
 638    GenerationRampUp(ca,dt,o)                           'Maximum movement of
       the generator upwards due to up ramp rate (6.2.1.1)'
 639    GenerationRampDown(ca,dt,o)                         'Maximum movement of
       the generator downwards due to down ramp rate (6.2.1.2)'
 640   
 641   
 642   
 643  * HVDC transmission constraints
 644    HVDClinkMaximumFlow(ca,dt,br)                       'Maximum flow on eac
      h HVDC link (6.3.1.1)'
 645    HVDClinkLossDefinition(ca,dt,br)                    'Definition of losse
      s on the HVDC link (6.3.1.2)'
 646    HVDClinkFlowDefinition(ca,dt,br)                    'Definition of MW fl
      ow on the HVDC link (6.3.1.3)'
 647    LambdaDefinition(ca,dt,br)                          'Definition of weigh
      ting factor (6.3.1.4)'
 648   
 649  * HVDC transmission constraints to resolve non-physical loss and circular 
      flow
 650  * These constraints are not explicitly formulated in SPD formulation
 651  * But you can find the description in "Post-Solve Checks"
 652    HVDClinkFlowIntegerDefinition1(ca,dt)               'Definition 1 of the
       integer HVDC link flow variable )'
 653    HVDClinkFlowIntegerDefinition2(ca,dt,fd)            'Definition 2 of the
       integer HVDC link flow variable'
 654    HVDClinkFlowIntegerDefinition3(ca,dt,pole)          'Definition 4 of the
       HVDC pole integer varaible to prevent intra-pole circulating branch flows
      '
 655    HVDClinkFlowIntegerDefinition4(ca,dt,pole,fd)       'Definition 4 of the
       HVDC pole integer varaible to prevent intra-pole circulating branch flows
      '
 656    LambdaIntegerDefinition1(ca,dt,br)                  'Definition of weigh
      ting factor when branch integer constraints are needed'
 657    LambdaIntegerDefinition2(ca,dt,br,los)              'Definition of weigh
      ting factor when branch integer constraints are needed'
 658   
 659  * AC transmission constraints
 660    ACnodeNetInjectionDefinition1(ca,dt,b)              '1st definition of t
      he net injection at buses corresponding to AC nodes (6.4.1.1)'
 661    ACnodeNetInjectionDefinition2(ca,dt,b)              '2nd definition of t
      he net injection at buses corresponding to AC nodes (6.4.1.2)'
 662    ACBranchMaximumFlow(ca,dt,br,fd)                    'Maximum flow on the
       AC branch (6.4.1.3)'
 663    ACBranchFlowDefinition(ca,dt,br)                    'Relationship betwee
      n directed and undirected branch flow variables (6.4.1.4)'
 664    LinearLoadFlow(ca,dt,br)                            'Equation that descr
      ibes the linear load flow (6.4.1.5)'
 665    ACBranchBlockLimit(ca,dt,br,los,fd)                 'Limit on each AC br
      anch flow block (6.4.1.6)'
 666    ACDirectedBranchFlowDefinition(ca,dt,br,fd)         'Composition of the 
      directed branch flow from the block branch flow (6.4.1.7)'
 667    ACBranchLossCalculation(ca,dt,br,los,fd)            'Calculation of the 
      losses in each loss segment (6.4.1.8)'
 668    ACDirectedBranchLossDefinition(ca,dt,br,fd)         'Composition of the 
      directed branch losses from the block branch losses (6.4.1.9)'
 669   
 670  * AC transmission constraints to resolve circular flow
 671    ACDirectedBranchFlowIntegerDefinition1(ca,dt,br)    'Integer constraint 
      to enforce a flow direction on loss AC branches in the presence of circula
      r branch flows or non-physical losses'
 672    ACDirectedBranchFlowIntegerDefinition2(ca,dt,br,fd) 'Integer constraint 
      to enforce a flow direction on loss AC branches in the presence of circula
      r branch flows or non-physical losses'
 673   
 674  * Risk
 675    RiskOffsetCalculation_DCCE(ca,dt,isl,resC,riskC)          '6.5.1.1 : Cal
      culation of the risk offset variable for the DCCE risk class.'
 676    RiskOffsetCalculation_DCECE(ca,dt,isl,resC,riskC)         '6.5.1.3 : Cal
      culation of the risk offset variable for the DCECE risk class.'
 677    HVDCRecCalculation(ca,dt,isl)                             '6.5.1.4 : Cal
      culation of the net received HVDC MW flow into an island.'
 678    HVDCIslandRiskCalculation(ca,dt,isl,resC,riskC)           '6.5.1.5 : Cal
      culation of the island risk for a DCCE and DCECE.'
 679   
 680    GenIslandRiskCalculation(ca,dt,isl,o,resC,riskC)          '6.5.1.6 : Cal
      culation of the island risk for risk setting generators.'
 681    GenIslandRiskCalculation_1(ca,dt,isl,o,resC,riskC)        '6.5.1.6 : Cal
      culation of the island risk for risk setting generators.'
 682    ManualIslandRiskCalculation(ca,dt,isl,resC,riskC)         '6.5.1.7 : Cal
      culation of the island risk based on manual specifications.'
 683    HVDCSendMustZeroBinaryDefinition(ca,dt,isl)               '6.5.1.8: Defi
      ne a flag to show if HVDC sending zero MW flow from an island '
 684   
 685    HVDCIslandSecRiskCalculation_GEN(ca,dt,isl,o,resC,riskC)     '6.5.1.9 : 
      Calculation of the island risk for an HVDC secondary risk to an AC risk.'
 686    HVDCIslandSecRiskCalculation_GEN_1(ca,dt,isl,o,resC,riskC)   '6.5.1.9 : 
      Calculation of the island risk for an HVDC secondary risk to an AC risk.'
 687    HVDCIslandSecRiskCalculation_Manual(ca,dt,isl,resC,riskC)    '6.5.1.10: 
      Calculation of the island risk for an HVDC secondary risk to a manual risk
      .'
 688    HVDCIslandSecRiskCalculation_Manu_1(ca,dt,isl,resC,riskC)    '6.5.1.10: 
      Calculation of the island risk for an HVDC secondary risk to a manual risk
      .'
 689    GenIslandRiskGroupCalculation(ca,dt,isl,rg,resC,riskC)       '6.5.1.11: 
      Calculation of the island risk of risk group.'
 690    GenIslandRiskGroupCalculation_1(ca,dt,isl,rg,resC,riskC)     '6.5.1.11: 
      Calculation of the risk of risk group.'
 691   
 692  * General NMIR equations
 693    EffectiveReserveShareCalculation(ca,dt,isl,resC,riskC)                  
               '6.5.2.1 : Calculation of effective shared reserve'
 694    SharedReserveLimitByClearedReserve(ca,dt,isl,resC)                      
               '6.5.2.2 : Shared offered reserve is limited by cleared reserved'
 695    BothClearedAndFreeReserveCanBeShared(ca,dt,isl,resC,rd)                 
               '6.5.2.4 : Shared reserve is covered by cleared reserved and shar
      eable free reserve'
 696    ReserveShareSentLimitByHVDCControlBand(ca,dt,isl,resC,rd)               
               '6.5.2.5 : Reserve share sent from an island is limited by HVDC c
      ontrol band'
 697    FwdReserveShareSentLimitByHVDCCapacity(ca,dt,isl,resC,rd)               
               '6.5.2.6 : Forward reserve share sent from an island is limited b
      y HVDC capacity'
 698    ReverseReserveOnlyToEnergySendingIsland(ca,dt,isl,resC,rd)              
               '6.5.2.7 : Shared reserve sent in reverse direction is possible o
      nly if the island is not sending energy through HVDC'
 699    ReverseReserveShareLimitByHVDCControlBand(ca,dt,isl,resC,rd)            
               '6.5.2.8 : Reverse reserve share recieved at an island is limited
       by HVDC control band'
 700    ForwardReserveOnlyToEnergyReceivingIsland(ca,dt,isl,resC,rd)            
               '6.5.2.9 : Forward received reserve is possible if in the same di
      rection of HVDC '
 701    ReverseReserveLimitInReserveZone(ca,dt,isl,resC,rd,z)                   
               '6.5.2.10: Reverse reserve constraint if HVDC sent flow in revers
      e zone'
 702    ZeroReserveInNoReserveZone(ca,dt,isl,resC,z)                            
               '6.5.2.11 & 6.5.2.18: No reverse reserve if HVDC sent flow in no 
      reverse zone and no forward reserve if round power disabled'
 703    OnlyOneActiveHVDCZoneForEachReserveClass(ca,dt,resC)                    
               '6.5.2.12: Across both island, one and only one zone is active fo
      r each reserve class'
 704    ZeroSentHVDCFlowForNonSendingIsland(ca,dt,isl)                          
               '6.5.2.13: Directed HVDC sent from an island, if non-zero, must f
      all in a zone for each reserve class'
 705    RoundPowerZoneSentHVDCUpperLimit(ca,dt,isl,resC,z)                      
               '6.5.2.14: Directed HVDC sent from an island <= RoundPowerZoneExi
      t level if in round power zone of that island'
 706    HVDCSendingIslandDefinition(ca,dt,isl,resC)                             
               '6.5.2.15: An island is HVDC sending island if HVDC flow sent is 
      in one of the three zones for each reserve class '
 707    OnlyOneSendingIslandExists(ca,dt)                                       
               '6.5.2.19: One and only one island is HVDC sending island'
 708    HVDCSentCalculation(ca,dt,isl)                                          
               '6.5.2.20: Total HVDC sent from each island'
 709   
 710  * Lamda loss model
 711    HVDCFlowAccountedForForwardReserve(ca,dt,isl,resC,rd)                   
               '6.5.2.21: HVDC flow sent from an island taking into account forw
      ard sent reserve'
 712    ForwardReserveReceivedAtHVDCReceivingIsland(ca,dt,isl,resC,rd)          
               '6.5.2.22: Forward reserve RECEIVED at an HVDC receiving island'
 713    HVDCFlowAccountedForReverseReserve(ca,dt,isl,resC,rd)                   
               '6.5.2.23: HVDC flow sent from an island taking into account reve
      rse received reserve'
 714    ReverseReserveReceivedAtHVDCSendingIsland(ca,dt,isl,resC,rd)            
               '6.5.2.24: Reverse reserve RECEIVED at an HVDC sending island'
 715    HVDCSentEnergyLambdaDefinition(ca,dt,isl)                               
               '6.5.2.25: Definition of weight factor for total HVDC energy sent
       from an island'
 716    HVDCSentEnergyFlowDefinition(ca,dt,isl)                                 
               '6.5.2.26: Lambda definition of total HVDC energy flow sent from 
      an island'
 717    HVDCSentEnergyLossesDefinition(ca,dt,isl)                               
               '6.5.2.27: Lambda definition of total loss of HVDC energy sent fr
      om an island'
 718    HVDCSentReserveLambdaDefinition(ca,dt,isl,resC,rd)                      
               '6.5.2.28: Definition of weight factor for total HVDC+reserve sen
      t from an island'
 719    HVDCSentReserveFlowDefinition(ca,dt,isl,resC,rd)                        
               '6.5.2.29: Lambda definition of Reserse + Energy flow on HVDC sen
      t from an island'
 720    HVDCSentReserveLossesDefinition(ca,dt,isl,resC,rd)                      
               '6.5.2.30: Lambda definition of Reserse + Energy loss on HVDC sen
      t from an island'
 721   
 722  * Reserve share penalty
 723  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation
 724    ReserveShareEffective_CE_Calculation(ca,dt,isl,resC,riskC)              
               '6.5.2.31: Calculate max effective shared reserve for CE risk rec
      eived at island'
 725    ReserveShareEffective_ECE_Calculation(ca,dt,isl,resC,riskC)             
               '6.5.2.31: Calculate max effective shared reserve for ECE risk re
      ceived at island'
 726    ExcessReserveSharePenalty(ca,dt)                                        
               '6.5.2.31: Constraint to avoid excessive reserve share'
 727   
 728  * Reserve
 729    PLSRReserveProportionMaximum(ca,dt,o,blk,resC,resT)                     
               '6.5.3.1: Maximum PLSR as a proportion of the block MW'
 730    ReserveInterruptibleOfferLimit(ca,dt,o,bd,resC,resT)                    
               '6.5.3.3: Cleared IL reserve is constrained by cleared dispatchab
      le demand'
 731    ReserveOfferDefinition(ca,dt,o,resC,resT)                               
               '6.5.3.4: Definition of the reserve offers of different classes a
      nd types'
 732    EnergyAndReserveMaximum(ca,dt,o,resC)                                   
               '6.5.3.5: Definition of maximum energy and reserves from each gen
      erator'
 733   
 734  * Reserve scarcity/shortfall
 735    HVDCRiskReserveShortFallCalculation(ca,dt,isl,resC,RiskC)               
               '6.5.4.2: Total Reserve Shortfall for DCCE risk'
 736    ManualRiskReserveShortFallCalculation(ca,dt,isl,resC,RiskC)             
               '6.5.4.2: Total Reserve Shortfall for Manual risk'
 737    GenRiskReserveShortFallCalculation(ca,dt,isl,o,resC,RiskC)              
               '6.5.4.2: Total Reserve Shortfall for generation risk unit'
 738    HVDCsecRiskReserveShortFallCalculation(ca,dt,isl,o,resC,RiskC)          
               '6.5.4.2: Total Reserve Shortfall for generation unit + HVDC risk
      '
 739    HVDCsecManualRiskReserveShortFallCalculation(ca,dt,isl,resC,RiskC)      
                '6.5.4.2: Total Reserve Shortfall for Manual risk + HVDC risk'
 740    RiskGroupReserveShortFallCalculation(ca,dt,isl,rg,resC,RiskC)           
                '6.5.4.2: Total Reserve Shortfall for Risk Group'
 741   
 742  * Matching of reserve requirement and availability
 743    IslandReserveCalculation(ca,dt,isl,resC)                                
               '6.5.5.1: Calculate total island cleared reserve'
 744    SupplyDemandReserveRequirement(ca,dt,isl,resC,riskC)                    
               '6.5.5.2&3: Matching of reserve supply and demand'
 745   
 746  * Branch security constraints
 747    BranchSecurityConstraintLE(ca,dt,brCstr)                                
               '6.6.1.5: Branch security constraint with LE sense'
 748    BranchSecurityConstraintGE(ca,dt,brCstr)                                
               '6.6.1.5: Branch security constraint with GE sense'
 749    BranchSecurityConstraintEQ(ca,dt,brCstr)                                
               '6.6.1.5: Branch security constraint with EQ sense'
 750   
 751  * Market node security constraints
 752    MNodeSecurityConstraintLE(ca,dt,MnodeCstr)                              
               '6.6.1.7: Market node security constraint with LE sense'
 753    MNodeSecurityConstraintGE(ca,dt,MnodeCstr)                              
               '6.6.1.7: Market node security constraint with GE sense'
 754    MNodeSecurityConstraintEQ(ca,dt,MnodeCstr)                              
               '6.6.1.7: Market node security constraint with EQ sense'
 755   
 756    ;
 757   
 758  * OBJECTIVE FUNCTION (5.1.1.1)
 759  ObjectiveFunction..
 760    NETBENEFIT
 761  =e=
 762    sum[ t, SYSTEMBENEFIT(t) - SYSTEMCOST(t) - SCARCITYCOST(t)
 763          - SYSTEMPENALTYCOST(t) - RESERVESHAREPENALTY(t) ]
 764    + sum[(t,n,blk), ScarcityEnrgLimit(t,n,blk) * ScarcityEnrgPrice(t,n,blk)
      ]
 765    ;
 766   
 767  * Defined as the net sum of generation cost + reserve cost
 768  SystemCostDefinition(t)..
 769    SYSTEMCOST(t)
 770  =e=
 771    sum[ genOfrBlk(t,o,blk)
 772       , GENERATIONBLOCK(genOfrBlk)
 773       * enrgOfrPrice(genOfrBlk) ]
 774  + sum[ resOfrBlk(t,o,blk,resC,resT)
 775       , RESERVEBLOCK(resOfrBlk)
 776       * resrvOfrPrice(resOfrBlk) ]
 777    ;
 778   
 779  * Defined as the net sum of dispatchable load benefit
 780  SystemBenefitDefinition(t)..
 781    SYSTEMBENEFIT(t)
 782  =e=
 783    sum[ demBidBlk(t,bd,blk)
 784       , PURCHASEBLOCK(demBidBlk)
 785       * demBidPrice(demBidBlk) ]
 786    ;
 787   
 788  * Defined as the sum of the individual violation costs
 789  SystemPenaltyCostDefinition(t)..
 790    SYSTEMPENALTYCOST(t)
 791  =e=
 792    sum[ bus(t,b), deficitBusGenerationPenalty * DEFICITBUSGENERATION(bus)
 793                      + surplusBusGenerationPenalty * SURPLUSBUSGENERATION(b
      us) ]
 794   
 795  + sum[ branch(t,br), surplusBranchFlowPenalty * SURPLUSBRANCHFLOW(branch) 
      ]
 796   
 797  + sum[ offer(t,o), deficitRampRatePenalty * DEFICITRAMPRATE(offer)
 798                        + surplusRampRatePenalty * SURPLUSRAMPRATE(Offer) ]
 799   
 800  + sum[ BranchConstraint(t,brCstr)
 801       , deficitBrCstrPenalty * DEFICITBRANCHSECURITYCONSTRAINT(t,brCstr)
 802       + surplusBrCstrPenalty * SURPLUSBRANCHSECURITYCONSTRAINT(t,brCstr) ]
 803   
 804  + sum[ MNodeConstraint(t,MnodeCstr)
 805       , deficitMnodeCstrPenalty * DEFICITMNODECONSTRAINT(MNodeConstraint)
 806       + surplusMnodeCstrPenalty * SURPLUSMNODECONSTRAINT(MNodeConstraint) ]
 807   
 808  + sum[ (isl,resC)
 809         , [DeficitReservePenalty_CE  * DEFICITRESERVE_CE(t,isl,resC) ]
 810         + [DeficitReservePenalty_ECE * DEFICITRESERVE_ECE(t,isl,resC)]
 811       ]
 812   
 813  + sum[ o $ { (StudyMode(t) = 101) or (StudyMode(t) = 201) }
 814           , 0.0005 * ( GENERATIONUPDELTA(t,o) + GENERATIONDNDELTA(t,o) )
 815       ]
 816    ;
 817   
 818  * Defined as the sum of the individual violation costs (for reporting)
 819  TotalViolationCostDefinition..
 820    TOTALPENALTYCOST =e= sum[ t, SYSTEMPENALTYCOST(t) ] ;
 821   
 822  * Deined as the sume of scarcity cost
 823  TotalScarcityCostDefinition(t)..
 824    SCARCITYCOST(t)
 825  =e=
 826    sum[ (n,blk), ScarcityEnrgPrice(t,n,blk) * ENERGYSCARCITYBLK(t,n,blk) ]
 827   
 828  + sum[ (isl,resC,riskC,blk) $ HVDCrisk(riskC)
 829       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 830        * RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
 831   
 832  + sum[ (isl,resC,riskC,blk) $ ManualRisk(riskC)
 833       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 834       * RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
 835   
 836  +  sum[ (isl,o,resC,riskC,blk) $ { GenRisk(riskC)
 837                                 and islandRiskGenerator(t,isl,o) }
 838       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 839       * RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
 840   
 841  +  sum[ (isl,o,resC,riskC,blk) $ { HVDCsecRisk(riskC)
 842                                 and islandRiskGenerator(t,isl,o) }
 843       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 844       * RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
 845   
 846  +  sum[ (isl, resC,riskC,blk) $ HVDCsecRisk(riskC)
 847       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 848       * RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
 849   
 850  +  sum[ (isl,rg,resC,riskC,blk) $ GenRisk(riskC)
 851       , ScarcityResrvIslandPrice(t,isl,resC,blk)
 852       * RESERVESHORTFALLGROUPBLK(t,isl,rg,resC,riskC,blk) ]
 853  ;
 854   
 855   
 856  *======= GENERATION AND LOAD CONSTRAINTS =================================
      ======
 857   
 858  * Calculate the MW of generation increase/decrease for RTD and RTDP (6.1.1
      .2)'
 859  GenerationChangeUpDown(t,o) $ { (StudyMode(t) = 101) or (StudyMode(t) = 20
      1) }..
 860    GENERATIONUPDELTA(t,o) - GENERATIONDNDELTA(t,o)
 861  =e=
 862    GENERATION(t,o) - generationStart(t,o);
 863   
 864  * Definition of generation provided by an offer (6.1.1.3)
 865  GenerationOfferDefintion(offer(t,o))..
 866    GENERATION(offer)
 867  =e=
 868    sum[ genOfrBlk(offer,blk), GENERATIONBLOCK(offer,blk) ]
 869    ;
 870   
 871  * Definition of discrete purchase mode (6.1.1.7)
 872  DemBidDiscrete(bid(t,bd),blk) $ { bidParameter(bid,'discrete') = 1 }..
 873    PURCHASEBLOCK(bid,blk)
 874  =e=
 875    PURCHASEBLOCKBINARY(bid,blk) * demBidMW(bid,blk)
 876    ;
 877   
 878  * Definition of purchase provided by a bid (6.1.1.8)
 879  DemBidDefintion(bid(t,bd))..
 880    PURCHASE(bid)
 881  =e=
 882    sum[ demBidBlk(bid,blk), PURCHASEBLOCK(bid,blk) ]
 883    ;
 884   
 885  * Definition of bus energy scarcity (6.1.1.10)
 886  EnergyScarcityDefinition(t,n)..
 887    ENERGYSCARCITYNODE(t,n)
 888  =e=
 889    sum[ blk, ENERGYSCARCITYBLK(t,n,blk) ]
 890    ;
 891   
 892  *======= GENERATION AND LOAD CONSTRAINTS END =============================
      ======
 893   
 894   
 895   
 896  *======= RAMPING CONSTRAINTS =============================================
      ======
 897  * Note: The CoefficientForRampRate in SPD formulation  = intervalDuration 
      / 60
 898   
 899  * Maximum movement of the generator downwards due to up ramp rate (6.2.1.1
      )
 900  GenerationRampUp(t,o) $ { posEnrgOfr(t,o) and primaryOffer(t,o) }..
 901    sum[ o1 $ PrimarySecondaryOffer(t,o,o1), GENERATION(t,o1) ]
 902  + GENERATION(t,o) - DEFICITRAMPRATE(t,o)
 903  =l=
 904    generationStart(t,o) + (rampRateUp(t,o) * intervalDuration(t) / 60)
 905    ;
 906   
 907  * Maximum movement of the generator downwards due to down ramp rate (6.2.1
      .2)
 908  GenerationRampDown(t,o) $ { posEnrgOfr(t,o) and primaryOffer(t,o) }..
 909    sum[ o1 $ PrimarySecondaryOffer(t,o,o1), GENERATION(t,o1) ]
 910  + GENERATION(t,o) + SURPLUSRAMPRATE(t,o)
 911  =g=
 912    generationStart(t,o) - (rampRateDn(t,o) * intervalDuration(t) / 60)
 913    ;
 914   
 915  *======= RAMPING CONSTRAINTS END==========================================
      ======
 916   
 917   
 918  *======= HVDC TRANSMISSION EQUATIONS =====================================
      ======
 919   
 920  * Maximum flow on each HVDC link (6.3.1.1)
 921  HVDClinkMaximumFlow(HVDClink(t,br)) $ useHVDCbranchLimits ..
 922    HVDCLINKFLOW(HVDClink)
 923  =l=
 924    sum[ fd $ ( ord(fd)=1 ), branchCapacity(HVDClink,fd) ]
 925    ;
 926   
 927  * Definition of losses on the HVDC link (6.3.1.2)
 928  HVDClinkLossDefinition(HVDClink(t,br))..
 929    HVDCLINKLOSSES(HVDClink)
 930  =e=
 931    sum[ validLossSegment(HVDClink,bp,fd)
 932       , HVDCBreakPointMWLoss(HVDClink,bp,fd) * LAMBDA(HVDClink,bp) ]
 933    ;
 934   
 935  * Definition of MW flow on the HVDC link (6.3.1.3)
 936  HVDClinkFlowDefinition(HVDClink(t,br))..
 937    HVDCLINKFLOW(HVDClink)
 938  =e=
 939    sum[ validLossSegment(HVDClink,bp,fd)
 940    , HVDCBreakPointMWFlow(HVDClink,bp,fd) * LAMBDA(HVDClink,bp) ]
 941    ;
 942   
 943  * Definition of weighting factor (6.3.1.4)
 944  LambdaDefinition(HVDClink(t,br))..
 945    sum(validLossSegment(HVDClink,bp,fd), LAMBDA(HVDClink,bp))
 946  =e=
 947    1
 948    ;
 949   
 950   
 951  *======= HVDC TRANSMISSION EQUATIONS END =================================
      ======
 952   
 953   
 954   
 955  *======= HVDC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES ==================
      ======
 956  * HVDC transmission constraints to resolve non-physical loss and circular 
      flow
 957  * These constraints are not explicitly formulated in SPD formulation
 958  * But you can find the description in "Post-Solve Checks
 959   
 960  * Definition 1 of the integer HVDC link flow variable
 961  * HVDC_North_Flow + HVDC_South_Flow
 962  * = BEN_HAY_1_Flow + BEN_HAY_2_Flow + HAY_BEN_1_Flow + HAY_BEN_2_Flow
 963  HVDClinkFlowIntegerDefinition1(t) $ { UseBranchFlowMIP(t) and
 964                                        resolveCircularBranchFlows }..
 965    sum[ fd, HVDCLINKFLOWDIRECTED_INTEGER(t,fd) ]
 966  =e=
 967    sum[ HVDCpoleDirection(HVDClink(t,br),fd), HVDCLINKFLOW(HVDClink) ]
 968    ;
 969   
 970  * Definition 2 of the integer HVDC link flow variable
 971  * HVDC_North_Flow = BEN_HAY_1_Flow + BEN_HAY_2_Flow
 972  * HVDC_South_Flow = HAY_BEN_1_Flow + HAY_BEN_2_Flow
 973  HVDClinkFlowIntegerDefinition2(t,fd) $ { UseBranchFlowMIP(t) and
 974                                           resolveCircularBranchFlows }..
 975    HVDCLINKFLOWDIRECTED_INTEGER(t,fd)
 976  =e=
 977    sum[ HVDCpoleDirection(HVDClink(t,br),fd), HVDCLINKFLOW(HVDClink) ]
 978    ;
 979   
 980  * Definition of the integer HVDC pole flow variable for intra-pole circula
      ting branch flows
 981  * Pole1_North_Flow + Pole1_South_Flow = BEN_HAY_1_Flow + HAY_BEN_1_Flow
 982  * Pole2_North_Flow + Pole2_South_Flow = BEN_HAY_2_Flow + HAY_BEN_2_Flow
 983  HVDClinkFlowIntegerDefinition3(t,pole) $ { UseBranchFlowMIP(t) and
 984                                             resolveCircularBranchFlows }..
 985    sum[ br $ { HVDClink(t,br)
 986            and HVDCpoleBranchMap(pole,br) } , HVDCLINKFLOW(t,br) ]
 987  =e=
 988    sum[ fd, HVDCPOLEFLOW_INTEGER(t,pole,fd) ]
 989    ;
 990   
 991  * Definition of the integer HVDC pole flow variable for intra-pole circula
      ting branch flows
 992  * Pole1_North_Flow = BEN_HAY_1_Flow + HAY_BEN_1_Flow
 993  * Pole1_South_Flow = BEN_HAY_1_Flow + HAY_BEN_1_Flow
 994  * Pole2_North_Flow = BEN_HAY_2_Flow + HAY_BEN_2_Flow
 995  * Pole2_South_Flow = BEN_HAY_2_Flow + HAY_BEN_2_Flow
 996   
 997  HVDClinkFlowIntegerDefinition4(t,pole,fd) $ { UseBranchFlowMIP(t) and
 998                                                resolveCircularBranchFlows }
      ..
 999    sum[ HVDCpoleDirection(HVDClink(t,br),fd) $ HVDCpoleBranchMap(pole,br)
1000       , HVDCLINKFLOW(HVDClink) ]
1001  =e=
1002    HVDCPOLEFLOW_INTEGER(t,pole,fd)
1003    ;
1004   
1005  *======= HVDC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES END ==============
      ======
1006   
1007   
1008  *======= HVDC TRANSMISSION EQUATIONS FOR SOS2 VARIABLES ==================
      ======
1009  * Definition 1 of weighting factor when branch integer constraints are nee
      ded
1010  LambdaIntegerDefinition1(HVDClink(t,br)) $ { UseBranchFlowMIP(t) and
1011                                               resolveHVDCnonPhysicalLosses 
      }..
1012    sum[ validLossSegment(HVDClink,bp,fd), LAMBDAINTEGER(HVDClink,bp) ]
1013  =e=
1014    1
1015    ;
1016   
1017  * Definition 2 of weighting factor when branch integer constraints are nee
      ded
1018  LambdaIntegerDefinition2(HVDClink(t,br),bp)
1019    $ { UseBranchFlowMIP(t) and resolveHVDCnonPhysicalLosses
1020    and sum[ fd $ validLossSegment(HVDClink,bp,fd), 1] }..
1021    LAMBDAINTEGER(HVDClink,bp)
1022  =e=
1023    LAMBDA(HVDClink,bp)
1024    ;
1025   
1026  *======= HVDC TRANSMISSION EQUATIONS END =================================
      ======
1027   
1028   
1029   
1030   
1031  *======= AC TRANSMISSION EQUATIONS =======================================
      ======
1032   
1033  * 1st definition of the net injection at buses corresponding to AC nodes (
      6.4.1.1)
1034  ACnodeNetInjectionDefinition1(bus(t,b))..
1035    ACNODENETINJECTION(t,b)
1036  =e=
1037    sum[ ACBranchSendingBus(ACBranch(t,br),b,fd)
1038       , ACBRANCHFLOWDIRECTED(ACBranch,fd)
1039       ]
1040  - sum[ ACBranchReceivingBus(ACBranch(t,br),b,fd)
1041       , ACBRANCHFLOWDIRECTED(ACBranch,fd)
1042       ]
1043    ;
1044   
1045  * 2nd definition of the net injection at buses corresponding to AC nodes (
      6.4.1.2)
1046  ACnodeNetInjectionDefinition2(bus(t,b))..
1047    ACNODENETINJECTION(t,b)
1048  =e=
1049    sum[ offerNode(t,o,n) $ NodeBus(t,n,b)
1050       , nodeBusAllocationFactor(t,n,b) * GENERATION(t,o) ]
1051  - sum[ BidNode(t,bd,n) $ NodeBus(t,n,b)
1052       , NodeBusAllocationFactor(t,n,b) * PURCHASE(t,bd) ]
1053  - sum[ NodeBus(t,n,b)
1054       , NodeBusAllocationFactor(t,n,b) * requiredLoad(t,n) ]
1055  + sum[ HVDClinkReceivingBus(HVDClink(t,br),b), HVDCLINKFLOW(HVDClink)   ]
1056  - sum[ HVDClinkReceivingBus(HVDClink(t,br),b), HVDCLINKLOSSES(HVDClink) ]
1057  - sum[ HVDClinkSendingBus(HVDClink(t,br),b)  , HVDCLINKFLOW(HVDClink)   ]
1058  - sum[ HVDClinkBus(HVDClink(t,br),b),   0.5 * branchFixedLoss(HVDClink) ]
1059  - sum[ ACBranchReceivingBus(ACBranch(t,br),b,fd)
1060       , branchReceivingEndLossProportion
1061       * ACBRANCHLOSSESDIRECTED(ACBranch,fd) ]
1062  - sum[ ACBranchSendingBus(ACBranch(t,br),b,fd)
1063       , (1 - branchReceivingEndLossProportion)
1064       * ACBRANCHLOSSESDIRECTED(ACBranch,fd) ]
1065  - sum[ BranchBusConnect(ACBranch(t,br),b), 0.5*branchFixedLoss(ACBranch) ]
1066  + DEFICITBUSGENERATION(t,b) - SURPLUSBUSGENERATION(t,b)
1067  * Note that we model energy scarcity as penalty instead of benefit like SP
      D
1068  * The reason for this is to avoid numerical issues.
1069  + sum[ NodeBus(t,n,b)
1070       , NodeBusAllocationFactor(t,n,b) * ENERGYSCARCITYNODE(t,n)]
1071    ;
1072   
1073  * Maximum flow on the AC branch (6.4.1.3)
1074  ACBranchMaximumFlow(ACbranch(t,br),fd) $ useACbranchLimits..
1075    ACBRANCHFLOWDIRECTED(ACBranch,fd) - SURPLUSBRANCHFLOW(ACBranch)
1076  =l=
1077    branchCapacity(ACBranch,fd)
1078    ;
1079   
1080  * Relationship between directed and undirected branch flow variables (6.4.
      1.4)
1081  ACBranchFlowDefinition(ACBranch(t,br))..
1082    ACBRANCHFLOW(ACBranch)
1083  =e=
1084    sum[ fd $ (ord(fd) = 1), ACBRANCHFLOWDIRECTED(ACBranch,fd) ]
1085  - sum[ fd $ (ord(fd) = 2), ACBRANCHFLOWDIRECTED(ACBranch,fd) ]
1086    ;
1087   
1088  * Equation that describes the linear load flow (6.4.1.5)
1089  LinearLoadFlow(ACBranch(t,br))..
1090    ACBRANCHFLOW(ACBranch)
1091  =e=
1092    branchSusceptance(ACBranch)
1093    * sum[ BranchBusDefn(ACBranch,frB,toB)
1094         , ACNODEANGLE(t,frB) - ACNODEANGLE(t,toB) ]
1095    ;
1096   
1097  * Limit on each AC branch flow block (6.4.1.6)
1098  ACBranchBlockLimit(validLossSegment(ACBranch(t,br),los,fd))..
1099    ACBRANCHFLOWBLOCKDIRECTED(ACBranch,los,fd)
1100  =l=
1101    ACBranchLossMW(ACBranch,los,fd)
1102    ;
1103   
1104  * Composition of the directed branch flow from the block branch flow (6.4.
      1.7)
1105  ACDirectedBranchFlowDefinition(ACBranch(t,br),fd)..
1106    ACBRANCHFLOWDIRECTED(ACBranch,fd)
1107  =e=
1108    sum[ validLossSegment(ACBranch,los,fd)
1109       , ACBRANCHFLOWBLOCKDIRECTED(ACBranch,los,fd) ]
1110    ;
1111   
1112  * Calculation of the losses in each loss segment (6.4.1.8) - Modified for 
      BranchcReverseRatings
1113  ACBranchLossCalculation(validLossSegment(ACBranch(t,br),los,fd))..
1114    ACBRANCHLOSSESBLOCKDIRECTED(ACBranch,los,fd)
1115  =e=
1116    ACBRANCHFLOWBLOCKDIRECTED(ACBranch,los,fd)
1117    * ACBranchLossFactor(ACBranch,los,fd)
1118    ;
1119   
1120  * Composition of the directed branch losses from the block branch losses (
      6.4.1.9)
1121  ACDirectedBranchLossDefinition(ACBranch(t,br),fd)..
1122    ACBRANCHLOSSESDIRECTED(ACBranch,fd)
1123  =e=
1124    sum[ validLossSegment(ACBranch,los,fd)
1125       , ACBRANCHLOSSESBLOCKDIRECTED(ACBranch,los,fd) ]
1126    ;
1127   
1128  *======= AC TRANSMISSION EQUATIONS END ===================================
      ======
1129   
1130   
1131   
1132  *======= AC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES ====================
      ======
1133  * AC transmission constraints to resolve circular flow
1134  * These constraints are not explicitly formulated in SPD formulation
1135  * But you can find the description in "Post-Solve Checks"
1136   
1137  * Integer constraint to enforce a flow direction on loss AC branches in th
      e
1138  * presence of circular branch flows or non-physical losses
1139  ACDirectedBranchFlowIntegerDefinition1(ACBranch(lossBranch(t,br)))
1140    $ { UseBranchFlowMIP(t) and resolveCircularBranchFlows }..
1141    sum[ fd, ACBRANCHFLOWDIRECTED_INTEGER(ACBranch,fd) ]
1142  =e=
1143    sum[ fd, ACBRANCHFLOWDIRECTED(ACBranch,fd) ]
1144    ;
1145   
1146  * Integer constraint to enforce a flow direction on loss AC branches in th
      e
1147  * presence of circular branch flows or non-physical losses
1148  ACDirectedBranchFlowIntegerDefinition2(ACBranch(lossBranch(t,br)),fd)
1149    $ { UseBranchFlowMIP(t) and resolveCircularBranchFlows }..
1150    ACBRANCHFLOWDIRECTED_INTEGER(ACBranch,fd)
1151  =e=
1152    ACBRANCHFLOWDIRECTED(ACBranch,fd)
1153    ;
1154   
1155  *======= AC TRANSMISSION EQUATIONS FOR SOS1 VARIABLES END ================
      ======
1156   
1157   
1158   
1159  *======= RISK EQUATIONS ==================================================
      ======
1160   
1161  * 6.5.1.1 : Calculation of the risk offset variable for the DCCE risk clas
      s.
1162  RiskOffsetCalculation_DCCE(t,isl,resC,riskC)
1163    $ { HVDCrisk(riskC) and ContingentEvents(riskC)  }..
1164    RISKOFFSET(t,isl,resC,riskC)
1165  =e=
1166    FreeReserve(t,isl,resC,riskC) + HVDCPoleRampUp(t,isl,resC,riskC)
1167    ;
1168   
1169  * 6.5.1.3 : Calculation of the risk offset variable for the DCECE risk cla
      ss.
1170  RiskOffsetCalculation_DCECE(t,isl,resC,riskC)
1171    $ { HVDCrisk(riskC) and ExtendedContingentEvent(riskC) }..
1172    RISKOFFSET(t,isl,resC,riskC)
1173  =e=
1174    FreeReserve(t,isl,resC,riskC)
1175    ;
1176   
1177  * 6.5.1.4 : Calculation of the net received HVDC MW flow into an island.
1178  HVDCRecCalculation(t,isl)..
1179    HVDCREC(t,isl)
1180  =e=
1181    sum[ (b,br) $ { BusIsland(t,b,isl)
1182                and HVDClinkSendingBus(t,br,b)
1183                and HVDCLink(t,br)
1184                  }, -HVDCLINKFLOW(t,br)
1185       ]
1186  + sum[ (b,br) $ { BusIsland(t,b,isl)
1187                and HVDClinkReceivingBus(t,br,b)
1188                and HVDCLink(t,br)
1189                  }, HVDCLINKFLOW(t,br) - HVDCLINKLOSSES(t,br)
1190       ]
1191    ;
1192   
1193  * 6.5.1.5 : Calculation of the island risk for a DCCE and DCECE.
1194  HVDCIslandRiskCalculation(t,isl,resC,HVDCrisk)..
1195    ISLANDRISK(t,isl,resC,HVDCrisk)
1196  =e=
1197    riskAdjFactor(t,isl,resC,HVDCrisk)
1198    * [ HVDCREC(t,isl)
1199      - RISKOFFSET(t,isl,resC,HVDCrisk)
1200      + modulationRiskClass(t,HVDCrisk)
1201      ]
1202  * Scarcity reserve (only applied for CE risk)
1203    - RESERVESHORTFALL(t,isl,resC,HVDCrisk) $ ContingentEvents(HVDCrisk)
1204    ;
1205   
1206  * 6.5.1.6 : Calculation of the risk of risk setting generators
1207  GenIslandRiskCalculation_1(t,isl,o,resC,GenRisk)
1208    $ islandRiskGenerator(t,isl,o) ..
1209    GENISLANDRISK(t,isl,o,resC,GenRisk)
1210  =e=
1211    riskAdjFactor(t,isl,resC,GenRisk)
1212    * [ GENERATION(t,o)
1213      - FreeReserve(t,isl,resC,GenRisk)
1214      + FKBand(t,o)
1215      + sum[ resT, RESERVE(t,o,resC,resT) ]
1216      + sum[ o1 $ PrimarySecondaryOffer(t,o,o1)
1217           , sum[ resT, RESERVE(t,o1,resC,resT) ] + GENERATION(t,o1) ]
1218      ]
1219  * NMIR update
1220  - RESERVESHAREEFFECTIVE(t,isl,resC,GenRisk)$reserveShareEnabled(t,resC)
1221  * Scarcity reserve (only applied for CE risk)
1222  - RESERVESHORTFALLUNIT(t,isl,o,resC,GenRisk) $ ContingentEvents(GenRisk)
1223    ;
1224   
1225  * 6.5.1.6 : Calculation of the island risk for risk setting generators
1226  GenIslandRiskCalculation(t,isl,o,resC,GenRisk)
1227    $ islandRiskGenerator(t,isl,o) ..
1228    ISLANDRISK(t,isl,resC,GenRisk)
1229  =g=
1230    GENISLANDRISK(t,isl,o,resC,GenRisk) ;
1231   
1232  * 6.5.1.7 : Calculation of the island risk based on manual specifications
1233  ManualIslandRiskCalculation(t,isl,resC,ManualRisk)..
1234    ISLANDRISK(t,isl,resC,ManualRisk)
1235  =e=
1236    riskAdjFactor(t,isl,resC,ManualRisk)
1237    * [ riskParameter(t,isl,resC,ManualRisk,'minRisk')
1238      - FreeReserve(t,isl,resC,ManualRisk)
1239      ]
1240  * NMIR update
1241  - RESERVESHAREEFFECTIVE(t,isl,resC,ManualRisk)$reserveShareEnabled(t,resC)
1242  * Scarcity reserve (only applied for CE risk)
1243  - RESERVESHORTFALL(t,isl,resC,ManualRisk) $ ContingentEvents(ManualRisk)
1244    ;
1245   
1246  * 6.5.1.8: Define a flag to show if HVDC sending zero MW flow from an isla
      nd
1247  HVDCSendMustZeroBinaryDefinition(t,isl).. HVDCSENT(t,isl) =l= BigM * [ 1 -
       HVDCSENDZERO(t,isl) ] ;
1248   
1249   
1250  * 6.5.1.9 : Calculation of the island risk for an HVDC secondary generatio
      n risk
1251  * HVDC secondary risk includes HVDC risk and Generation of both primary an
      d secondary generation unit + cleared reserve + the FKBand for generator p
      rimary risk
1252  HVDCIslandSecRiskCalculation_GEN_1(t,isl,o,resC,HVDCSecRisk)
1253    $ { islandRiskGenerator(t,isl,o)  and
1254        HVDCSecRiskEnabled(t,isl,HVDCSecRisk) }..
1255    HVDCGENISLANDRISK(t,isl,o,resC,HVDCSecRisk)
1256  =e=
1257    riskAdjFactor(t,isl,resC,HVDCSecRisk)
1258    * [ GENERATION(t,o)
1259      - FreeReserve(t,isl,resC,HVDCSecRisk)
1260      + HVDCREC(t,isl)
1261      - islandParameter(t,isl,'HVDCSecSubtractor')
1262      + FKBand(t,o)
1263      + sum[ resT, RESERVE(t,o,resC,resT) ]
1264      + sum[ o1 $ PrimarySecondaryOffer(t,o,o1)
1265           , sum[ resT, RESERVE(t,o1,resC,resT) ] + GENERATION(t,o1) ]
1266      + modulationRiskClass(t,HVDCSecRisk)
1267      ]
1268  * Scarcity reserve (only applied for CE risk)
1269    - RESERVESHORTFALLUNIT(t,isl,o,resC,HVDCSecRisk) $ ContingentEvents(HVDC
      SecRisk)
1270  * HVDC secondary risk not applied if HVDC sent is zero
1271    - BigM * sum[ isl1 $ (not sameas(isl1,isl)), HVDCSENDZERO(t,isl) ]
1272    ;
1273   
1274  * 6.5.1.9 : Calculation of the island risk for an HVDC secondary generatio
      n risk
1275  HVDCIslandSecRiskCalculation_GEN(t,isl,o,resC,HVDCSecRisk)
1276    $ { islandRiskGenerator(t,isl,o)  and
1277        HVDCSecRiskEnabled(t,isl,HVDCSecRisk) }..
1278    ISLANDRISK(t,isl,resC,HVDCSecRisk)
1279  =g=
1280    HVDCGENISLANDRISK(t,isl,o,resC,HVDCSecRisk)
1281    ;
1282   
1283  * 6.5.1.10: Calculation of the island risk for an HVDC secondary manual ri
      sk
1284  HVDCIslandSecRiskCalculation_Manu_1(t,isl,resC,HVDCSecRisk)
1285    $ HVDCSecRiskEnabled(t,isl,HVDCSecRisk)..
1286    HVDCMANISLANDRISK(t,isl,resC,HVDCSecRisk)
1287  =e=
1288    riskAdjFactor(t,isl,resC,HVDCSecRisk)
1289    * [ riskParameter(t,isl,resC,HVDCSecRisk,'minRisk')
1290      - FreeReserve(t,isl,resC,HVDCSecRisk)
1291      + HVDCREC(t,isl)
1292      - islandParameter(t,isl,'HVDCSecSubtractor')
1293      + modulationRiskClass(t,HVDCSecRisk)
1294      ]
1295  * Scarcity reserve (only applied for CE risk)
1296    - RESERVESHORTFALL(t,isl,resC,HVDCSecRisk) $ ContingentEvents(HVDCSecRis
      k)
1297  * HVDC secondary risk not applied if HVDC sent is zero
1298    - BigM * sum[ isl1 $ (not sameas(isl1,isl)), HVDCSENDZERO(t,isl) ]
1299    ;
1300   
1301  * 6.5.1.10: Calculation of the island risk for an HVDC secondary manual ri
      sk
1302  HVDCIslandSecRiskCalculation_Manual(t,isl,resC,HVDCSecRisk)
1303    $ HVDCSecRiskEnabled(t,isl,HVDCSecRisk)..
1304    ISLANDRISK(t,isl,resC,HVDCSecRisk)
1305  =g=
1306    HVDCMANISLANDRISK(t,isl,resC,HVDCSecRisk)
1307    ;
1308   
1309  * 6.5.1.11: Calculation of the risk of risk group
1310  GenIslandRiskGroupCalculation_1(t,isl,rg,resC,GenRisk)
1311    $ islandRiskGroup(t,isl,rg,GenRisk)..
1312    GENISLANDRISKGROUP(t,isl,rg,resC,GenRisk)
1313  =e=
1314    riskAdjFactor(t,isl,resC,GenRisk)
1315    * [ sum[ o $ { offerIsland(t,o,isl)
1316               and riskGroupOffer(t,rg,o,GenRisk)
1317                 } , GENERATION(t,o) + FKBand(t,o)
1318                   + sum[ resT, RESERVE(t,o,resC,resT) ]
1319           ]
1320      - FreeReserve(t,isl,resC,GenRisk)
1321      ]
1322  * NMIR update
1323  - RESERVESHAREEFFECTIVE(t,isl,resC,GenRisk)$reserveShareEnabled(t,resC)
1324  * Scarcity reserve (only applied for CE risk)
1325  - RESERVESHORTFALLGROUP(t,isl,rg,resC,GenRisk) $ ContingentEvents(GenRisk)
1326    ;
1327   
1328  * 6.5.1.11: Calculation of the island risk for risk group
1329  GenIslandRiskGroupCalculation(t,isl,rg,resC,GenRisk)
1330    $ islandRiskGroup(t,isl,rg,GenRisk)..
1331    ISLANDRISK(t,isl,resC,GenRisk)
1332  =g=
1333    GENISLANDRISKGROUP(t,isl,rg,resC,GenRisk)
1334    ;
1335   
1336  *======= RISK EQUATIONS END ==============================================
      ======
1337   
1338   
1339  *======= NMIR - RESERVE SHARING EQUATIONS ================================
      ======
1340   
1341  * General NMIR equations start -------------------------------------------
      ------
1342   
1343  * Calculation of effective shared reserve - (6.5.2.1)
1344  EffectiveReserveShareCalculation(t,isl,resC,riskC)
1345    $ { reserveShareEnabled(t,resC)
1346    and ( GenRisk(riskC) or ManualRisk(riskC) ) }..
1347    RESERVESHAREEFFECTIVE(t,isl,resC,riskC)
1348  =l=
1349    Sum[ rd , RESERVESHARERECEIVED(t,isl,resC,rd)
1350            * effectiveFactor(t,isl,resC,riskC) ]
1351    ;
1352   
1353  * Shared offered reserve is limited by cleared reserved - (6.5.2.2)
1354  SharedReserveLimitByClearedReserve(t,isl,resC)
1355    $ reserveShareEnabled(t,resC)..
1356    SHAREDRESERVE(t,isl,resC)
1357  =l=
1358    ISLANDRESERVE(t,isl,resC)
1359    ;
1360   
1361  * Both cleared reserved and shareable free reserve can be shared - (6.5.2.
      4)
1362  BothClearedAndFreeReserveCanBeShared(t,isl,resC,rd)
1363    $ reserveShareEnabled(t,resC)..
1364    RESERVESHARESENT(t,isl,resC,rd)
1365  =l=
1366    SHAREDRESERVE(t,isl,resC) + SHAREDNFR(t,isl)$(ord(resC)=1)
1367    ;
1368   
1369  * Reserve share sent is limited by HVDC control band - (6.5.2.5)
1370  ReserveShareSentLimitByHVDCControlBand(t,isl,resC,rd)
1371    $ reserveShareEnabled(t,resC)..
1372    RESERVESHARESENT(t,isl,resC,rd)
1373  =l=
1374    [ HVDCControlBand(t,rd) - modulationRisk(t)
1375    ] $ (HVDCControlBand(t,rd) > modulationRisk(t))
1376    ;
1377   
1378  * Forward reserve share sent is limited by HVDC capacity - (6.5.2.6)
1379  FwdReserveShareSentLimitByHVDCCapacity(t,isl,resC,rd)
1380    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1381    RESERVESHARESENT(t,isl,resC,rd)
1382  + HVDCSENT(t,isl)
1383  =l=
1384    [ HVDCMax(t,isl) - modulationRisk(t) ] $ (HVDCMax(t,isl) > modulationRis
      k(t))
1385  ;
1386   
1387  * Reverse shared reserve is only possible for receiving island - (6.5.2.7)
1388  ReverseReserveOnlyToEnergySendingIsland(t,isl,resC,rd)
1389    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1390    RESERVESHARESENT(t,isl,resC,rd)
1391  =l=
1392    BigM * [ 1 - HVDCSENDING(t,isl) ]
1393    ;
1394   
1395  * Reverse shared reserve recieved at an island is limited by HVDC control 
      band - (6.5.2.8)
1396  ReverseReserveShareLimitByHVDCControlBand(t,isl,resC,rd)
1397    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1398    RESERVESHARERECEIVED(t,isl,resC,rd)
1399  =l=
1400    HVDCSENDING(t,isl) * [ HVDCControlBand(t,rd) - modulationRisk(t)
1401                         ] $ ( HVDCControlBand(t,rd) > modulationRisk(t) )
1402    ;
1403   
1404  * Forward received shared reserve only possible for receiving island - (3.
      4.2.9)
1405  ForwardReserveOnlyToEnergyReceivingIsland(t,isl,resC,rd)
1406    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1407    RESERVESHARERECEIVED(t,isl,resC,rd)
1408  =l=
1409    BigM * [ 1 - HVDCSENDING(t,isl) ]
1410    ;
1411   
1412  * Reverse shared reserve limit if HVDC sent flow in reverse zone - (6.5.2.
      10)
1413  ReverseReserveLimitInReserveZone(t,isl,resC,rd,z)
1414    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) and (ord(z) = 3) }..
1415    RESERVESHARERECEIVED(t,isl,resC,rd)
1416  =l=
1417    HVDCSENT(t,isl)
1418  - (monopoleMinimum(t) + modulationRisk(t))
1419  + BigM * [ 1 - INZONE(t,isl,resC,z) ]
1420    ;
1421   
1422  * No reverse shared reserve if HVDC sent flow in no reverse zone &
1423  * No forward reserve if HVDC sent flow in no reverse zone and RP disabled
1424  * (6.5.2.11) & (6.5.2.18)
1425  ZeroReserveInNoReserveZone(t,isl,resC,z)
1426    $ { reserveShareEnabled(t,resC) and (ord(z) = 2) }..
1427    Sum[ rd $ (ord(rd) = 2), RESERVESHARERECEIVED(t,isl,resC,rd) ]
1428  + Sum[ rd $ (ord(rd) = 1), RESERVESHARESENT(t,isl,resC,rd)
1429       ] $ {reserveRoundPower(t,resC) = 0}
1430  =l=
1431    BigM * [ 1 - INZONE(t,isl,resC,z) ]
1432    ;
1433   
1434  * Across both island, only one zone is active for each reserve class -(6.5
      .2.12)
1435  OnlyOneActiveHVDCZoneForEachReserveClass(t,resC) $ reserveShareEnabled(t,r
      esC)..
1436    Sum[ (isl,z), INZONE(t,isl,resC,z) ] =e= 1 ;
1437   
1438  * HVDC sent from sending island only - (6.5.2.13)
1439  ZeroSentHVDCFlowForNonSendingIsland(t,isl) $ reserveShareEnabledOverall(t)
      ..
1440    HVDCSENT(t,isl) =l= BigM * HVDCSENDING(t,isl) ;
1441   
1442  * HVDC sent from an island <= RoundPowerZoneExit level if in round power z
      one
1443  * of that island - (6.5.2.14)
1444  RoundPowerZoneSentHVDCUpperLimit(t,isl,resC,z)
1445    $ { reserveShareEnabled(t,resC) and (ord(z) = 1) }..
1446    HVDCSENT(t,isl)
1447  =l=
1448    roPwrZoneExit(t,resC) + BigM * [ 1 - INZONE(t,isl,resC,z) ]
1449  ;
1450   
1451  * An island is HVDC sending island if HVDC flow sent is in one of the thre
      e
1452  * zones for each reserve class - (6.5.2.15)
1453  HVDCSendingIslandDefinition(t,isl,resC) $ reserveShareEnabled(t,resC)..
1454    HVDCSENDING(t,isl) =e= Sum[ z, INZONE(t,isl,resC,z) ] ;
1455   
1456  * One and only one island is HVDC sending island - (6.5.2.19)
1457  OnlyOneSendingIslandExists(t) $ reserveShareEnabledOverall(t)..
1458   Sum[ isl, HVDCSENDING(t,isl) ] =e= 1 ;
1459   
1460  * Total HVDC sent from each island - (6.5.2.20)
1461  HVDCSentCalculation(t,isl) $ reserveShareEnabledOverall(t)..
1462    HVDCSENT(t,isl)
1463  =e=
1464    Sum[ (b,br) $ { BusIsland(t,b,isl)
1465                and HVDClinkSendingBus(t,br,b)
1466                and HVDClink(t,br)
1467                  }, HVDCLINKFLOW(t,br)
1468       ]
1469  ;
1470   
1471  * General NMIR equations end ---------------------------------------------
      ------
1472   
1473   
1474  * Lamda loss model -------------------------------------------------------
      ------
1475   
1476  * HVDC flow + forward reserve sent from an island - (6.5.2.21)
1477  HVDCFlowAccountedForForwardReserve(t,isl,resC,rd)
1478    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1479    HVDCRESERVESENT(t,isl,resC,rd)
1480  =e=
1481    RESERVESHARESENT(t,isl,resC,rd) + HVDCSENT(t,isl)
1482    ;
1483   
1484  * Received forward shared reserve at an HVDC receiving island - (6.5.2.22)
1485  ForwardReserveReceivedAtHVDCReceivingIsland(t,isl,resC,rd)
1486    $ { reserveShareEnabled(t,resC) and (ord(rd) = 1) }..
1487    RESERVESHARERECEIVED(t,isl,resC,rd)
1488  =e=
1489    Sum[ isl1 $ (not sameas(isl1,isl))
1490        , RESERVESHARESENT(t,isl1,resC,rd)
1491        - HVDCRESERVELOSS(t,isl1,resC,rd)
1492        + HVDCSENTLOSS(t,isl1) ]
1493    ;
1494   
1495  * HVDC flow - received reverse reserve sent from an island - (6.5.2.23)
1496  HVDCFlowAccountedForReverseReserve(t,isl,resC,rd)
1497    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1498    HVDCRESERVESENT(t,isl,resC,rd)
1499  =e=
1500    HVDCSENT(t,isl) - RESERVESHARERECEIVED(t,isl,resC,rd)
1501    ;
1502   
1503  * Reverse reserve RECEIVED at an HVDC sending island - (6.5.2.24)
1504  ReverseReserveReceivedAtHVDCSendingIsland(t,isl,resC,rd)
1505    $ { reserveShareEnabled(t,resC) and (ord(rd) = 2) }..
1506    RESERVESHARERECEIVED(t,isl,resC,rd)
1507  =e=
1508    Sum[ isl1 $ (not sameas(isl1,isl)), RESERVESHARESENT(t,isl1,resC,rd) ]
1509  - HVDCRESERVELOSS(t,isl,resC,rd)
1510  + HVDCSENTLOSS(t,isl)
1511    ;
1512   
1513  * Total weight factor = 1 for HVDC energy sent from an island - (6.5.2.25)
1514  HVDCSentEnergyLambdaDefinition(t,isl) $ reserveShareEnabledOverall(t)..
1515    Sum[ bp $ (ord(bp) <= 7),LAMBDAHVDCENERGY(t,isl,bp) ] =e= 1 ;
1516   
1517  * Lambda definition of total HVDC energy flow sent from an island
1518  * (6.5.2.26) - SPD version 11.0
1519  HVDCSentEnergyFlowDefinition(t,isl) $ reserveShareEnabledOverall(t)..
1520    HVDCSENT(t,isl)
1521  =e=
1522    Sum[ bp $ (ord(bp) <= 7), HVDCSentBreakPointMWFlow(t,isl,bp)
1523                            * LAMBDAHVDCENERGY(t,isl,bp) ]
1524    ;
1525   
1526  * Lambda definition of total loss of HVDC energy sent from an island
1527  * (6.5.2.27) - SPD version 11.0
1528  HVDCSentEnergyLossesDefinition(t,isl) $ reserveShareEnabledOverall(t)..
1529    HVDCSENTLOSS(t,isl)
1530  =e=
1531    Sum[ bp $ (ord(bp) <= 7), HVDCSentBreakPointMWLoss(t,isl,bp)
1532                            * LAMBDAHVDCENERGY(t,isl,bp) ]
1533    ;
1534   
1535  * Total weight factor = 1 for HVDC+reserve sent from an island -(6.5.2.28)
1536  HVDCSentReserveLambdaDefinition(t,isl,resC,rd) $ reserveShareEnabled(t,res
      C)..
1537    Sum[ rsbp, LAMBDAHVDCRESERVE(t,isl,resC,rd,rsbp) ] =e= 1 ;
1538   
1539  * Lambda definition of Reserse + Energy flow on HVDC sent from an island
1540  * (3.4.2.29) - SPD version 11.0
1541  HVDCSentReserveFlowDefinition(t,isl,resC,rd)
1542    $ reserveShareEnabled(t,resC)..
1543    HVDCRESERVESENT(t,isl,resC,rd)
1544  =e=
1545    Sum[ rsbp, HVDCReserveBreakPointMWFlow(t,isl,rsbp)
1546             * LAMBDAHVDCRESERVE(t,isl,resC,rd,rsbp) ]
1547    ;
1548   
1549  * Lambda definition of Reserse + Energy Loss on HVDC sent from an island
1550  * (3.4.2.30) - SPD version 11.0
1551  HVDCSentReserveLossesDefinition(t,isl,resC,rd)
1552    $ reserveShareEnabled(t,resC)..
1553    HVDCRESERVELOSS(t,isl,resC,rd)
1554  =e=
1555    Sum[ rsbp, HVDCReserveBreakPointMWLoss(t,isl,rsbp)
1556             * LAMBDAHVDCRESERVE(t,isl,resC,rd,rsbp) ]
1557    ;
1558   
1559  * Lamda loss model end ---------------------------------------------------
      ------
1560   
1561   
1562  * Calculate Reserve sharing excess penalty -------------------------------
      ------
1563   
1564  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation
1565  * Calculate max effective shared reserve for CE risk received at island (6
      .5.2.31)
1566  ReserveShareEffective_CE_Calculation(t,isl,resC,riskC)
1567    $ { reserveShareEnabled(t,resC) and ContingentEvents(riskC)
1568    and ( GenRisk(riskC) or ManualRisk(riskC) ) }..
1569    RESERVESHAREEFFECTIVE_CE(t,isl,resC)
1570  =g=
1571    RESERVESHAREEFFECTIVE(t,isl,resC,riskC)
1572    ;
1573   
1574  * Tuong Nguyen added on 24 Feb 2021 to correct the calculation
1575  * Calculate max effective shared reserve for CE risk received at island (6
      .5.2.31)
1576  ReserveShareEffective_ECE_Calculation(t,isl,resC,riskC)
1577    $ { reserveShareEnabled(t,resC) and ExtendedContingentEvent(riskC)
1578    and ( GenRisk(riskC) or ManualRisk(riskC) ) }..
1579    RESERVESHAREEFFECTIVE_ECE(t,isl,resC)
1580  =g=
1581    RESERVESHAREEFFECTIVE(t,isl,resC,riskC)
1582    ;
1583   
1584  * Constraint to avoid excessive reserve share (6.5.2.31)
1585  ExcessReserveSharePenalty(t) $ reserveShareEnabledOverall(t)..
1586    RESERVESHAREPENALTY(t)
1587  =e=
1588    sum[ isl, 1e-5 * SHAREDNFR(t,isl) ]
1589  + sum[ (isl,resC), 2e-5 * SHAREDRESERVE(t,isl,resC) ]
1590  * Tuong Nguyen modified on 24 Feb 2021 to correct the calculation
1591  *+ sum[ (isl,resC,riskC), 3e-5 * RESERVESHAREEFFECTIVE(t,isl,resC,riskC)]
1592  + sum[ (isl,resC), 3e-5 * RESERVESHAREEFFECTIVE_CE(t,isl,resC)]
1593  + sum[ (isl,resC), 3e-5 * RESERVESHAREEFFECTIVE_ECE(t,isl,resC)]
1594  ;
1595  * Calculate Reserve sharing excess penalty end ---------------------------
      ------
1596   
1597  *======= NMIR - RESERVE SHARING EQUATIONS END ============================
      ======
1598   
1599   
1600   
1601  *======= RESERVE EQUATIONS ===============================================
      ======
1602  * 6.5.3.1: Maximum PLSR as a proportion of the block MW
1603  PLSRReserveProportionMaximum(offer(t,o),blk,resC,PLRO)
1604    $ resOfrBlk(offer,blk,resC,PLRO)..
1605    RESERVEBLOCK(Offer,blk,resC,PLRO)
1606  =l=
1607    resrvOfrPct(Offer,blk,resC) * GENERATION(Offer)
1608    ;
1609   
1610  * 6.5.3.3: Cleared IL reserve is constrained by cleared dispatchable deman
      d'
1611  ReserveInterruptibleOfferLimit(t,o,bd,resC,ILRO(resT))
1612    $ { sameas(o,bd) and offer(t,o) and bid(t,bd) and (sum[blk,demBidMW(t,bd
      ,blk)] >= 0) } ..
1613    RESERVE(t,o,resC,resT)
1614  =l=
1615    PURCHASE(t,bd);
1616   
1617   
1618  * 6.5.3.4 Definition of the reserve offers of different classes and types
1619  ReserveOfferDefinition(offer(t,o),resC,resT)..
1620    RESERVE(offer,resC,resT)
1621  =e=
1622    sum[ blk, RESERVEBLOCK(offer,blk,resC,resT) ]
1623    ;
1624   
1625  * 6.5.3.5 Definition of maximum energy and reserves from each generator
1626  EnergyAndReserveMaximum(offer(t,o),resC)..
1627    GENERATION(offer)
1628  + reserveMaxFactor(offer,resC)
1629    * sum[ resT $ (not ILRO(resT)), RESERVE(offer,resC,resT) ]
1630  =l=
1631    reserveGenMax(offer)
1632    ;
1633   
1634  *======= RESERVE EQUATIONS END ===========================================
      ======
1635   
1636   
1637   
1638  *======= RESERVE SCARCITY ================================================
      ======
1639  * 6.5.4.2: Total Reserve Shortfall for DCCE risk
1640  HVDCRiskReserveShortFallCalculation(t,isl,resC,HVDCrisk(RiskC))
1641    $ ContingentEvents(riskC)..
1642    RESERVESHORTFALL(t,isl,resC,riskC)
1643  =e=
1644    sum[ blk, RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
1645    ;
1646   
1647  * 6.5.4.2: Total Reserve Shortfall for Manual risk
1648  ManualRiskReserveShortFallCalculation(t,isl,resC,ManualRisk(RiskC))
1649    $ ContingentEvents(riskC)..
1650    RESERVESHORTFALL(t,isl,resC,riskC)
1651  =e=
1652    sum[ blk, RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
1653    ;
1654   
1655  * 6.5.4.2: Total Reserve Shortfall for generation risk unit
1656  GenRiskReserveShortFallCalculation(t,isl,o,resC,GenRisk(RiskC))
1657    $ { ContingentEvents(riskC) and  islandRiskGenerator(t,isl,o)  }..
1658    RESERVESHORTFALLUNIT(t,isl,o,resC,riskC)
1659  =e=
1660    sum[ blk, RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
1661    ;
1662   
1663  * 6.5.4.2: Total Reserve Shortfall for generation unit + HVDC risk
1664  HVDCsecRiskReserveShortFallCalculation(t,isl,o,resC,HVDCsecRisk(RiskC))
1665    $ { ContingentEvents(riskC) and  islandRiskGenerator(t,isl,o)  }..
1666    RESERVESHORTFALLUNIT(t,isl,o,resC,riskC)
1667  =e=
1668    sum[ blk, RESERVESHORTFALLUNITBLK(t,isl,o,resC,riskC,blk) ]
1669    ;
1670   
1671  * 6.5.4.2: Total Reserve Shortfall for Manual risk + HVDC risk
1672  HVDCsecManualRiskReserveShortFallCalculation(t,isl,resC,HVDCsecRisk(RiskC)
      )
1673    $ ContingentEvents(riskC)..
1674    RESERVESHORTFALL(t,isl,resC,riskC)
1675  =e=
1676    sum[ blk, RESERVESHORTFALLBLK(t,isl,resC,riskC,blk) ]
1677    ;
1678   
1679  * 6.5.4.2: Total Reserve Shortfall for risk group
1680  RiskGroupReserveShortFallCalculation(t,isl,rg,resC,GenRisk(RiskC))
1681    $ { ContingentEvents(riskC) and islandRiskGroup(t,isl,rg,RiskC)}..
1682    RESERVESHORTFALLGROUP(t,isl,rg,resC,riskC)
1683  =e=
1684    sum[ blk, RESERVESHORTFALLGROUPBLK(t,isl,rg,resC,riskC,blk) ]
1685    ;
1686   
1687  *======= RESERVE SCARCITY END ============================================
      ======
1688   
1689   
1690   
1691  *======= RISK AND RESERVE BALANCE EQUATIONS ==============================
      ======
1692   
1693  * 6.5.5.1: Calculate total island cleared reserve
1694  IslandReserveCalculation(t,isl,resC)..
1695    ISLANDRESERVE(t,isl,resC)
1696  =l=
1697    Sum[ (o,resT) $ { offer(t,o) and offerIsland(t,o,isl) }
1698                  , RESERVE(t,o,resC,resT)
1699       ]
1700    ;
1701   
1702  * 6.5.5.2 & 6.5.5.3: Matching of reserve supply and demand
1703  SupplyDemandReserveRequirement(t,isl,resC,riskC) $ useReserveModel..
1704    ISLANDRISK(t,isl,resC,riskC)
1705  - DEFICITRESERVE_CE(t,isl,resC)   $ ContingentEvents(riskC)
1706  - DEFICITRESERVE_ECE(t,isl,resC)  $ ExtendedContingentEvent(riskC)
1707  =l=
1708    ISLANDRESERVE(t,isl,resC)
1709    ;
1710   
1711  *======= RISK AND RESERVE BALANCE EQUATIONS END ==========================
      ======
1712   
1713   
1714   
1715  *======= SECURITY EQUATIONS ==============================================
      ======
1716   
1717  * 6.6.1.5 Branch security constraint with LE sense
1718  BranchSecurityConstraintLE(t,brCstr)
1719    $ (BranchConstraintSense(t,brCstr) = -1)..
1720    sum[ br $ ACbranch(t,br)
1721       , branchCstrFactors(t,brCstr,br) * ACBRANCHFLOW(t,br) ]
1722  + sum[ br $ HVDClink(t,br)
1723       , branchCstrFactors(t,brCstr,br) * HVDCLINKFLOW(t,br) ]
1724  - SURPLUSBRANCHSECURITYCONSTRAINT(t,brCstr)
1725  =l=
1726    BranchConstraintLimit(t,brCstr)
1727    ;
1728   
1729  * 6.6.1.5 Branch security constraint with GE sense
1730  BranchSecurityConstraintGE(t,brCstr)
1731    $ (BranchConstraintSense(t,brCstr) = 1)..
1732    sum[ br $ ACbranch(t,br)
1733       , branchCstrFactors(t,brCstr,br) * ACBRANCHFLOW(t,br) ]
1734  + sum[ br $ HVDClink(t,br)
1735       , branchCstrFactors(t,brCstr,br) * HVDCLINKFLOW(t,br) ]
1736  + DEFICITBRANCHSECURITYCONSTRAINT(t,brCstr)
1737  =g=
1738    BranchConstraintLimit(t,brCstr)
1739    ;
1740   
1741  * 6.6.1.5 Branch security constraint with EQ sense
1742  BranchSecurityConstraintEQ(t,brCstr)
1743    $ (BranchConstraintSense(t,brCstr) = 0)..
1744    sum[ br $ ACbranch(t,br)
1745       , branchCstrFactors(t,brCstr,br) * ACBRANCHFLOW(t,br) ]
1746  + sum[ br $ HVDClink(t,br)
1747       , branchCstrFactors(t,brCstr,br) * HVDCLINKFLOW(t,br) ]
1748  + DEFICITBRANCHSECURITYCONSTRAINT(t,brCstr)
1749  - SURPLUSBRANCHSECURITYCONSTRAINT(t,brCstr)
1750  =e=
1751    BranchConstraintLimit(t,brCstr)
1752    ;
1753   
1754   
1755   
1756  * Market node security constraint with LE sense (3.5.1.7a)
1757  MNodeSecurityConstraintLE(t,MnodeCstr)
1758    $ (MNodeConstraintSense(t,MnodeCstr) = -1)..
1759    sum[ o $ posEnrgOfr(t,o)
1760         , MNCstrEnrgFactors(t,MnodeCstr,o)
1761         * GENERATION(t,o)
1762       ]
1763  + sum[ (o,resC,resT) $ offer(t,o)
1764         , MNCnstrResrvFactors(t,MnodeCstr,o,resC,resT)
1765         * RESERVE(t,o,resC,resT)
1766       ]
1767  + sum[ bd $ Bid(t,bd)
1768         , mnCnstrEnrgBidFactors(t,MnodeCstr,bd)
1769         * PURCHASE(t,bd)
1770       ]
1771  - SURPLUSMNODECONSTRAINT(t,MnodeCstr)
1772  =l=
1773    MNodeConstraintLimit(t,MnodeCstr)
1774    ;
1775   
1776  * Market node security constraint with GE sense (3.5.1.7b)
1777  MNodeSecurityConstraintGE(t,MnodeCstr)
1778    $ (MNodeConstraintSense(t,MnodeCstr) = 1)..
1779    sum[ o $ posEnrgOfr(t,o)
1780         , MNCstrEnrgFactors(t,MnodeCstr,o)
1781         * GENERATION(t,o)
1782       ]
1783  + sum[ (o,resC,resT) $ offer(t,o)
1784         , MNCnstrResrvFactors(t,MnodeCstr,o,resC,resT)
1785         * RESERVE(t,o,resC,resT)
1786       ]
1787  + sum[ bd $ Bid(t,bd)
1788         , mnCnstrEnrgBidFactors(t,MnodeCstr,bd)
1789         * PURCHASE(t,bd)
1790       ]
1791  + DEFICITMNODECONSTRAINT(t,MnodeCstr)
1792  =g=
1793    MNodeConstraintLimit(t,MnodeCstr)
1794    ;
1795   
1796  * Market node security constraint with EQ sense (3.5.1.7c)
1797  MNodeSecurityConstraintEQ(t,MnodeCstr)
1798    $ (MNodeConstraintSense(t,MnodeCstr) = 0)..
1799    sum[ o $ posEnrgOfr(t,o)
1800         , MNCstrEnrgFactors(t,MnodeCstr,o)
1801         * GENERATION(t,o)
1802       ]
1803  + sum[ (o,resC,resT) $ offer(t,o)
1804         , MNCnstrResrvFactors(t,MnodeCstr,o,resC,resT)
1805         * RESERVE(t,o,resC,resT)
1806       ]
1807  + sum[ bd $ Bid(t,bd)
1808         , mnCnstrEnrgBidFactors(t,MnodeCstr,bd)
1809         * PURCHASE(t,bd)
1810       ]
1811  + DEFICITMNODECONSTRAINT(t,MnodeCstr)
1812  - SURPLUSMNODECONSTRAINT(t,MnodeCstr)
1813  =e=
1814    MNodeConstraintLimit(t,MnodeCstr)
1815    ;
1816   
1817  *======= SECURITY EQUATIONS END ==========================================
      ======
1818   
1819   
1820  * Model declarations
1821  Model vSPD /
1822  * Objective function
1823    ObjectiveFunction
1824  * Offer and purchase definitions
1825    GenerationOfferDefintion, DemBidDefintion
1826    EnergyScarcityDefinition,
1827    GenerationRampUp, GenerationRampDown
1828  * Network
1829    HVDClinkMaximumFlow, HVDClinkLossDefinition
1830    HVDClinkFlowDefinition, LambdaDefinition
1831    ACnodeNetInjectionDefinition1
1832    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
1833    ACBranchFlowDefinition, LinearLoadFlow
1834    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
1835    ACBranchLossCalculation, ACDirectedBranchLossDefinition
1836  * Risk
1837    HVDCIslandRiskCalculation, HVDCRecCalculation
1838    GenIslandRiskCalculation, GenIslandRiskCalculation_1
1839    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
1840    ManualIslandRiskCalculation
1841  * Reserve
1842    PLSRReserveProportionMaximum, ReserveOfferDefinition
1843    EnergyAndReserveMaximum
1844  * Reserve scarcity/shortfall
1845    HVDCRiskReserveShortFallCalculation
1846    ManualRiskReserveShortFallCalculation
1847    GenRiskReserveShortFallCalculation
1848    HVDCsecRiskReserveShortFallCalculation
1849    HVDCsecManualRiskReserveShortFallCalculation
1850    RiskGroupReserveShortFallCalculation
1851  * Matching of reserve requirement and availability
1852    SupplyDemandReserveRequirement, IslandReserveCalculation
1853  * Risk Offset calculation
1854    RiskOffsetCalculation_DCCE
1855    RiskOffsetCalculation_DCECE
1856  * Island risk definitions
1857  * Include HVDC secondary risk constraints
1858    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
1859    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
1860  * Branch security constraints
1861    BranchSecurityConstraintLE
1862    BranchSecurityConstraintGE
1863    BranchSecurityConstraintEQ
1864  * Market node security constraints
1865    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE
1866    MNodeSecurityConstraintEQ
1867  * ViolationCost
1868    SystemCostDefinition, SystemBenefitDefinition
1869    SystemPenaltyCostDefinition, TotalViolationCostDefinition
1870    TotalScarcityCostDefinition
1871    / ;
1872   
1873  Model vSPD_NMIR /
1874  * Objective function
1875    ObjectiveFunction
1876  * Offer and purchase definitions
1877    GenerationOfferDefintion, DemBidDiscrete,
1878    DemBidDefintion, EnergyScarcityDefinition,
1879    GenerationRampUp, GenerationRampDown, GenerationChangeUpDown
1880  * Network
1881    HVDClinkMaximumFlow, HVDClinkLossDefinition
1882    HVDClinkFlowDefinition, LambdaDefinition
1883    ACnodeNetInjectionDefinition1
1884    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
1885    ACBranchFlowDefinition, LinearLoadFlow
1886    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
1887    ACBranchLossCalculation, ACDirectedBranchLossDefinition
1888  * Risk
1889    RiskOffsetCalculation_DCCE, RiskOffsetCalculation_DCECE
1890    HVDCIslandRiskCalculation, HVDCRecCalculation, ManualIslandRiskCalculati
      on
1891    GenIslandRiskCalculation, GenIslandRiskCalculation_1
1892    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
1893    HVDCSendMustZeroBinaryDefinition
1894    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
1895    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
1896  * Reserve
1897    PLSRReserveProportionMaximum, ReserveInterruptibleOfferLimit
1898    ReserveOfferDefinition, EnergyAndReserveMaximum
1899  * Reserve scarcity/shortfall
1900    HVDCRiskReserveShortFallCalculation
1901    ManualRiskReserveShortFallCalculation
1902    GenRiskReserveShortFallCalculation
1903    HVDCsecRiskReserveShortFallCalculation
1904    HVDCsecManualRiskReserveShortFallCalculation
1905    RiskGroupReserveShortFallCalculation
1906  * Matching of reserve requirement and availability
1907    SupplyDemandReserveRequirement, IslandReserveCalculation
1908  * Branch security constraints
1909    BranchSecurityConstraintLE
1910    BranchSecurityConstraintGE
1911    BranchSecurityConstraintEQ
1912  * Market node security constraints
1913    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE, MNodeSecurityConst
      raintEQ
1914  * ViolationCost
1915    SystemCostDefinition, SystemBenefitDefinition
1916    SystemPenaltyCostDefinition, TotalViolationCostDefinition
1917    TotalScarcityCostDefinition
1918  * General NMIR equations
1919    EffectiveReserveShareCalculation
1920    SharedReserveLimitByClearedReserve
1921    BothClearedAndFreeReserveCanBeShared
1922    ReverseReserveShareLimitByHVDCControlBand
1923    ReserveShareSentLimitByHVDCControlBand
1924    FwdReserveShareSentLimitByHVDCCapacity
1925    ReverseReserveOnlyToEnergySendingIsland
1926    ForwardReserveOnlyToEnergyReceivingIsland
1927    ReverseReserveLimitInReserveZone
1928    ZeroReserveInNoReserveZone
1929    OnlyOneActiveHVDCZoneForEachReserveClass
1930    ZeroSentHVDCFlowForNonSendingIsland
1931    RoundPowerZoneSentHVDCUpperLimit
1932    HVDCSendingIslandDefinition
1933    OnlyOneSendingIslandExists
1934    HVDCSentCalculation
1935    ExcessReserveSharePenalty
1936    ReserveShareEffective_CE_Calculation
1937    ReserveShareEffective_ECE_Calculation
1938  * Lamda loss model NMIR
1939    HVDCFlowAccountedForForwardReserve
1940    ForwardReserveReceivedAtHVDCReceivingIsland
1941    HVDCFlowAccountedForReverseReserve
1942    ReverseReserveReceivedAtHVDCSendingIsland
1943    HVDCSentEnergyLambdaDefinition
1944    HVDCSentEnergyFlowDefinition
1945    HVDCSentEnergyLossesDefinition
1946    HVDCSentReserveLambdaDefinition
1947    HVDCSentReserveFlowDefinition
1948    HVDCSentReserveLossesDefinition
1949    / ;
1950   
1951  Model vSPD_MIP /
1952  * Objective function
1953    ObjectiveFunction
1954  * Offer and purchase definitions
1955    GenerationOfferDefintion, DemBidDiscrete, DemBidDefintion
1956    EnergyScarcityDefinition,
1957    GenerationRampUp, GenerationRampDown, GenerationChangeUpDown
1958  * Network
1959    HVDClinkMaximumFlow, HVDClinkLossDefinition
1960    HVDClinkFlowDefinition, LambdaDefinition
1961    ACnodeNetInjectionDefinition1
1962    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
1963    ACBranchFlowDefinition, LinearLoadFlow
1964    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
1965    ACBranchLossCalculation, ACDirectedBranchLossDefinition
1966    ACDirectedBranchFlowIntegerDefinition1, ACDirectedBranchFlowIntegerDefin
      ition2
1967    LambdaIntegerDefinition1, LambdaIntegerDefinition2
1968  * Risk
1969    RiskOffsetCalculation_DCCE, RiskOffsetCalculation_DCECE
1970    HVDCIslandRiskCalculation, HVDCRecCalculation, ManualIslandRiskCalculati
      on
1971    GenIslandRiskCalculation, GenIslandRiskCalculation_1
1972    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
1973    HVDCSendMustZeroBinaryDefinition
1974    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
1975    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
1976  * Reserve
1977    PLSRReserveProportionMaximum, ReserveInterruptibleOfferLimit
1978    ReserveOfferDefinition, EnergyAndReserveMaximum
1979  * Reserve scarcity/shortfall
1980    HVDCRiskReserveShortFallCalculation
1981    ManualRiskReserveShortFallCalculation
1982    GenRiskReserveShortFallCalculation
1983    HVDCsecRiskReserveShortFallCalculation
1984    HVDCsecManualRiskReserveShortFallCalculation
1985    RiskGroupReserveShortFallCalculation
1986  * Matching of reserve requirement and availability
1987    SupplyDemandReserveRequirement, IslandReserveCalculation
1988  * Branch security constraints
1989    BranchSecurityConstraintLE
1990    BranchSecurityConstraintGE
1991    BranchSecurityConstraintEQ
1992  * Market node security constraints
1993    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE, MNodeSecurityConst
      raintEQ
1994  * ViolationCost
1995    SystemCostDefinition, SystemBenefitDefinition
1996    SystemPenaltyCostDefinition, TotalViolationCostDefinition
1997    TotalScarcityCostDefinition
1998  * Set of integer constraints on the HVDC link to incorporate the allowance
       of HVDC roundpower
1999    HVDClinkFlowIntegerDefinition1, HVDClinkFlowIntegerDefinition2
2000    HVDClinkFlowIntegerDefinition3, HVDClinkFlowIntegerDefinition4
2001  * General NMIR equations
2002    EffectiveReserveShareCalculation
2003    SharedReserveLimitByClearedReserve
2004    BothClearedAndFreeReserveCanBeShared
2005    ReverseReserveShareLimitByHVDCControlBand
2006    ReserveShareSentLimitByHVDCControlBand
2007    FwdReserveShareSentLimitByHVDCCapacity
2008    ReverseReserveOnlyToEnergySendingIsland
2009    ForwardReserveOnlyToEnergyReceivingIsland
2010    ReverseReserveLimitInReserveZone
2011    ZeroReserveInNoReserveZone
2012    OnlyOneActiveHVDCZoneForEachReserveClass
2013    ZeroSentHVDCFlowForNonSendingIsland
2014    RoundPowerZoneSentHVDCUpperLimit
2015    HVDCSendingIslandDefinition
2016    OnlyOneSendingIslandExists
2017    HVDCSentCalculation
2018    ExcessReserveSharePenalty
2019    ReserveShareEffective_CE_Calculation
2020    ReserveShareEffective_ECE_Calculation
2021  * Lamda loss model NMIR
2022    HVDCFlowAccountedForForwardReserve
2023    ForwardReserveReceivedAtHVDCReceivingIsland
2024    HVDCFlowAccountedForReverseReserve
2025    ReverseReserveReceivedAtHVDCSendingIsland
2026    HVDCSentEnergyLambdaDefinition
2027    HVDCSentEnergyFlowDefinition
2028    HVDCSentEnergyLossesDefinition
2029    HVDCSentReserveLambdaDefinition
2030    HVDCSentReserveFlowDefinition
2031    HVDCSentReserveLossesDefinition
2032    / ;
2033   
2034  Model vSPD_BranchFlowMIP /
2035  * Objective function
2036    ObjectiveFunction
2037  * Offer and purchase definitions
2038    GenerationOfferDefintion, DemBidDefintion
2039    EnergyScarcityDefinition,
2040    GenerationRampUp, GenerationRampDown, GenerationChangeUpDown
2041  * Network
2042    HVDClinkMaximumFlow, HVDClinkLossDefinition
2043    HVDClinkFlowDefinition, LambdaDefinition
2044    ACnodeNetInjectionDefinition1
2045    ACnodeNetInjectionDefinition2, ACBranchMaximumFlow
2046    ACBranchFlowDefinition, LinearLoadFlow
2047    ACBranchBlockLimit, ACDirectedBranchFlowDefinition
2048    ACBranchLossCalculation, ACDirectedBranchLossDefinition
2049    ACDirectedBranchFlowIntegerDefinition1, ACDirectedBranchFlowIntegerDefin
      ition2
2050    LambdaIntegerDefinition1, LambdaIntegerDefinition2
2051  * Risk
2052    RiskOffsetCalculation_DCCE, RiskOffsetCalculation_DCECE
2053    HVDCIslandRiskCalculation, HVDCRecCalculation, ManualIslandRiskCalculati
      on
2054    GenIslandRiskCalculation, GenIslandRiskCalculation_1
2055    GenIslandRiskGroupCalculation, GenIslandRiskGroupCalculation_1
2056    HVDCIslandSecRiskCalculation_GEN, HVDCIslandSecRiskCalculation_GEN_1
2057    HVDCIslandSecRiskCalculation_Manual, HVDCIslandSecRiskCalculation_Manu_1
2058  * Reserve
2059    PLSRReserveProportionMaximum, ReserveOfferDefinition
2060    EnergyAndReserveMaximum
2061  * Reserve scarcity/shortfall
2062    HVDCRiskReserveShortFallCalculation
2063    ManualRiskReserveShortFallCalculation
2064    GenRiskReserveShortFallCalculation
2065    HVDCsecRiskReserveShortFallCalculation
2066    HVDCsecManualRiskReserveShortFallCalculation
2067    RiskGroupReserveShortFallCalculation
2068  * Matching of reserve requirement and availability
2069    SupplyDemandReserveRequirement, IslandReserveCalculation
2070  * Branch security constraints
2071    BranchSecurityConstraintLE
2072    BranchSecurityConstraintGE
2073    BranchSecurityConstraintEQ
2074  * Market node security constraints
2075    MNodeSecurityConstraintLE, MNodeSecurityConstraintGE, MNodeSecurityConst
      raintEQ
2076  * ViolationCost
2077    SystemCostDefinition, SystemBenefitDefinition
2078    SystemPenaltyCostDefinition, TotalViolationCostDefinition
2079    TotalScarcityCostDefinition
2080  * Set of intrger constraints on the HVDC link to incorporate the allowance
       of HVDC roundpower
2081    HVDClinkFlowIntegerDefinition1, HVDClinkFlowIntegerDefinition2
2082    HVDClinkFlowIntegerDefinition3, HVDClinkFlowIntegerDefinition4
2083  * General NMIR equations
2084    EffectiveReserveShareCalculation
2085    SharedReserveLimitByClearedReserve
2086    BothClearedAndFreeReserveCanBeShared
2087    ReverseReserveShareLimitByHVDCControlBand
2088    ReserveShareSentLimitByHVDCControlBand
2089    FwdReserveShareSentLimitByHVDCCapacity
2090    ReverseReserveOnlyToEnergySendingIsland
2091    ForwardReserveOnlyToEnergyReceivingIsland
2092    ReverseReserveLimitInReserveZone
2093    ZeroReserveInNoReserveZone
2094    OnlyOneActiveHVDCZoneForEachReserveClass
2095    ZeroSentHVDCFlowForNonSendingIsland
2096    RoundPowerZoneSentHVDCUpperLimit
2097    HVDCSendingIslandDefinition
2098    OnlyOneSendingIslandExists
2099    HVDCSentCalculation
2100    ExcessReserveSharePenalty
2101    ReserveShareEffective_CE_Calculation
2102    ReserveShareEffective_ECE_Calculation
2103  * Lamda loss model NMIR
2104    HVDCFlowAccountedForForwardReserve
2105    ForwardReserveReceivedAtHVDCReceivingIsland
2106    HVDCFlowAccountedForReverseReserve
2107    ReverseReserveReceivedAtHVDCSendingIsland
2108    HVDCSentEnergyLambdaDefinition
2109    HVDCSentEnergyFlowDefinition
2110    HVDCSentEnergyLossesDefinition
2111    HVDCSentReserveLambdaDefinition
2112    HVDCSentReserveFlowDefinition
2113    HVDCSentReserveLossesDefinition
2114    / ;
2115   
2116  Model vSPD_FTR /
2117  * Objective function
2118    ObjectiveFunction
2119  * Offer and purchase definitions
2120    GenerationOfferDefintion
2121  * Network
2122    HVDClinkMaximumFlow
2123    ACNodeNetInjectionDefinition1, ACNodeNetInjectionDefinition2
2124    ACBranchMaximumFlow, ACBranchFlowDefinition, LinearLoadFlow
2125  * Branch security constraints
2126    BranchSecurityConstraintLE
2127    BranchSecurityConstraintGE
2128    BranchSecurityConstraintEQ
2129  * ViolationCost
2130    SystemCostDefinition, SystemBenefitDefinition
2131    SystemPenaltyCostDefinition, TotalViolationCostDefinition
2132    TotalScarcityCostDefinition
2133    / ;


COMPILATION TIME     =        0.000 SECONDS      3 MB  36.2.0 r433180e WEX-WEI
GAMS 36.2.0  r433180e Released Sep  3, 2021 WEX-WEI x86 64bit/MS Windows - 08/11/23 16:18:57 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


EXECUTION TIME       =        0.000 SECONDS      3 MB  36.2.0 r433180e WEX-WEI


USER: Small MUD-5 User License                       G220916|0002CO-GEN
      Electricity Authority - Te Mana Hiko,                  DC5643-S10


**** FILE SUMMARY

Input      C:\vSPD\vSPD\Programs_new\vSPDmodel.gms
Output     C:\vSPD\vSPD\Programs_new\vSPDmodel.lst
